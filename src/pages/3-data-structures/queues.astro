---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Queues - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/3-data-structures">Data Structures</a> &gt; Queues
  </div>

  <h1>Queues</h1>
  
  <div class="overview">
    <p>
      A queue is a linear data structure that follows the <strong>First In, First Out (FIFO)</strong> principle. 
      Elements are added at one end (rear/back) and removed from the other end (front). Think of it like a line 
      of people waiting - the first person to join the line is the first person to be served.
    </p>
    
    <p>
      Queues are essential in computer science for managing tasks, handling requests, implementing breadth-first 
      search algorithms, and modeling real-world scenarios where order matters.
    </p>
  </div>

  <section class="content-section">
    <h2>Queue Operations</h2>

    <CodeExample 
      client:load
      title="Basic Queue Operations"
      code={`#include <iostream>
#include <queue>
using namespace std;

int main() {
    cout << "=== Basic Queue Operations ===" << endl;
    
    queue<int> q;
    
    // Check if queue is empty
    cout << "Is queue empty? " << (q.empty() ? "Yes" : "No") << endl;
    cout << "Queue size: " << q.size() << endl;
    
    // Enqueue elements (add to rear)
    cout << "\\nEnqueuing elements: 10, 20, 30, 40" << endl;
    q.push(10);
    q.push(20);
    q.push(30);
    q.push(40);
    
    cout << "Queue size: " << q.size() << endl;
    cout << "Front element: " << q.front() << endl;
    cout << "Back element: " << q.back() << endl;
    
    // Dequeue elements (remove from front)
    cout << "\\nDequeuing elements:" << endl;
    while (!q.empty()) {
        cout << "Front: " << q.front() << " -> ";
        q.pop();
        cout << "Size: " << q.size() << endl;
    }
    
    cout << "Is queue empty now? " << (q.empty() ? "Yes" : "No") << endl;
    
    return 0;
}`}
      explanation="Queues follow FIFO (First In, First Out) principle. Elements are added using push() and removed using pop(). We can access front and back elements directly."
      output={`=== Basic Queue Operations ===
Is queue empty? Yes
Queue size: 0

Enqueuing elements: 10, 20, 30, 40
Queue size: 4
Front element: 10
Back element: 40

Dequeuing elements:
Front: 10 -> Size: 3
Front: 20 -> Size: 2
Front: 30 -> Size: 1
Front: 40 -> Size: 0
Is queue empty now? Yes`}
    />
  </section>

  <section class="content-section">
    <h2>Array-Based Queue Implementation</h2>

    <CodeExample 
      client:load
      title="Circular Queue Implementation"
      code={`#include <iostream>
using namespace std;

template<typename T>
class CircularQueue {
private:
    T* arr;
    int capacity;
    int frontIndex;
    int rearIndex;
    int count;

public:
    explicit CircularQueue(int size) : capacity(size), frontIndex(0), rearIndex(-1), count(0) {
        arr = new T[capacity];
    }
    
    ~CircularQueue() {
        delete[] arr;
    }
    
    bool enqueue(const T& item) {
        if (isFull()) {
            cout << "Queue overflow! Cannot enqueue " << item << endl;
            return false;
        }
        
        rearIndex = (rearIndex + 1) % capacity;
        arr[rearIndex] = item;
        count++;
        return true;
    }
    
    bool dequeue() {
        if (isEmpty()) {
            cout << "Queue underflow! Cannot dequeue from empty queue." << endl;
            return false;
        }
        
        frontIndex = (frontIndex + 1) % capacity;
        count--;
        return true;
    }
    
    T& front() {
        if (isEmpty()) {
            throw runtime_error("Queue is empty");
        }
        return arr[frontIndex];
    }
    
    T& back() {
        if (isEmpty()) {
            throw runtime_error("Queue is empty");
        }
        return arr[rearIndex];
    }
    
    bool isEmpty() const { return count == 0; }
    bool isFull() const { return count == capacity; }
    int size() const { return count; }
    
    void print() const {
        cout << "Queue [size=" << count << "/" << capacity << "]: ";
        if (isEmpty()) {
            cout << "Empty";
        } else {
            cout << "front -> ";
            int index = frontIndex;
            for (int i = 0; i < count; i++) {
                cout << arr[index];
                if (i < count - 1) cout << ", ";
                index = (index + 1) % capacity;
            }
            cout << " <- rear";
        }
        cout << endl;
    }
};

int main() {
    cout << "=== Circular Queue Implementation ===" << endl;
    
    CircularQueue<int> queue(5);
    
    cout << "\\nTesting basic operations:" << endl;
    queue.print();
    
    // Test enqueue
    cout << "\\nEnqueuing: 10, 20, 30" << endl;
    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);
    queue.print();
    
    // Test dequeue
    cout << "\\nDequeuing two elements:" << endl;
    queue.dequeue();
    queue.dequeue();
    queue.print();
    
    // Test circular nature
    cout << "\\nEnqueuing more: 40, 50, 60" << endl;
    queue.enqueue(40);
    queue.enqueue(50);
    queue.enqueue(60);
    queue.print();
    
    // Test overflow
    cout << "\\nTrying to enqueue beyond capacity:" << endl;
    queue.enqueue(70);
    
    return 0;
}`}
      explanation="Circular queue uses modular arithmetic to wrap around array indices, efficiently utilizing all array positions and avoiding the need to shift elements."
      output={`=== Circular Queue Implementation ===

Testing basic operations:
Queue [size=0/5]: Empty

Enqueuing: 10, 20, 30
Queue [size=3/5]: front -> 10, 20, 30 <- rear

Dequeuing two elements:
Queue [size=1/5]: front -> 30 <- rear

Enqueuing more: 40, 50, 60
Queue [size=4/5]: front -> 30, 40, 50, 60 <- rear

Trying to enqueue beyond capacity:
Queue overflow! Cannot enqueue 70`}
    />
  </section>

  <section class="content-section">
    <h2>Priority Queue</h2>

    <CodeExample 
      client:load
      title="Priority Queue Implementation and Usage"
      code={`#include <iostream>
#include <queue>
#include <vector>
using namespace std;

struct Task {
    string name;
    int priority;
    
    Task(string n, int p) : name(n), priority(p) {}
    
    // For max heap (higher priority first)
    bool operator<(const Task& other) const {
        return priority < other.priority;
    }
};

int main() {
    cout << "=== Priority Queue ===" << endl;
    
    // Standard priority queue (max heap)
    cout << "\\n1. Max Priority Queue (numbers):" << endl;
    priority_queue<int> maxPQ;
    
    vector<int> numbers = {30, 10, 50, 20, 40};
    cout << "Inserting: ";
    for (int num : numbers) {
        cout << num << " ";
        maxPQ.push(num);
    }
    cout << endl;
    
    cout << "Removing in priority order: ";
    while (!maxPQ.empty()) {
        cout << maxPQ.top() << " ";
        maxPQ.pop();
    }
    cout << endl;
    
    // Min priority queue
    cout << "\\n2. Min Priority Queue:" << endl;
    priority_queue<int, vector<int>, greater<int>> minPQ;
    
    for (int num : numbers) {
        minPQ.push(num);
    }
    
    cout << "Removing in min priority order: ";
    while (!minPQ.empty()) {
        cout << minPQ.top() << " ";
        minPQ.pop();
    }
    cout << endl;
    
    // Custom objects priority queue
    cout << "\\n3. Custom Task Priority Queue:" << endl;
    priority_queue<Task> taskPQ;
    
    taskPQ.push(Task("Low priority task", 1));
    taskPQ.push(Task("High priority task", 5));
    taskPQ.push(Task("Medium priority task", 3));
    taskPQ.push(Task("Critical task", 10));
    
    cout << "Tasks in priority order:" << endl;
    while (!taskPQ.empty()) {
        Task t = taskPQ.top();
        cout << "Priority " << t.priority << ": " << t.name << endl;
        taskPQ.pop();
    }
    
    return 0;
}`}
      explanation="Priority queues serve elements based on priority rather than insertion order. They're typically implemented using heaps and support efficient insertion and removal of highest/lowest priority elements."
      output={`=== Priority Queue ===

1. Max Priority Queue (numbers):
Inserting: 30 10 50 20 40 
Removing in priority order: 50 40 30 20 10 

2. Min Priority Queue:
Removing in min priority order: 10 20 30 40 50 

3. Custom Task Priority Queue:
Tasks in priority order:
Priority 10: Critical task
Priority 5: High priority task
Priority 3: Medium priority task
Priority 1: Low priority task`}
    />
  </section>

  <section class="content-section">
    <h2>Queue Applications</h2>

    <CodeExample 
      client:load
      title="Breadth-First Search and Task Scheduling"
      code={`#include <iostream>
#include <queue>
#include <vector>
#include <unordered_set>
using namespace std;

// BFS implementation for tree traversal
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

void bfsTraversal(TreeNode* root) {
    if (!root) return;
    
    queue<TreeNode*> q;
    q.push(root);
    
    cout << "BFS traversal: ";
    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();
        
        cout << node->val << " ";
        
        if (node->left) q.push(node->left);
        if (node->right) q.push(node->right);
    }
    cout << endl;
}

// Task scheduling simulation
struct Task {
    int id;
    string description;
    int processingTime;
    
    Task(int i, string desc, int time) : id(i), description(desc), processingTime(time) {}
};

void simulateTaskScheduling() {
    cout << "\\n=== Task Scheduling Simulation ===" << endl;
    
    queue<Task> taskQueue;
    
    // Add tasks to queue
    taskQueue.push(Task(1, "Send email", 2));
    taskQueue.push(Task(2, "Process payment", 5));
    taskQueue.push(Task(3, "Update database", 3));
    taskQueue.push(Task(4, "Generate report", 7));
    
    int currentTime = 0;
    
    cout << "Processing tasks in FIFO order:" << endl;
    while (!taskQueue.empty()) {
        Task task = taskQueue.front();
        taskQueue.pop();
        
        cout << "Time " << currentTime << ": Started task " << task.id 
             << " (" << task.description << ")" << endl;
        
        currentTime += task.processingTime;
        
        cout << "Time " << currentTime << ": Finished task " << task.id << endl;
    }
}

int main() {
    cout << "=== Queue Applications ===" << endl;
    
    // BFS example
    cout << "\\n1. Breadth-First Search:" << endl;
    // Create a simple binary tree
    //       1
    //      / \\
    //     2   3
    //    / \\
    //   4   5
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    
    bfsTraversal(root);
    
    // Task scheduling
    simulateTaskScheduling();
    
    cout << "\\n=== Common Queue Applications ===" << endl;
    cout << "1. CPU task scheduling" << endl;
    cout << "2. Breadth-first search algorithms" << endl;
    cout << "3. Print queue management" << endl;
    cout << "4. Network packet handling" << endl;
    cout << "5. Web server request handling" << endl;
    cout << "6. Cache replacement policies" << endl;
    cout << "7. Simulation of real-world queues" << endl;
    
    return 0;
}`}
      explanation="Queues are essential for BFS algorithms and task scheduling. They ensure fair ordering where the first request gets served first, making them ideal for resource management and graph traversal."
      output={`=== Queue Applications ===

1. Breadth-First Search:
BFS traversal: 1 2 3 4 5 

=== Task Scheduling Simulation ===
Processing tasks in FIFO order:
Time 0: Started task 1 (Send email)
Time 2: Finished task 1
Time 2: Started task 2 (Process payment)
Time 7: Finished task 2
Time 7: Started task 3 (Update database)
Time 10: Finished task 3
Time 10: Started task 4 (Generate report)
Time 17: Finished task 4

=== Common Queue Applications ===
1. CPU task scheduling
2. Breadth-first search algorithms
3. Print queue management
4. Network packet handling
5. Web server request handling
6. Cache replacement policies
7. Simulation of real-world queues`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Choose Right Queue Type</h4>
        <p>Use standard queues for FIFO, priority queues for ordered processing, and deques for double-ended access.</p>
      </div>
      
      <div class="practice">
        <h4>2. Handle Empty Queue Checks</h4>
        <p>Always check if queue is empty before accessing front/back elements to avoid runtime errors.</p>
      </div>
      
      <div class="practice">
        <h4>3. Consider Memory Usage</h4>
        <p>For large queues, monitor memory usage and consider circular buffers for fixed-size scenarios.</p>
      </div>
      
      <div class="practice">
        <h4>4. Use STL Containers</h4>
        <p>Prefer std::queue, std::priority_queue, and std::deque unless you need specific custom behavior.</p>
      </div>
    </div>
  </section>

  <div class="navigation">
    <a href="/3-data-structures/stacks" class="nav-button prev">← Stacks</a>
    <a href="/3-data-structures/trees" class="nav-button next">Trees →</a>
  </div>
</Layout> 