---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Trees - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/data-structures">Data Structures</a> &gt; Trees
  </div>

  <h1>Trees</h1>
  
  <div class="overview">
    <p>
      Trees are hierarchical data structures consisting of nodes connected by edges. Each tree has a root node 
      at the top, and every node (except the root) has exactly one parent. Trees are fundamental in computer 
      science for organizing data, implementing file systems, parsing expressions, and many algorithms.
    </p>
    
    <p>
      Unlike linear data structures, trees provide efficient searching, insertion, and deletion operations 
      while maintaining hierarchical relationships between elements.
    </p>
  </div>

  <section class="content-section">
    <h2>Binary Tree Basics</h2>

    <CodeExample 
      client:load
      title="Binary Tree Implementation and Traversals"
      code={`#include <iostream>
#include <queue>
using namespace std;

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
    
    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}
};

class BinaryTree {
public:
    TreeNode* root;
    
    BinaryTree() : root(nullptr) {}
    
    // Inorder traversal (Left, Root, Right)
    void inorderTraversal(TreeNode* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            cout << node->data << " ";
            inorderTraversal(node->right);
        }
    }
    
    // Preorder traversal (Root, Left, Right)
    void preorderTraversal(TreeNode* node) {
        if (node != nullptr) {
            cout << node->data << " ";
            preorderTraversal(node->left);
            preorderTraversal(node->right);
        }
    }
    
    // Postorder traversal (Left, Right, Root)
    void postorderTraversal(TreeNode* node) {
        if (node != nullptr) {
            postorderTraversal(node->left);
            postorderTraversal(node->right);
            cout << node->data << " ";
        }
    }
    
    // Level order traversal (BFS)
    void levelOrderTraversal() {
        if (root == nullptr) return;
        
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            TreeNode* current = q.front();
            q.pop();
            cout << current->data << " ";
            
            if (current->left) q.push(current->left);
            if (current->right) q.push(current->right);
        }
    }
    
    // Calculate height of tree
    int height(TreeNode* node) {
        if (node == nullptr) return -1;
        return 1 + max(height(node->left), height(node->right));
    }
    
    // Count total nodes
    int countNodes(TreeNode* node) {
        if (node == nullptr) return 0;
        return 1 + countNodes(node->left) + countNodes(node->right);
    }
};

int main() {
    cout << "=== Binary Tree Implementation ===" << endl;
    
    // Create a sample binary tree
    //        1
    //       / \\
    //      2   3
    //     / \\
    //    4   5
    
    BinaryTree tree;
    tree.root = new TreeNode(1);
    tree.root->left = new TreeNode(2);
    tree.root->right = new TreeNode(3);
    tree.root->left->left = new TreeNode(4);
    tree.root->left->right = new TreeNode(5);
    
    cout << "\\nTree structure:" << endl;
    cout << "        1" << endl;
    cout << "       / \\\\" << endl;
    cout << "      2   3" << endl;
    cout << "     / \\\\" << endl;
    cout << "    4   5" << endl;
    
    cout << "\\nTraversals:" << endl;
    cout << "Inorder (LNR):   ";
    tree.inorderTraversal(tree.root);
    cout << endl;
    
    cout << "Preorder (NLR):  ";
    tree.preorderTraversal(tree.root);
    cout << endl;
    
    cout << "Postorder (LRN): ";
    tree.postorderTraversal(tree.root);
    cout << endl;
    
    cout << "Level order:     ";
    tree.levelOrderTraversal();
    cout << endl;
    
    cout << "\\nTree properties:" << endl;
    cout << "Height: " << tree.height(tree.root) << endl;
    cout << "Total nodes: " << tree.countNodes(tree.root) << endl;
    
    return 0;
}`}
      explanation="Binary trees have at most two children per node. Different traversal methods visit nodes in different orders: inorder (left-root-right), preorder (root-left-right), postorder (left-right-root), and level-order (breadth-first)."
      output={`=== Binary Tree Implementation ===

Tree structure:
        1
       / \\
      2   3
     / \\
    4   5

Traversals:
Inorder (LNR):   4 2 5 1 3 
Preorder (NLR):  1 2 4 5 3 
Postorder (LRN): 4 5 2 3 1 
Level order:     1 2 3 4 5 

Tree properties:
Height: 2
Total nodes: 5`}
    />
  </section>

  <section class="content-section">
    <h2>Binary Search Tree</h2>

    <CodeExample 
      client:load
      title="BST Implementation with Search, Insert, and Delete"
      code={`#include <iostream>
using namespace std;

class BST {
private:
    struct Node {
        int data;
        Node* left;
        Node* right;
        
        Node(int val) : data(val), left(nullptr), right(nullptr) {}
    };
    
    Node* root;
    
    Node* insertHelper(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }
        
        if (value < node->data) {
            node->left = insertHelper(node->left, value);
        } else if (value > node->data) {
            node->right = insertHelper(node->right, value);
        }
        // Ignore duplicates
        
        return node;
    }
    
    Node* searchHelper(Node* node, int value) {
        if (node == nullptr || node->data == value) {
            return node;
        }
        
        if (value < node->data) {
            return searchHelper(node->left, value);
        } else {
            return searchHelper(node->right, value);
        }
    }
    
    Node* findMin(Node* node) {
        while (node && node->left) {
            node = node->left;
        }
        return node;
    }
    
    Node* deleteHelper(Node* node, int value) {
        if (node == nullptr) return node;
        
        if (value < node->data) {
            node->left = deleteHelper(node->left, value);
        } else if (value > node->data) {
            node->right = deleteHelper(node->right, value);
        } else {
            // Node to delete found
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }
            
            // Node with two children
            Node* temp = findMin(node->right);
            node->data = temp->data;
            node->right = deleteHelper(node->right, temp->data);
        }
        return node;
    }
    
    void inorderHelper(Node* node) {
        if (node) {
            inorderHelper(node->left);
            cout << node->data << " ";
            inorderHelper(node->right);
        }
    }

public:
    BST() : root(nullptr) {}
    
    void insert(int value) {
        root = insertHelper(root, value);
    }
    
    bool search(int value) {
        return searchHelper(root, value) != nullptr;
    }
    
    void deleteValue(int value) {
        root = deleteHelper(root, value);
    }
    
    void inorder() {
        inorderHelper(root);
        cout << endl;
    }
    
    bool isEmpty() {
        return root == nullptr;
    }
};

int main() {
    cout << "=== Binary Search Tree ===" << endl;
    
    BST bst;
    
    // Insert elements
    vector<int> values = {50, 30, 70, 20, 40, 60, 80};
    cout << "\\nInserting: ";
    for (int val : values) {
        cout << val << " ";
        bst.insert(val);
    }
    cout << endl;
    
    cout << "\\nBST structure:" << endl;
    cout << "       50" << endl;
    cout << "      /  \\\\" << endl;
    cout << "    30    70" << endl;
    cout << "   / \\\\   / \\\\" << endl;
    cout << "  20  40 60  80" << endl;
    
    cout << "\\nInorder traversal (sorted): ";
    bst.inorder();
    
    // Test search
    cout << "\\nSearch operations:" << endl;
    vector<int> searchValues = {40, 25, 70, 90};
    for (int val : searchValues) {
        cout << "Search " << val << ": " << (bst.search(val) ? "Found" : "Not found") << endl;
    }
    
    // Test deletion
    cout << "\\nDeletion operations:" << endl;
    
    cout << "Deleting 20 (leaf node):" << endl;
    bst.deleteValue(20);
    cout << "After deletion: ";
    bst.inorder();
    
    cout << "Deleting 30 (node with two children):" << endl;
    bst.deleteValue(30);
    cout << "After deletion: ";
    bst.inorder();
    
    cout << "Deleting 50 (root node):" << endl;
    bst.deleteValue(50);
    cout << "After deletion: ";
    bst.inorder();
    
    cout << "\\n=== BST Properties ===" << endl;
    cout << "1. Left subtree values < node value" << endl;
    cout << "2. Right subtree values > node value" << endl;
    cout << "3. Inorder traversal gives sorted sequence" << endl;
    cout << "4. Average case: O(log n) search, insert, delete" << endl;
    cout << "5. Worst case: O(n) when tree becomes skewed" << endl;
    
    return 0;
}`}
      explanation="Binary Search Trees maintain the BST property: left subtree values are less than node value, right subtree values are greater. This enables efficient O(log n) average-case operations."
      output={`=== Binary Search Tree ===

Inserting: 50 30 70 20 40 60 80 

BST structure:
       50
      /  \\
    30    70
   / \\   / \\
  20  40 60  80

Inorder traversal (sorted): 20 30 40 50 60 70 80 

Search operations:
Search 40: Found
Search 25: Not found
Search 70: Found
Search 90: Not found

Deletion operations:
Deleting 20 (leaf node):
After deletion: 30 40 50 60 70 80 
Deleting 30 (node with two children):
After deletion: 40 50 60 70 80 
Deleting 50 (root node):
After deletion: 40 60 70 80 

=== BST Properties ===
1. Left subtree values < node value
2. Right subtree values > node value
3. Inorder traversal gives sorted sequence
4. Average case: O(log n) search, insert, delete
5. Worst case: O(n) when tree becomes skewed`}
    />
  </section>

  <section class="content-section">
    <h2>Tree Applications</h2>

    <CodeExample 
      client:load
      title="Expression Trees and Tree Algorithms"
      code={`#include <iostream>
#include <stack>
#include <string>
using namespace std;

struct ExprNode {
    string data;
    ExprNode* left;
    ExprNode* right;
    
    ExprNode(string val) : data(val), left(nullptr), right(nullptr) {}
};

class ExpressionTree {
public:
    static bool isOperator(const string& str) {
        return str == "+" || str == "-" || str == "*" || str == "/";
    }
    
    static ExprNode* buildFromPostfix(const string& postfix) {
        stack<ExprNode*> st;
        
        for (char ch : postfix) {
            if (ch == ' ') continue;
            
            string token(1, ch);
            ExprNode* node = new ExprNode(token);
            
            if (isOperator(token)) {
                node->right = st.top(); st.pop();
                node->left = st.top(); st.pop();
            }
            
            st.push(node);
        }
        
        return st.top();
    }
    
    static void inorder(ExprNode* node) {
        if (node) {
            if (isOperator(node->data)) cout << "(";
            inorder(node->left);
            cout << node->data;
            inorder(node->right);
            if (isOperator(node->data)) cout << ")";
        }
    }
    
    static int evaluate(ExprNode* node) {
        if (!node) return 0;
        
        if (!isOperator(node->data)) {
            return stoi(node->data);
        }
        
        int left = evaluate(node->left);
        int right = evaluate(node->right);
        
        switch (node->data[0]) {
            case '+': return left + right;
            case '-': return left - right;
            case '*': return left * right;
            case '/': return left / right;
            default: return 0;
        }
    }
};

// Tree path algorithms
class TreePaths {
public:
    static bool hasPathSum(TreeNode* root, int targetSum) {
        if (!root) return false;
        
        if (!root->left && !root->right) {
            return root->data == targetSum;
        }
        
        return hasPathSum(root->left, targetSum - root->data) ||
               hasPathSum(root->right, targetSum - root->data);
    }
    
    static void printAllPaths(TreeNode* root, vector<int>& path) {
        if (!root) return;
        
        path.push_back(root->data);
        
        if (!root->left && !root->right) {
            cout << "Path: ";
            for (size_t i = 0; i < path.size(); i++) {
                cout << path[i];
                if (i < path.size() - 1) cout << " -> ";
            }
            cout << endl;
        } else {
            printAllPaths(root->left, path);
            printAllPaths(root->right, path);
        }
        
        path.pop_back();
    }
};

int main() {
    cout << "=== Tree Applications ===" << endl;
    
    // Expression tree
    cout << "\\n1. Expression Tree:" << endl;
    string postfix = "34+2*";  // (3+4)*2
    cout << "Postfix expression: " << postfix << endl;
    
    ExprNode* exprRoot = ExpressionTree::buildFromPostfix(postfix);
    
    cout << "Infix expression: ";
    ExpressionTree::inorder(exprRoot);
    cout << endl;
    
    cout << "Evaluation result: " << ExpressionTree::evaluate(exprRoot) << endl;
    
    // Path algorithms
    cout << "\\n2. Tree Path Algorithms:" << endl;
    
    // Create sample tree for path testing
    TreeNode* pathRoot = new TreeNode(5);
    pathRoot->left = new TreeNode(4);
    pathRoot->right = new TreeNode(8);
    pathRoot->left->left = new TreeNode(11);
    pathRoot->left->left->left = new TreeNode(7);
    pathRoot->left->left->right = new TreeNode(2);
    pathRoot->right->left = new TreeNode(13);
    pathRoot->right->right = new TreeNode(4);
    pathRoot->right->right->right = new TreeNode(1);
    
    cout << "Tree for path testing:" << endl;
    cout << "         5" << endl;
    cout << "       /   \\\\" << endl;
    cout << "      4     8" << endl;
    cout << "     /     / \\\\" << endl;
    cout << "   11    13   4" << endl;
    cout << "  / \\\\         \\\\" << endl;
    cout << " 7   2         1" << endl;
    
    int targetSum = 22;
    cout << "\\nHas path with sum " << targetSum << ": " 
         << (TreePaths::hasPathSum(pathRoot, targetSum) ? "Yes" : "No") << endl;
    
    cout << "\\nAll root-to-leaf paths:" << endl;
    vector<int> path;
    TreePaths::printAllPaths(pathRoot, path);
    
    cout << "\\n=== Common Tree Applications ===" << endl;
    cout << "1. File system hierarchies" << endl;
    cout << "2. Expression parsing and evaluation" << endl;
    cout << "3. Database indexing (B-trees)" << endl;
    cout << "4. Decision trees in AI/ML" << endl;
    cout << "5. Syntax trees in compilers" << endl;
    cout << "6. Huffman coding trees" << endl;
    cout << "7. Game trees in AI" << endl;
    
    return 0;
}`}
      explanation="Trees have numerous applications including expression evaluation, file systems, and path finding. Expression trees represent mathematical expressions hierarchically, while path algorithms solve problems like finding routes with specific properties."
      output={`=== Tree Applications ===

1. Expression Tree:
Postfix expression: 34+2*
Infix expression: ((3+4)*2)
Evaluation result: 14

2. Tree Path Algorithms:
Tree for path testing:
         5
       /   \\
      4     8
     /     / \\
   11    13   4
  / \\         \\
 7   2         1

Has path with sum 22: Yes

All root-to-leaf paths:
Path: 5 -> 4 -> 11 -> 7
Path: 5 -> 4 -> 11 -> 2
Path: 5 -> 8 -> 13
Path: 5 -> 8 -> 4 -> 1

=== Common Tree Applications ===
1. File system hierarchies
2. Expression parsing and evaluation
3. Database indexing (B-trees)
4. Decision trees in AI/ML
5. Syntax trees in compilers
6. Huffman coding trees
7. Game trees in AI`}
    />
  </section>

  <div class="navigation">
    <a href="/data-structures/queues" class="nav-button prev">← Queues</a>
    <a href="/data-structures/graphs" class="nav-button next">Graphs →</a>
  </div>
</Layout> 