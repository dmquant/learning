---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Difference Arrays & Doubling - Advanced Algorithms">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/5-advanced">Advanced Algorithms</a> &gt; Difference Arrays & Doubling
  </div>

  <h1>Difference Arrays & Doubling</h1>
  
  <div class="overview">
    <p>
      Difference arrays and doubling algorithms are powerful techniques for range operations and tree queries. 
      This section covers 1D/multi-dimensional difference arrays, Sparse Table (ST) for range minimum queries, 
      and binary lifting for Lowest Common Ancestor (LCA) problems.
    </p>
  </div>

  <h2>Difference Arrays</h2>
  
  <p>Difference arrays enable efficient range updates in O(1) time by storing differences between consecutive elements.</p>

  <CodeExample 
    client:load
    title="1D and 2D Difference Arrays"
    code={`#include <iostream>
#include <vector>
using namespace std;

class DifferenceArray1D {
private:
    vector<long long> diff;
    int n;
    
public:
    DifferenceArray1D(vector<int>& arr) : n(arr.size()) {
        diff.resize(n + 1, 0);
        for (int i = 0; i < n; i++) {
            diff[i] += arr[i];
            diff[i + 1] -= arr[i];
        }
    }
    
    // Add value to range [l, r]
    void rangeAdd(int l, int r, int value) {
        diff[l] += value;
        if (r + 1 <= n) {
            diff[r + 1] -= value;
        }
    }
    
    // Get final array after all updates
    vector<long long> getArray() {
        vector<long long> result(n);
        result[0] = diff[0];
        for (int i = 1; i < n; i++) {
            result[i] = result[i - 1] + diff[i];
        }
        return result;
    }
};

class DifferenceArray2D {
private:
    vector<vector<long long>> diff;
    int rows, cols;
    
public:
    DifferenceArray2D(int r, int c) : rows(r), cols(c) {
        diff.assign(r + 1, vector<long long>(c + 1, 0));
    }
    
    // Add value to rectangle [r1,c1] to [r2,c2]
    void rangeAdd(int r1, int c1, int r2, int c2, int value) {
        diff[r1][c1] += value;
        diff[r1][c2 + 1] -= value;
        diff[r2 + 1][c1] -= value;
        diff[r2 + 1][c2 + 1] += value;
    }
    
    // Get final 2D array
    vector<vector<long long>> getArray() {
        vector<vector<long long>> result(rows, vector<long long>(cols));
        
        // Compute prefix sums
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = diff[i][j];
                if (i > 0) result[i][j] += result[i-1][j];
                if (j > 0) result[i][j] += result[i][j-1];
                if (i > 0 && j > 0) result[i][j] -= result[i-1][j-1];
            }
        }
        
        return result;
    }
};

int main() {
    // Test 1D difference array
    cout << "1D Difference Array Test:" << endl;
    vector<int> arr = {1, 2, 3, 4, 5};
    DifferenceArray1D diff1d(arr);
    
    diff1d.rangeAdd(1, 3, 10);  // Add 10 to indices 1-3
    diff1d.rangeAdd(0, 2, 5);   // Add 5 to indices 0-2
    
    vector<long long> result1d = diff1d.getArray();
    cout << "Result: ";
    for (long long x : result1d) cout << x << " ";
    cout << endl;
    
    // Test 2D difference array
    cout << "\\n2D Difference Array Test:" << endl;
    DifferenceArray2D diff2d(3, 3);
    
    diff2d.rangeAdd(0, 0, 1, 1, 5);  // Add 5 to 2x2 rectangle
    diff2d.rangeAdd(1, 1, 2, 2, 3);  // Add 3 to 2x2 rectangle
    
    vector<vector<long long>> result2d = diff2d.getArray();
    cout << "Result:" << endl;
    for (auto& row : result2d) {
        for (long long x : row) cout << x << " ";
        cout << endl;
    }
    
    return 0;
}`}
    explanation="Difference arrays convert range updates to point updates. 1D version uses diff[l] += val, diff[r+1] -= val. 2D version uses inclusion-exclusion principle for rectangle updates."
    output={`1D Difference Array Test:
Result: 6 17 18 14 5 

2D Difference Array Test:
Result:
5 5 0 
5 8 3 
0 3 3`}
  />

  <h2>Sparse Table (ST) for Range Minimum Queries</h2>
  
  <p>Sparse Table uses binary lifting to answer range minimum queries in O(1) time with O(n log n) preprocessing.</p>

  <CodeExample 
    client:load
    title="Sparse Table Implementation"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

class SparseTable {
private:
    vector<vector<int>> st;
    vector<int> logs;
    int n;
    
public:
    SparseTable(vector<int>& arr) : n(arr.size()) {
        int maxLog = log2(n) + 1;
        st.assign(maxLog, vector<int>(n));
        logs.resize(n + 1);
        
        // Precompute logs
        logs[1] = 0;
        for (int i = 2; i <= n; i++) {
            logs[i] = logs[i / 2] + 1;
        }
        
        // Initialize first level
        for (int i = 0; i < n; i++) {
            st[0][i] = arr[i];
        }
        
        // Build sparse table
        for (int k = 1; k < maxLog; k++) {
            for (int i = 0; i + (1 << k) <= n; i++) {
                st[k][i] = min(st[k-1][i], st[k-1][i + (1 << (k-1))]);
            }
        }
    }
    
    // Query minimum in range [l, r]
    int query(int l, int r) {
        int k = logs[r - l + 1];
        return min(st[k][l], st[k][r - (1 << k) + 1]);
    }
};

// Binary Lifting for LCA
class LCA {
private:
    vector<vector<int>> up;
    vector<int> depth;
    int n, LOG;
    
    void dfs(int v, int p, const vector<vector<int>>& adj) {
        up[0][v] = p;
        for (int i = 1; i < LOG; i++) {
            up[i][v] = up[i-1][up[i-1][v]];
        }
        
        for (int u : adj[v]) {
            if (u != p) {
                depth[u] = depth[v] + 1;
                dfs(u, v, adj);
            }
        }
    }
    
public:
    LCA(int vertices, vector<vector<int>>& adj, int root = 0) : n(vertices) {
        LOG = ceil(log2(n)) + 1;
        up.assign(LOG, vector<int>(n));
        depth.assign(n, 0);
        
        dfs(root, root, adj);
    }
    
    int lca(int a, int b) {
        if (depth[a] < depth[b]) swap(a, b);
        
        // Bring a to same level as b
        int diff = depth[a] - depth[b];
        for (int i = 0; i < LOG; i++) {
            if ((diff >> i) & 1) {
                a = up[i][a];
            }
        }
        
        if (a == b) return a;
        
        // Binary lifting to find LCA
        for (int i = LOG - 1; i >= 0; i--) {
            if (up[i][a] != up[i][b]) {
                a = up[i][a];
                b = up[i][b];
            }
        }
        
        return up[0][a];
    }
    
    int distance(int a, int b) {
        return depth[a] + depth[b] - 2 * depth[lca(a, b)];
    }
};

int main() {
    // Test Sparse Table
    cout << "Sparse Table Test:" << endl;
    vector<int> arr = {7, 2, 3, 0, 5, 10, 3, 12, 18};
    SparseTable st(arr);
    
    cout << "Array: ";
    for (int x : arr) cout << x << " ";
    cout << endl;
    
    cout << "RMQ(1, 4) = " << st.query(1, 4) << endl;
    cout << "RMQ(0, 8) = " << st.query(0, 8) << endl;
    cout << "RMQ(3, 6) = " << st.query(3, 6) << endl;
    
    // Test LCA
    cout << "\\nLCA Test:" << endl;
    vector<vector<int>> tree(7);
    tree[0] = {1, 2};
    tree[1] = {0, 3, 4};
    tree[2] = {0, 5, 6};
    tree[3] = {1};
    tree[4] = {1};
    tree[5] = {2};
    tree[6] = {2};
    
    LCA lca(7, tree, 0);
    
    cout << "LCA(3, 4) = " << lca.lca(3, 4) << endl;
    cout << "LCA(3, 5) = " << lca.lca(3, 5) << endl;
    cout << "Distance(3, 5) = " << lca.distance(3, 5) << endl;
    
    return 0;
}`}
    explanation="Sparse Table uses the fact that any range can be covered by two overlapping powers of 2. LCA uses binary lifting to jump up the tree efficiently, preprocessing all 2^k ancestors."
    output={`Sparse Table Test:
Array: 7 2 3 0 5 10 3 12 18 
RMQ(1, 4) = 0
RMQ(0, 8) = 0
RMQ(3, 6) = 0

LCA Test:
LCA(3, 4) = 1
LCA(3, 5) = 0
Distance(3, 5) = 4`}
  />

  <div class="navigation">
    <a href="/5-advanced/graph-algorithms" class="nav-button prev">
      ← Previous: Advanced Graph Algorithms
    </a>
    <a href="/5-advanced/union-find" class="nav-button next">
      Next: Union-Find →
    </a>
  </div>
</Layout>

<style>
  .breadcrumb {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 1rem;
  }

  .breadcrumb a {
    color: #4f46e5;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
  }

  .overview {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .overview p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.7;
    color: #374151;
  }

  h2 {
    font-size: 1.8rem;
    font-weight: 600;
    margin: 3rem 0 1.5rem 0;
    color: #1e293b;
    border-bottom: 2px solid #e2e8f0;
    padding-bottom: 0.5rem;
  }

  p {
    font-size: 1rem;
    line-height: 1.7;
    color: #4b5563;
    margin-bottom: 1.5rem;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid #e2e8f0;
    gap: 1rem;
  }

  .nav-button {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(79, 70, 229, 0.3);
  }

  .nav-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);
  }

  .nav-button.prev {
    margin-right: auto;
  }

  .nav-button.next {
    margin-left: auto;
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }

    .overview {
      padding: 1.5rem;
    }

    h2 {
      font-size: 1.5rem;
    }

    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      width: 100%;
      justify-content: center;
    }
  }
</style> 