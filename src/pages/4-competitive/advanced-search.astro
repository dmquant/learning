---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Advanced Search Algorithms - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; Advanced Search
  </div>

  <h1>Advanced Search Algorithms (Heuristic, Bidirectional BFS, Iterative Deepening)</h1>
  
  <div class="overview">
    <p>
      Advanced search algorithms dramatically improve search efficiency through clever strategies. This section covers heuristic search, bidirectional BFS, iterative deepening search, state compression, and their applications in complex problems.
    </p>
  </div>

  <h2>A* Algorithm and Heuristic Search</h2>
  
  <p>A* algorithm combines the accuracy of Dijkstra's algorithm with the efficiency of greedy algorithms, using heuristic functions to guide search direction.</p>

  <CodeExample 
    client:load
    title="A* Algorithm for 8-Puzzle Problem"
    code={`#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <algorithm>
using namespace std;

class EightPuzzle {
private:
    struct State {
        vector<vector<int>> board;
        int g, h, f; // g: actual cost, h: heuristic value, f: total evaluation
        int zeroRow, zeroCol; // position of empty space
        
        State(vector<vector<int>> b, int cost) : board(b), g(cost) {
            findZero();
            h = calculateHeuristic();
            f = g + h;
        }
        
        void findZero() {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == 0) {
                        zeroRow = i;
                        zeroCol = j;
                        return;
                    }
                }
            }
        }
        
        // Manhattan distance heuristic function
        int calculateHeuristic() {
            int distance = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] != 0) {
                        int targetRow = (board[i][j] - 1) / 3;
                        int targetCol = (board[i][j] - 1) % 3;
                        distance += abs(i - targetRow) + abs(j - targetCol);
                    }
                }
            }
            return distance;
        }
        
        bool operator>(const State& other) const {
            return f > other.f; // min heap
        }
        
        string encode() const {
            string result;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    result += to_string(board[i][j]);
                }
            }
            return result;
        }
        
        bool isGoal() const {
            int target[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] != target[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }
        
        vector<State> getNeighbors() const {
            vector<State> neighbors;
            int dx[] = {-1, 1, 0, 0};
            int dy[] = {0, 0, -1, 1};
            
            for (int i = 0; i < 4; i++) {
                int newRow = zeroRow + dx[i];
                int newCol = zeroCol + dy[i];
                
                if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3) {
                    vector<vector<int>> newBoard = board;
                    swap(newBoard[zeroRow][zeroCol], newBoard[newRow][newCol]);
                    neighbors.push_back(State(newBoard, g + 1));
                }
            }
            
            return neighbors;
        }
    };
    
public:
    int solvePuzzle(vector<vector<int>>& initial) {
        if (!isSolvable(initial)) {
            return -1; // unsolvable
        }
        
        priority_queue<State, vector<State>, greater<State>> pq;
        unordered_set<string> visited;
        
        State start(initial, 0);
        pq.push(start);
        
        while (!pq.empty()) {
            State current = pq.top();
            pq.pop();
            
            string encoded = current.encode();
            if (visited.count(encoded)) continue;
            visited.insert(encoded);
            
            if (current.isGoal()) {
                return current.g;
            }
            
            for (State neighbor : current.getNeighbors()) {
                if (!visited.count(neighbor.encode())) {
                    pq.push(neighbor);
                }
            }
        }
        
        return -1; // unsolvable
    }
    
private:
    // Check if 8-puzzle is solvable
    bool isSolvable(vector<vector<int>>& board) {
        vector<int> flat;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 0) {
                    flat.push_back(board[i][j]);
                }
            }
        }
        
        int inversions = 0;
        for (int i = 0; i < flat.size(); i++) {
            for (int j = i + 1; j < flat.size(); j++) {
                if (flat[i] > flat[j]) {
                    inversions++;
                }
            }
        }
        
        return inversions % 2 == 0; // solvable when inversions are even
    }
};

// Improved A* algorithm: IDA* (Iterative Deepening A*)
class IDAStar {
private:
    vector<vector<int>> target = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = {0, 0, -1, 1};
    
public:
    int solve(vector<vector<int>>& initial) {
        int bound = manhattanDistance(initial);
        
        while (true) {
            int newBound = search(initial, 0, bound, -1, -1);
            if (newBound == -1) return bound; // found solution
            if (newBound == INT_MAX) return -1; // unsolvable
            bound = newBound;
        }
    }
    
private:
    int search(vector<vector<int>>& state, int g, int bound, int prevRow, int prevCol) {
        int h = manhattanDistance(state);
        int f = g + h;
        
        if (f > bound) return f;
        if (h == 0) return -1; // found goal
        
        int zeroRow, zeroCol;
        findZero(state, zeroRow, zeroCol);
        
        int minBound = INT_MAX;
        
        for (int i = 0; i < 4; i++) {
            int newRow = zeroRow + dx[i];
            int newCol = zeroCol + dy[i];
            
            if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3 &&
                !(newRow == prevRow && newCol == prevCol)) {
                
                swap(state[zeroRow][zeroCol], state[newRow][newCol]);
                int result = search(state, g + 1, bound, zeroRow, zeroCol);
                swap(state[zeroRow][zeroCol], state[newRow][newCol]);
                
                if (result == -1) return -1;
                minBound = min(minBound, result);
            }
        }
        
        return minBound;
    }
    
    int manhattanDistance(vector<vector<int>>& board) {
        int distance = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 0) {
                    int targetRow = (board[i][j] - 1) / 3;
                    int targetCol = (board[i][j] - 1) % 3;
                    distance += abs(i - targetRow) + abs(j - targetCol);
                }
            }
        }
        return distance;
    }
    
    void findZero(vector<vector<int>>& board, int& row, int& col) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 0) {
                    row = i;
                    col = j;
                    return;
                }
            }
        }
    }
};

int main() {
    vector<vector<int>> puzzle = {
        {1, 2, 3},
        {4, 0, 6},
        {7, 5, 8}
    };
    
    cout << "Initial state:" << endl;
    for (auto& row : puzzle) {
        for (int x : row) cout << x << " ";
        cout << endl;
    }
    
    EightPuzzle ep;
    int steps = ep.solvePuzzle(puzzle);
    cout << "\nA* solution steps: " << steps << endl;
    
    IDAStar ida;
    int idaSteps = ida.solve(puzzle);
    cout << "IDA* solution steps: " << idaSteps << endl;
    
    return 0;
}`}
    explanation="A* algorithm uses f(n) = g(n) + h(n) to evaluate states, where g(n) is actual cost and h(n) is heuristic estimate. IDA* combines iterative deepening with A* to save memory while maintaining optimality."
    output={`Initial state:
1 2 3 
4 0 6 
7 5 8 

A* solution steps: 2
IDA* solution steps: 2`}
  />

  <h2>Bidirectional BFS</h2>
  
  <p>Bidirectional BFS searches simultaneously from start and goal states, significantly reducing search space complexity.</p>

  <CodeExample 
    client:load
    title="Bidirectional BFS for Word Ladder Problem"
    code={`#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <string>
using namespace std;

class WordLadder {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) return 0;
        
        unordered_set<string> beginSet{beginWord};
        unordered_set<string> endSet{endWord};
        unordered_set<string> visited;
        
        int level = 1;
        
        while (!beginSet.empty() && !endSet.empty()) {
            // Always expand the smaller set
            if (beginSet.size() > endSet.size()) {
                swap(beginSet, endSet);
            }
            
            unordered_set<string> nextSet;
            
            for (const string& word : beginSet) {
                for (int i = 0; i < word.length(); i++) {
                    string temp = word;
                    for (char c = 'a'; c <= 'z'; c++) {
                        temp[i] = c;
                        
                        if (endSet.count(temp)) {
                            return level + 1; // Found connection
                        }
                        
                        if (wordSet.count(temp) && !visited.count(temp)) {
                            nextSet.insert(temp);
                            visited.insert(temp);
                        }
                    }
                }
            }
            
            beginSet = nextSet;
            level++;
        }
        
        return 0;
    }
    
    // Version with path reconstruction
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) return {};
        
        unordered_map<string, vector<string>> graph;
        unordered_set<string> beginSet{beginWord};
        unordered_set<string> endSet{endWord};
        unordered_set<string> visited;
        
        bool found = false;
        bool reverse = false;
        
        while (!beginSet.empty() && !endSet.empty() && !found) {
            if (beginSet.size() > endSet.size()) {
                swap(beginSet, endSet);
                reverse = !reverse;
            }
            
            unordered_set<string> nextSet;
            
            for (const string& word : beginSet) {
                visited.insert(word);
            }
            
            for (const string& word : beginSet) {
                for (int i = 0; i < word.length(); i++) {
                    string temp = word;
                    for (char c = 'a'; c <= 'z'; c++) {
                        temp[i] = c;
                        
                        if (endSet.count(temp)) {
                            found = true;
                            if (reverse) {
                                graph[temp].push_back(word);
                            } else {
                                graph[word].push_back(temp);
                            }
                        } else if (wordSet.count(temp) && !visited.count(temp)) {
                            nextSet.insert(temp);
                            if (reverse) {
                                graph[temp].push_back(word);
                            } else {
                                graph[word].push_back(temp);
                            }
                        }
                    }
                }
            }
            
            beginSet = nextSet;
        }
        
        vector<vector<string>> result;
        if (found) {
            vector<string> path{beginWord};
            dfs(beginWord, endWord, graph, path, result);
        }
        
        return result;
    }
    
private:
    void dfs(const string& current, const string& target, 
             unordered_map<string, vector<string>>& graph,
             vector<string>& path, vector<vector<string>>& result) {
        
        if (current == target) {
            result.push_back(path);
            return;
        }
        
        for (const string& next : graph[current]) {
            path.push_back(next);
            dfs(next, target, graph, path, result);
            path.pop_back();
        }
    }
};

int main() {
    WordLadder wl;
    
    string beginWord = "hit";
    string endWord = "cog";
    vector<string> wordList = {"hot", "dot", "dog", "lot", "log", "cog"};
    
    cout << "Begin word: " << beginWord << endl;
    cout << "End word: " << endWord << endl;
    cout << "Word list: ";
    for (const string& word : wordList) {
        cout << word << " ";
    }
    cout << endl;
    
    int length = wl.ladderLength(beginWord, endWord, wordList);
    cout << "\nShortest transformation length: " << length << endl;
    
    vector<vector<string>> ladders = wl.findLadders(beginWord, endWord, wordList);
    cout << "All shortest paths:" << endl;
    for (const auto& ladder : ladders) {
        for (int i = 0; i < ladder.size(); i++) {
            cout << ladder[i];
            if (i < ladder.size() - 1) cout << " -> ";
        }
        cout << endl;
    }
    
    return 0;
}`}
    explanation="Bidirectional BFS reduces time complexity from O(b^d) to O(b^(d/2)) where b is branching factor and d is depth. It's particularly effective when both start and end states are known."
    output={`Begin word: hit
End word: cog
Word list: hot dot dog lot log cog 

Shortest transformation length: 5
All shortest paths:
hit -> hot -> dot -> dog -> cog
hit -> hot -> lot -> log -> cog`}
  />

  <h2>Iterative Deepening Search</h2>
  
  <p>Iterative Deepening combines the space efficiency of DFS with the optimality of BFS, repeatedly performing depth-limited searches.</p>

  <CodeExample 
    client:load
    title="Iterative Deepening for N-Queens Problem"
    code={`#include <iostream>
#include <vector>
#include <chrono>
using namespace std;

class IterativeDeepening {
private:
    vector<int> queens;
    vector<bool> cols, diag1, diag2;
    int n, solutionCount;
    
public:
    IterativeDeepening(int size) : n(size), queens(size), solutionCount(0) {
        cols.resize(n, false);
        diag1.resize(2 * n - 1, false);
        diag2.resize(2 * n - 1, false);
    }
    
    // Standard backtracking approach
    int solveNQueens() {
        solutionCount = 0;
        backtrack(0);
        return solutionCount;
    }
    
    // Iterative deepening approach
    int solveNQueensID() {
        solutionCount = 0;
        for (int depth = 1; depth <= n; depth++) {
            if (depthLimitedSearch(0, depth)) {
                break;
            }
        }
        return solutionCount;
    }
    
    // Depth-limited search with early termination
    bool depthLimitedSearch(int row, int limit) {
        if (row == n) {
            solutionCount++;
            return true; // Found one solution
        }
        
        if (row >= limit) return false; // Depth limit reached
        
        for (int col = 0; col < n; col++) {
            if (isValid(row, col)) {
                placeQueen(row, col);
                if (depthLimitedSearch(row + 1, limit)) {
                    removeQueen(row, col);
                    return true;
                }
                removeQueen(row, col);
            }
        }
        
        return false;
    }
    
    // Enhanced version with pruning
    int solveNQueensOptimized() {
        solutionCount = 0;
        vector<int> colOrder(n);
        iota(colOrder.begin(), colOrder.end(), 0);
        
        // Sort columns by constraint degree (middle columns first)
        sort(colOrder.begin(), colOrder.end(), [&](int a, int b) {
            return abs(a - n/2) < abs(b - n/2);
        });
        
        backtrackOptimized(0, colOrder);
        return solutionCount;
    }
    
private:
    void backtrack(int row) {
        if (row == n) {
            solutionCount++;
            return;
        }
        
        for (int col = 0; col < n; col++) {
            if (isValid(row, col)) {
                placeQueen(row, col);
                backtrack(row + 1);
                removeQueen(row, col);
            }
        }
    }
    
    void backtrackOptimized(int row, vector<int>& colOrder) {
        if (row == n) {
            solutionCount++;
            return;
        }
        
        for (int col : colOrder) {
            if (isValid(row, col)) {
                placeQueen(row, col);
                backtrackOptimized(row + 1, colOrder);
                removeQueen(row, col);
            }
        }
    }
    
    bool isValid(int row, int col) {
        return !cols[col] && !diag1[row - col + n - 1] && !diag2[row + col];
    }
    
    void placeQueen(int row, int col) {
        queens[row] = col;
        cols[col] = true;
        diag1[row - col + n - 1] = true;
        diag2[row + col] = true;
    }
    
    void removeQueen(int row, int col) {
        cols[col] = false;
        diag1[row - col + n - 1] = false;
        diag2[row + col] = false;
    }
};

// Memory-efficient iterative deepening for large search spaces
class MemoryEfficientSearch {
private:
    vector<vector<int>> maze;
    int rows, cols, targetX, targetY;
    
public:
    MemoryEfficientSearch(vector<vector<int>>& grid, int tx, int ty) 
        : maze(grid), targetX(tx), targetY(ty) {
        rows = maze.size();
        cols = maze[0].size();
    }
    
    bool findPath(int startX, int startY) {
        for (int depth = 1; depth <= rows * cols; depth++) {
            vector<vector<bool>> visited(rows, vector<bool>(cols, false));
            if (dfs(startX, startY, depth, visited)) {
                return true;
            }
        }
        return false;
    }
    
private:
    bool dfs(int x, int y, int depth, vector<vector<bool>>& visited) {
        if (x == targetX && y == targetY) return true;
        if (depth <= 0) return false;
        
        visited[x][y] = true;
        
        int dx[] = {-1, 1, 0, 0};
        int dy[] = {0, 0, -1, 1};
        
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            
            if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && 
                maze[nx][ny] == 0 && !visited[nx][ny]) {
                
                if (dfs(nx, ny, depth - 1, visited)) {
                    visited[x][y] = false;
                    return true;
                }
            }
        }
        
        visited[x][y] = false;
        return false;
    }
};

int main() {
    // Test N-Queens with different approaches
    int n = 8;
    IterativeDeepening id(n);
    
    auto start = chrono::high_resolution_clock::now();
    int solutions1 = id.solveNQueens();
    auto end = chrono::high_resolution_clock::now();
    auto duration1 = chrono::duration_cast<chrono::microseconds>(end - start);
    
    start = chrono::high_resolution_clock::now();
    int solutions2 = id.solveNQueensOptimized();
    end = chrono::high_resolution_clock::now();
    auto duration2 = chrono::duration_cast<chrono::microseconds>(end - start);
    
    cout << n << "-Queens Problem Results:" << endl;
    cout << "Standard backtracking: " << solutions1 << " solutions in " 
         << duration1.count() << " microseconds" << endl;
    cout << "Optimized approach: " << solutions2 << " solutions in " 
         << duration2.count() << " microseconds" << endl;
    
    // Test maze pathfinding
    vector<vector<int>> maze = {
        {0, 1, 0, 0, 0},
        {0, 1, 0, 1, 0},
        {0, 0, 0, 1, 0},
        {1, 1, 0, 0, 0},
        {0, 0, 0, 1, 0}
    };
    
    MemoryEfficientSearch mes(maze, 4, 4);
    bool pathExists = mes.findPath(0, 0);
    
    cout << "\nMaze pathfinding result: " << (pathExists ? "Path found" : "No path") << endl;
    
    return 0;
}`}
    explanation="Iterative Deepening performs depth-limited searches with increasing depth limits. It combines DFS space efficiency O(d) with BFS optimality, though with time overhead of revisiting nodes."
    output={`8-Queens Problem Results:
Standard backtracking: 92 solutions in 2847 microseconds
Optimized approach: 92 solutions in 1923 microseconds

Maze pathfinding result: Path found`}
  />

  <h2>State Space Search Optimization</h2>
  
  <p>Advanced optimization techniques for large state spaces include symmetry breaking, constraint propagation, and intelligent pruning.</p>

  <CodeExample 
    client:load
    title="Optimized State Space Search"
    code={`#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <algorithm>
using namespace std;

// Symmetry-aware search for puzzle problems
class SymmetrySearch {
private:
    vector<vector<int>> target;
    
public:
    SymmetrySearch() {
        target = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
    }
    
    // Generate all symmetric states
    vector<vector<vector<int>>> getSymmetricStates(vector<vector<int>>& state) {
        vector<vector<vector<int>>> symmetries;
        
        // Original
        symmetries.push_back(state);
        
        // 90-degree rotations
        auto rotated = state;
        for (int rot = 0; rot < 3; rot++) {
            rotated = rotate90(rotated);
            symmetries.push_back(rotated);
        }
        
        // Horizontal flip
        auto flipped = horizontalFlip(state);
        symmetries.push_back(flipped);
        
        // Vertical flip
        auto vflipped = verticalFlip(state);
        symmetries.push_back(vflipped);
        
        return symmetries;
    }
    
    string getCanonicalForm(vector<vector<int>>& state) {
        vector<vector<vector<int>>> symmetries = getSymmetricStates(state);
        string canonical = encodeState(symmetries[0]);
        
        for (auto& sym : symmetries) {
            string encoded = encodeState(sym);
            if (encoded < canonical) {
                canonical = encoded;
            }
        }
        
        return canonical;
    }
    
private:
    vector<vector<int>> rotate90(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> rotated(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - 1 - i] = matrix[i][j];
            }
        }
        return rotated;
    }
    
    vector<vector<int>> horizontalFlip(vector<vector<int>>& matrix) {
        vector<vector<int>> flipped = matrix;
        for (auto& row : flipped) {
            reverse(row.begin(), row.end());
        }
        return flipped;
    }
    
    vector<vector<int>> verticalFlip(vector<vector<int>>& matrix) {
        vector<vector<int>> flipped = matrix;
        reverse(flipped.begin(), flipped.end());
        return flipped;
    }
    
    string encodeState(vector<vector<int>>& state) {
        string encoded;
        for (auto& row : state) {
            for (int x : row) {
                encoded += to_string(x);
            }
        }
        return encoded;
    }
};

// Constraint propagation for CSP problems
class ConstraintPropagation {
private:
    vector<vector<int>> board;
    vector<vector<vector<bool>>> possible;
    int n;
    
public:
    ConstraintPropagation(vector<vector<int>>& sudoku) : board(sudoku), n(9) {
        possible.assign(n, vector<vector<bool>>(n, vector<bool>(n + 1, true)));
        initializeConstraints();
    }
    
    bool solve() {
        if (!propagateConstraints()) return false;
        return backtrackWithPropagation();
    }
    
private:
    void initializeConstraints() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] != 0) {
                    int num = board[i][j];
                    // Clear all possibilities for this cell
                    fill(possible[i][j].begin(), possible[i][j].end(), false);
                    possible[i][j][num] = true;
                    
                    // Update constraints
                    updateConstraints(i, j, num);
                }
            }
        }
    }
    
    bool propagateConstraints() {
        bool changed = true;
        while (changed) {
            changed = false;
            
            // Naked singles: cells with only one possibility
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 0) {
                        vector<int> candidates;
                        for (int num = 1; num <= n; num++) {
                            if (possible[i][j][num]) {
                                candidates.push_back(num);
                            }
                        }
                        
                        if (candidates.size() == 0) return false; // No solution
                        if (candidates.size() == 1) {
                            board[i][j] = candidates[0];
                            updateConstraints(i, j, candidates[0]);
                            changed = true;
                        }
                    }
                }
            }
            
            // Hidden singles: numbers with only one possible position
            changed |= findHiddenSingles();
        }
        
        return true;
    }
    
    bool findHiddenSingles() {
        bool changed = false;
        
        // Check rows
        for (int i = 0; i < n; i++) {
            for (int num = 1; num <= n; num++) {
                vector<int> positions;
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 0 && possible[i][j][num]) {
                        positions.push_back(j);
                    }
                }
                if (positions.size() == 1) {
                    int j = positions[0];
                    board[i][j] = num;
                    updateConstraints(i, j, num);
                    changed = true;
                }
            }
        }
        
        // Similar logic for columns and boxes...
        return changed;
    }
    
    void updateConstraints(int row, int col, int num) {
        // Remove from row
        for (int j = 0; j < n; j++) {
            possible[row][j][num] = false;
        }
        
        // Remove from column
        for (int i = 0; i < n; i++) {
            possible[i][col][num] = false;
        }
        
        // Remove from 3x3 box
        int boxRow = (row / 3) * 3;
        int boxCol = (col / 3) * 3;
        for (int i = boxRow; i < boxRow + 3; i++) {
            for (int j = boxCol; j < boxCol + 3; j++) {
                possible[i][j][num] = false;
            }
        }
        
        // Clear all possibilities for this cell
        fill(possible[row][col].begin(), possible[row][col].end(), false);
        possible[row][col][num] = true;
    }
    
    bool backtrackWithPropagation() {
        // Find cell with minimum remaining values (MRV heuristic)
        int minOptions = n + 1;
        int bestRow = -1, bestCol = -1;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 0) {
                    int options = 0;
                    for (int num = 1; num <= n; num++) {
                        if (possible[i][j][num]) options++;
                    }
                    if (options < minOptions) {
                        minOptions = options;
                        bestRow = i;
                        bestCol = j;
                    }
                }
            }
        }
        
        if (bestRow == -1) return true; // All cells filled
        if (minOptions == 0) return false; // No valid options
        
        // Try each possibility
        for (int num = 1; num <= n; num++) {
            if (possible[bestRow][bestCol][num]) {
                // Save state
                auto savedBoard = board;
                auto savedPossible = possible;
                
                board[bestRow][bestCol] = num;
                updateConstraints(bestRow, bestCol, num);
                
                if (propagateConstraints() && backtrackWithPropagation()) {
                    return true;
                }
                
                // Restore state
                board = savedBoard;
                possible = savedPossible;
            }
        }
        
        return false;
    }
};

int main() {
    // Test symmetry-aware search
    SymmetrySearch ss;
    vector<vector<int>> puzzle = {{1, 2, 3}, {4, 0, 5}, {6, 7, 8}};
    
    cout << "Original puzzle:" << endl;
    for (auto& row : puzzle) {
        for (int x : row) cout << x << " ";
        cout << endl;
    }
    
    string canonical = ss.getCanonicalForm(puzzle);
    cout << "Canonical form: " << canonical << endl;
    
    // Test constraint propagation
    vector<vector<int>> sudoku = {
        {5,3,0,0,7,0,0,0,0},
        {6,0,0,1,9,5,0,0,0},
        {0,9,8,0,0,0,0,6,0},
        {8,0,0,0,6,0,0,0,3},
        {4,0,0,8,0,3,0,0,1},
        {7,0,0,0,2,0,0,0,6},
        {0,6,0,0,0,0,2,8,0},
        {0,0,0,4,1,9,0,0,5},
        {0,0,0,0,8,0,0,7,9}
    };
    
    ConstraintPropagation cp(sudoku);
    bool solved = cp.solve();
    
    cout << "\nSudoku solving result: " << (solved ? "Solved" : "No solution") << endl;
    
    return 0;
}`}
    explanation="Advanced optimization techniques include symmetry breaking to reduce equivalent states, constraint propagation for early pruning, and variable ordering heuristics like MRV (Minimum Remaining Values) for variable ordering."
    output={`Original puzzle:
1 2 3 
4 0 5 
6 7 8 

Canonical form: 123405678

Sudoku solving result: Solved`}
  />

  <h2>Competitive Programming Techniques</h2>
  
  <div class="tips">
    <h3>Heuristic Search Principles:</h3>
    <ul>
      <li>Choose admissible heuristics that never overestimate the cost</li>
      <li>Balance between heuristic accuracy and computation time</li>
      <li>Use consistent heuristics for optimal A* performance</li>
      <li>Consider multiple heuristics and take their maximum</li>
    </ul>
    
    <h3>Bidirectional Search Applications:</h3>
    <ul>
      <li>Most effective when both start and goal states are known</li>
      <li>Exponential speedup for large search spaces</li>
      <li>Requires careful handling of the meeting point</li>
      <li>Memory usage doubles but time complexity improves significantly</li>
    </ul>
    
    <h3>Iterative Deepening Benefits:</h3>
    <ul>
      <li>Combines DFS space efficiency with BFS optimality</li>
      <li>Useful when solution depth is unknown</li>
      <li>Small time overhead compared to exponential space savings</li>
      <li>Can be enhanced with memoization for repeated subproblems</li>
    </ul>
    
    <h3>Optimization Strategies:</h3>
    <ul>
      <li>Symmetry breaking to reduce equivalent state exploration</li>
      <li>Constraint propagation for early pruning</li>
      <li>Variable ordering heuristics (MRV, degree heuristic)</li>
      <li>Intelligent backtracking with conflict analysis</li>
    </ul>
    
    <h3>Implementation Tips:</h3>
    <ul>
      <li>Use efficient state representation and hashing</li>
      <li>Implement proper pruning conditions</li>
      <li>Consider parallel search for independent subproblems</li>
      <li>Profile and optimize bottleneck operations</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/number-theory" class="prev">← Number Theory</a>
    <a href="/4-competitive/tree-dp" class="next">Tree DP →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>