---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Binary Search - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; Binary Search
  </div>

  <h1>Binary Search</h1>
  
  <div class="overview">
    <p>
      Binary search is an efficient search algorithm based on the divide-and-conquer approach that halves the search space in each iteration. Beyond classic binary search, techniques like binary answer and ternary search have wide applications in competitive programming. This section will comprehensively cover various forms and applications of binary search.
    </p>
  </div>

  <h2>Classic Binary Search and Its Variants</h2>
  
  <p>Binary search is an algorithm for finding a specific element in a sorted array with O(log n) time complexity. Mastering various boundary handling techniques is key.</p>

  <CodeExample 
    client:load
    title="Various Binary Search Implementations"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class BinarySearch {
public:
    // Basic binary search: check if target exists
    static int basicBinarySearch(vector<int>& arr, int target) {
        int left = 0, right = arr.size() - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1; // Not found
    }
    
    // Find first position >= target (lower_bound)
    static int lowerBound(vector<int>& arr, int target) {
        int left = 0, right = arr.size();
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
    
    // Find first position > target (upper_bound)
    static int upperBound(vector<int>& arr, int target) {
        int left = 0, right = arr.size();
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
    
    // Find first occurrence of target
    static int findFirst(vector<int>& arr, int target) {
        int pos = lowerBound(arr, target);
        if (pos < arr.size() && arr[pos] == target) {
            return pos;
        }
        return -1;
    }
    
    // Find last occurrence of target
    static int findLast(vector<int>& arr, int target) {
        int pos = upperBound(arr, target) - 1;
        if (pos >= 0 && arr[pos] == target) {
            return pos;
        }
        return -1;
    }
    
    // Count occurrences of target
    static int countOccurrences(vector<int>& arr, int target) {
        int first = lowerBound(arr, target);
        int last = upperBound(arr, target);
        
        if (first < arr.size() && arr[first] == target) {
            return last - first;
        }
        return 0;
    }
    
    // Search in rotated sorted array
    static int searchRotated(vector<int>& arr, int target) {
        int left = 0, right = arr.size() - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                return mid;
            }
            
            // Determine which half is sorted
            if (arr[left] <= arr[mid]) {
                // Left half is sorted
                if (arr[left] <= target && target < arr[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                // Right half is sorted
                if (arr[mid] < target && target <= arr[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        
        return -1;
    }
    
    // Find minimum in rotated sorted array
    static int findMin(vector<int>& arr) {
        int left = 0, right = arr.size() - 1;
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] > arr[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return arr[left];
    }
};

int main() {
    // Test basic binary search
    vector<int> arr = {1, 2, 2, 3, 3, 3, 4, 5, 5, 6};
    cout << "Array: ";
    for (int x : arr) cout << x << " ";
    cout << endl;
    
    int target = 3;
    cout << "\\nSearch target: " << target << endl;
    
    cout << "Basic search result: " << BinarySearch::basicBinarySearch(arr, target) << endl;
    cout << "First occurrence: " << BinarySearch::findFirst(arr, target) << endl;
    cout << "Last occurrence: " << BinarySearch::findLast(arr, target) << endl;
    cout << "Occurrence count: " << BinarySearch::countOccurrences(arr, target) << endl;
    
    cout << "\\nlower_bound(3): " << BinarySearch::lowerBound(arr, target) << endl;
    cout << "upper_bound(3): " << BinarySearch::upperBound(arr, target) << endl;
    
    // Test rotated array
    vector<int> rotated = {4, 5, 6, 7, 0, 1, 2};
    cout << "\\nRotated array: ";
    for (int x : rotated) cout << x << " ";
    cout << endl;
    
    cout << "Search 0 in rotated array: " << BinarySearch::searchRotated(rotated, 0) << endl;
    cout << "Minimum in rotated array: " << BinarySearch::findMin(rotated) << endl;
    
    return 0;
}`}
    explanation="The key to binary search is proper boundary handling. lower_bound and upper_bound are standard STL algorithms that solve many search problems. Rotated sorted arrays require determining which half is sorted."
    output={`Array: 1 2 2 3 3 3 4 5 5 6 
Search target: 3

Basic search result: 3
First occurrence: 3
Last occurrence: 5
Occurrence count: 3

lower_bound(3): 3
upper_bound(3): 6

Rotated array: 4 5 6 7 0 1 2 
Search 0 in rotated array: 4
Minimum in rotated array: 0`}
  />

  <h2>Binary Answer Technique</h2>
  
  <p>Binary answer is used when the answer has monotonicity: if x is feasible, then all values less than x are also feasible (or vice versa).</p>

  <CodeExample 
    client:load
    title="Binary Answer Classic Applications"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

class BinaryAnswer {
public:
    // Split array maximum
    static int splitArray(vector<int>& nums, int m) {
        int left = 0, right = 0;
        
        // Determine binary search range
        for (int num : nums) {
            left = max(left, num);      // Minimum possible value: maximum element
            right += num;               // Maximum possible value: sum of all elements
        }
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (canSplit(nums, m, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        
        return left;
    }
    
    // Transportation problem
    static int shipWithinDays(vector<int>& weights, int days) {
        int left = 0, right = 0;
        
        for (int weight : weights) {
            left = max(left, weight);   // Minimum load: heaviest cargo
            right += weight;            // Maximum load: total weight of all cargo
        }
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (canShip(weights, days, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        
        return left;
    }
    
    // Wood cutting problem
    static int cutWood(vector<int>& trees, int m) {
        int left = 0, right = *max_element(trees.begin(), trees.end());
        
        while (left < right) {
            int mid = left + (right - left + 1) / 2; // Round up
            
            if (canCut(trees, m, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        
        return left;
    }
    
    // Minimize maximum: allocation problem
    static int minimizeMax(vector<int>& jobs, int k) {
        int left = 0, right = 0;
        
        for (int job : jobs) {
            left = max(left, job);
            right += job;
        }
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (canAssign(jobs, k, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        
        return left;
    }
    
    // Kth smallest pair distance
    static int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        
        int left = 0;
        int right = nums.back() - nums[0];
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (countPairs(nums, mid) >= k) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        
        return left;
    }
    
private:
    // Check if m subarrays can be split, such that each subarray sum does not exceed maxSum
    static bool canSplit(vector<int>& nums, int m, int maxSum) {
        int subarrays = 1;
        int currentSum = 0;
        
        for (int num : nums) {
            if (currentSum + num > maxSum) {
                subarrays++;
                currentSum = num;
                if (subarrays > m) return false;
            } else {
                currentSum += num;
            }
        }
        
        return true;
    }
    
    // Check if all cargo can be shipped within days with capacity
    static bool canShip(vector<int>& weights, int days, int capacity) {
        int usedDays = 1;
        int currentWeight = 0;
        
        for (int weight : weights) {
            if (currentWeight + weight > capacity) {
                usedDays++;
                currentWeight = weight;
                if (usedDays > days) return false;
            } else {
                currentWeight += weight;
            }
        }
        
        return true;
    }
    
    // Check if at least m meters of wood can be obtained with height
    static bool canCut(vector<int>& trees, int m, int height) {
        long long total = 0;
        for (int tree : trees) {
            if (tree > height) {
                total += tree - height;
            }
        }
        return total >= m;
    }
    
    // Check if all jobs can be completed with k workers, such that maximum work does not exceed limit
    static bool canAssign(vector<int>& jobs, int k, int limit) {
        return backtrack(jobs, k, limit, 0, vector<int>(k, 0));
    }
    
    static bool backtrack(vector<int>& jobs, int k, int limit, int index, vector<int>& workers) {
        if (index == jobs.size()) return true;
        
        for (int i = 0; i < k; i++) {
            if (workers[i] + jobs[index] <= limit) {
                workers[i] += jobs[index];
                if (backtrack(jobs, k, limit, index + 1, workers)) {
                    return true;
                }
                workers[i] -= jobs[index];
            }
            
            // Pruning: If current worker has no work, subsequent workers will also have no work
            if (workers[i] == 0) break;
        }
        
        return false;
    }
    
    // Count pairs with distance not exceeding maxDist
    static int countPairs(vector<int>& nums, int maxDist) {
        int count = 0;
        int left = 0;
        
        for (int right = 1; right < nums.size(); right++) {
            while (nums[right] - nums[left] > maxDist) {
                left++;
            }
            count += right - left;
        }
        
        return count;
    }
};

int main() {
    // Test array split
    cout << "Array split test:" << endl;
    vector<int> nums = {7, 2, 5, 10, 8};
    int m = 2;
    
    cout << "Array: ";
    for (int x : nums) cout << x << " ";
    cout << "\\nSplit into " << m << " subarrays" << endl;
    
    int result = BinaryAnswer::splitArray(nums, m);
    cout << "Minimum sum of maximum subarrays: " << result << endl;
    
    // Test transportation problem
    cout << "\\nTransportation test:" << endl;
    vector<int> weights = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int days = 5;
    
    cout << "Cargo weight: ";
    for (int w : weights) cout << w << " ";
    cout << "\\nTransport days: " << days << endl;
    
    int capacity = BinaryAnswer::shipWithinDays(weights, days);
    cout << "Minimum load capacity: " << capacity << endl;
    
    // Test wood cutting
    cout << "\\nWood cutting test:" << endl;
    vector<int> trees = {20, 15, 10, 17};
    int need = 7;
    
    cout << "Tree height: ";
    for (int h : trees) cout << h << " ";
    cout << "\\nNeed wood: " << need << " meters" << endl;
    
    int height = BinaryAnswer::cutWood(trees, need);
    cout << "Cutting height: " << height << endl;
    
    // Test pair distance
    cout << "\\nPair distance test:" << endl;
    vector<int> nums2 = {1, 3, 1};
    int k = 1;
    
    cout << "Array: ";
    for (int x : nums2) cout << x << " ";
    cout << "\\n" << k << "th smallest distance" << endl;
    
    int distance = BinaryAnswer::smallestDistancePair(nums2, k);
    cout << "Result: " << distance << endl;
    
    return 0;
}`}
    explanation="The core of binary answer is to determine the answer range, then design a judgment function to verify whether a value is feasible. The optimal value is found through binary search."
    output={`Array split test:
Array: 7 2 5 10 8 
Split into 2 subarrays
Minimum sum of maximum subarrays: 18

Transportation test:
Cargo weight: 1 2 3 4 5 6 7 8 9 10 
Transport days: 5
Minimum load capacity: 15

Wood cutting test:
Tree height: 20 15 10 17 
Need wood: 7 meters
Cutting height: 15

Pair distance test:
Array: 1 3 1 
1th smallest distance
Result: 0`}
  />

  <h2>Ternary Search and Real Binary Search</h2>
  
  <p>Ternary search is used to find the extremum point in a unimodal function, and real binary search is used for continuous space search problems.</p>

  <CodeExample 
    client:load
    title="Ternary Search and Real Binary Search"
    code={`#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
using namespace std;

class TernarySearch {
public:
    // Ternary search to find maximum (unimodal function)
    static double findMaximum(function<double(double)> f, double left, double right, double eps = 1e-9) {
        while (right - left > eps) {
            double m1 = left + (right - left) / 3;
            double m2 = right - (right - left) / 3;
            
            if (f(m1) < f(m2)) {
                left = m1;
            } else {
                right = m2;
            }
        }
        
        return (left + right) / 2;
    }
    
    // Ternary search to find minimum
    static double findMinimum(function<double(double)> f, double left, double right, double eps = 1e-9) {
        while (right - left > eps) {
            double m1 = left + (right - left) / 3;
            double m2 = right - (right - left) / 3;
            
            if (f(m1) > f(m2)) {
                left = m1;
            } else {
                right = m2;
            }
        }
        
        return (left + right) / 2;
    }
    
    // Golden section search (more efficient unimodal search)
    static double goldenSectionSearch(function<double(double)> f, double left, double right, double eps = 1e-9) {
        const double phi = (1 + sqrt(5)) / 2;
        const double resphi = 2 - phi;
        
        double x1 = left + resphi * (right - left);
        double x2 = right - resphi * (right - left);
        double f1 = f(x1);
        double f2 = f(x2);
        
        while (abs(right - left) > eps) {
            if (f1 > f2) {
                right = x2;
                x2 = x1;
                f2 = f1;
                x1 = left + resphi * (right - left);
                f1 = f(x1);
            } else {
                left = x1;
                x1 = x2;
                f1 = f2;
                x2 = right - resphi * (right - left);
                f2 = f(x2);
            }
        }
        
        return (left + right) / 2;
    }
};

class RealBinarySearch {
public:
    // Real binary search to find square root
    static double sqrt(double x, double eps = 1e-9) {
        if (x < 0) return -1; // Negative numbers do not have real square roots
        if (x == 0) return 0;
        
        double left = 0, right = max(1.0, x);
        
        while (right - left > eps) {
            double mid = (left + right) / 2;
            
            if (mid * mid < x) {
                left = mid;
            } else {
                right = mid;
            }
        }
        
        return (left + right) / 2;
    }
    
    // Real binary search to find cube root
    static double cbrt(double x, double eps = 1e-9) {
        double left = -1000, right = 1000;
        
        if (x >= 0) {
            left = 0;
            right = max(1.0, x);
        } else {
            left = min(-1.0, x);
            right = 0;
        }
        
        while (right - left > eps) {
            double mid = (left + right) / 2;
            
            if (mid * mid * mid < x) {
                left = mid;
            } else {
                right = mid;
            }
        }
        
        return (left + right) / 2;
    }
    
    // Solve equation f(x) = 0
    static double solveEquation(function<double(double)> f, double left, double right, double eps = 1e-9) {
        // Assume function is monotonic and f(left) * f(right) < 0 in [left, right]
        while (right - left > eps) {
            double mid = (left + right) / 2;
            
            if (f(left) * f(mid) <= 0) {
                right = mid;
            } else {
                left = mid;
            }
        }
        
        return (left + right) / 2;
    }
};

// Binary search application in geometry
class GeometryBinary {
public:
    // Approximate solution to minimum enclosing circle problem
    static pair<double, double> minimumEnclosingCircle(vector<pair<double, double>>& points) {
        // Simplified version: assume circle center is within a certain range
        double minX = points[0].first, maxX = points[0].first;
        double minY = points[0].second, maxY = points[0].second;
        
        for (auto& p : points) {
            minX = min(minX, p.first);
            maxX = max(maxX, p.first);
            minY = min(minY, p.second);
            maxY = max(maxY, p.second);
        }
        
        // Use ternary search to find optimal circle center
        auto getMaxDistance = [&](double cx, double cy) {
            double maxDist = 0;
            for (auto& p : points) {
                double dist = sqrt((p.first - cx) * (p.first - cx) + (p.second - cy) * (p.second - cy));
                maxDist = max(maxDist, dist);
            }
            return maxDist;
        };
        
        // Ternary search on x coordinate
        double bestX = TernarySearch::findMinimum([&](double x) {
            return TernarySearch::findMinimum([&](double y) {
                return getMaxDistance(x, y);
            }, minY, maxY);
        }, minX, maxX);
        
        // Ternary search on y coordinate
        double bestY = TernarySearch::findMinimum([&](double y) {
            return getMaxDistance(bestX, y);
        }, minY, maxY);
        
        return {bestX, bestY};
    }
    
    // Minimum distance to line problem
    static double minDistanceToLine(vector<pair<double, double>>& points, 
                                   pair<double, double> lineStart, 
                                   pair<double, double> lineEnd) {
        auto distanceToLine = [&](pair<double, double> point) {
            double A = lineEnd.second - lineStart.second;
            double B = lineStart.first - lineEnd.first;
            double C = lineEnd.first * lineStart.second - lineStart.first * lineEnd.second;
            
            return abs(A * point.first + B * point.second + C) / sqrt(A * A + B * B);
        };
        
        double minDist = distanceToLine(points[0]);
        for (auto& p : points) {
            minDist = min(minDist, distanceToLine(p));
        }
        
        return minDist;
    }
};

int main() {
    cout << fixed << setprecision(6);
    
    // Test ternary search
    cout << "Ternary search test:" << endl;
    
    // Find function f(x) = -(x-2)^2 + 3 maximum
    auto f1 = [](double x) { return -(x - 2) * (x - 2) + 3; };
    double maxPoint = TernarySearch::findMaximum(f1, 0, 4);
    cout << "Function f(x) = -(x-2)^2 + 3 maximum point in [0,4]: " << maxPoint << endl;
    cout << "Maximum: " << f1(maxPoint) << endl;
    
    // Find function g(x) = (x-1)^2 + 2 minimum
    auto g1 = [](double x) { return (x - 1) * (x - 1) + 2; };
    double minPoint = TernarySearch::findMinimum(g1, -2, 4);
    cout << "Function g(x) = (x-1)^2 + 2 minimum point in [-2,4]: " << minPoint << endl;
    cout << "Minimum: " << g1(minPoint) << endl;
    
    // Test real binary search
    cout << "\\nReal binary search test:" << endl;
    double x = 10;
    cout << "sqrt(" << x << ") = " << RealBinarySearch::sqrt(x) << endl;
    cout << "cbrt(" << x << ") = " << RealBinarySearch::cbrt(x) << endl;
    
    // Solve equation x^3 - 2x - 5 = 0
    auto equation = [](double x) { return x * x * x - 2 * x - 5; };
    double root = RealBinarySearch::solveEquation(equation, 0, 3);
    cout << "Equation x^3 - 2x - 5 = 0 root in [0,3]: " << root << endl;
    cout << "Verify f(" << root << ") = " << equation(root) << endl;
    
    // Test geometry problem
    cout << "\\nGeometry problem test:" << endl;
    vector<pair<double, double>> points = {{0, 0}, {1, 0}, {0, 1}, {1, 1}};
    
    auto [centerX, centerY] = GeometryBinary::minimumEnclosingCircle(points);
    cout << "Minimum enclosing circle center: (" << centerX << ", " << centerY << ")" << endl;
    
    return 0;
}`}
    explanation="Ternary search is used for unimodal function extremum search, dividing the search interval into three parts each time. Real binary search handles continuous space problems, requiring a suitable precision threshold."
    output={`Ternary search test:
Function f(x) = -(x-2)^2 + 3 maximum point in [0,4]: 2.000000
Maximum: 3.000000
Function g(x) = (x-1)^2 + 2 minimum point in [-2,4]: 1.000000
Minimum: 2.000000

Real binary search test:
sqrt(10) = 3.162278
cbrt(10) = 2.154435
Solve equation x^3 - 2x - 5 = 0 root in [0,3]: 2.094552
Verify f(2.094552) = 0.000000

Geometry problem test:
Minimum enclosing circle center: (0.500000, 0.500000)`}
  />

  <h2>Advanced Applications of Binary Search</h2>
  
  <div class="tips">
    <h3>Binary search application scenarios:</h3>
    <ul>
      <li>Sorted array search: classic binary search and its variants</li>
      <li>Rotated array: need to determine which half is sorted</li>
      <li>Repeated elements: use lower_bound and upper_bound to handle</li>
      <li>Range query: count elements in a specific range</li>
    </ul>
    
    <h3>Binary answer design points:</h3>
    <ul>
      <li>Answer range: determine the upper and lower bounds of the answer</li>
      <li>Monotonicity: verify the answer has monotonicity</li>
      <li>Judgment function: design an efficient feasibility check</li>
      <li>Optimization direction: find maximum or minimum</li>
    </ul>
    
    <h3>Ternary search applicability:</h3>
    <ul>
      <li>Unimodal function: function has a unique extremum point</li>
      <li>Continuity: function is continuous in the search interval</li>
      <li>Precision control: set a suitable convergence condition</li>
      <li>Efficiency consideration: significantly better than brute force search</li>
    </ul>
    
    <h3>Implementation techniques:</h3>
    <ul>
      <li>Boundary handling: pay attention to the difference between open and closed intervals</li>
      <li>Overflow protection: use (left+right)/2 instead of (left+right)>>1</li>
      <li>Precision setting: real binary search needs to consider floating point precision</li>
      <li>Loop invariant: ensure the search interval always contains the answer</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/greedy-advanced" class="prev">← Greedy Algorithm Advanced</a>
    <a href="/4-competitive/segment-tree" class="next">Data Structure (Segment Tree, Binary Indexed Tree) →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>