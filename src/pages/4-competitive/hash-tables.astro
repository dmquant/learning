---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Hash Tables - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; Hash Tables
  </div>

  <h1>Hash Tables (String Hashing & Collision Resolution)</h1>
  
  <div class="overview">
    <p>
      Hash tables are essential data structures in competitive programming, enabling O(1) insertion, deletion, and lookup operations. This section focuses on string hashing, collision resolution strategies, and advanced applications in algorithmic contests.
    </p>
  </div>

  <h2>String Hashing Fundamentals</h2>
  
  <p>String hashing maps strings to numerical values, commonly used for fast string comparison, palindrome detection, longest common substring problems, etc.</p>

  <CodeExample 
    client:load
    title="Polynomial Hash Implementation"
    code={`#include <iostream>
#include <string>
#include <vector>
using namespace std;

class StringHash {
private:
    static const int MOD = 1000000007;
    static const int BASE = 31;
    vector<long long> hash;
    vector<long long> power;
    
public:
    StringHash(const string& s) {
        int n = s.length();
        hash.resize(n + 1);
        power.resize(n + 1);
        
        hash[0] = 0;
        power[0] = 1;
        
        for (int i = 0; i < n; i++) {
            hash[i + 1] = (hash[i] * BASE + (s[i] - 'a' + 1)) % MOD;
            power[i + 1] = (power[i] * BASE) % MOD;
        }
    }
    
    // Get hash value of substring s[l...r]
    long long getHash(int l, int r) {
        long long result = (hash[r + 1] - hash[l] * power[r - l + 1]) % MOD;
        return (result + MOD) % MOD;
    }
};

// Check if two substrings are equal
bool areEqual(StringHash& sh1, int l1, int r1, 
              StringHash& sh2, int l2, int r2) {
    if (r1 - l1 != r2 - l2) return false;
    return sh1.getHash(l1, r1) == sh2.getHash(l2, r2);
}

int main() {
    string s1 = "abcdefg";
    string s2 = "xyzabcpqr";
    
    StringHash sh1(s1);
    StringHash sh2(s2);
    
    cout << "String 1: " << s1 << endl;
    cout << "String 2: " << s2 << endl;
    cout << endl;
    
    // Compare substrings s1[0..2] and s2[3..5]
    cout << "s1[0..2] = '" << s1.substr(0, 3) << "'" << endl;
    cout << "s2[3..5] = '" << s2.substr(3, 3) << "'" << endl;
    cout << "Are equal: " << (areEqual(sh1, 0, 2, sh2, 3, 5) ? "Yes" : "No") << endl;
    
    return 0;
}`}
    explanation="Polynomial hashing uses base conversion concept, treating strings as BASE-ary numbers. Preprocessing prefix hashes and powers allows O(1) substring hash queries."
    output={`String 1: abcdefg
String 2: xyzabcpqr

s1[0..2] = 'abc'
s2[3..5] = 'abc'
Are equal: Yes`}
  />

  <h2>Double Hashing to Avoid Collisions</h2>
  
  <p>Using two different hash functions can greatly reduce hash collision probability, improving algorithm reliability.</p>

  <CodeExample 
    client:load
    title="Double Hash String Matching"
    code={`#include <iostream>
#include <string>
#include <vector>
using namespace std;

class DoubleHash {
private:
    static const int MOD1 = 1000000007;
    static const int MOD2 = 1000000009;
    static const int BASE1 = 31;
    static const int BASE2 = 37;
    
    vector<long long> hash1, hash2;
    vector<long long> power1, power2;
    
public:
    DoubleHash(const string& s) {
        int n = s.length();
        hash1.resize(n + 1);
        hash2.resize(n + 1);
        power1.resize(n + 1);
        power2.resize(n + 1);
        
        hash1[0] = hash2[0] = 0;
        power1[0] = power2[0] = 1;
        
        for (int i = 0; i < n; i++) {
            int c = s[i] - 'a' + 1;
            hash1[i + 1] = (hash1[i] * BASE1 + c) % MOD1;
            hash2[i + 1] = (hash2[i] * BASE2 + c) % MOD2;
            power1[i + 1] = (power1[i] * BASE1) % MOD1;
            power2[i + 1] = (power2[i] * BASE2) % MOD2;
        }
    }
    
    pair<long long, long long> getHash(int l, int r) {
        long long h1 = (hash1[r + 1] - hash1[l] * power1[r - l + 1]) % MOD1;
        long long h2 = (hash2[r + 1] - hash2[l] * power2[r - l + 1]) % MOD2;
        h1 = (h1 + MOD1) % MOD1;
        h2 = (h2 + MOD2) % MOD2;
        return {h1, h2};
    }
};

// Find all occurrences of pattern in text
vector<int> findAllOccurrences(const string& text, const string& pattern) {
    vector<int> result;
    if (pattern.length() > text.length()) return result;
    
    DoubleHash textHash(text);
    DoubleHash patternHash(pattern);
    
    auto patHash = patternHash.getHash(0, pattern.length() - 1);
    
    for (int i = 0; i <= text.length() - pattern.length(); i++) {
        auto subHash = textHash.getHash(i, i + pattern.length() - 1);
        if (subHash == patHash) {
            result.push_back(i);
        }
    }
    
    return result;
}

int main() {
    string text = "ababcababa";
    string pattern = "aba";
    
    vector<int> positions = findAllOccurrences(text, pattern);
    
    cout << "Text: " << text << endl;
    cout << "Pattern: " << pattern << endl;
    cout << "Occurrence positions: ";
    for (int pos : positions) {
        cout << pos << " ";
    }
    cout << endl;
    
    return 0;
}`}
    explanation="Double hashing uses two different moduli and bases. The probability of both hash values being equal for different strings is extremely small, effectively avoiding hash collisions."
    output={`Text: ababcababa
Pattern: aba
Occurrence positions: 0 2 4 6`}
  />

  <h2>Hash Collision Resolution: Chaining</h2>
  
  <p>When multiple keys map to the same hash value, chaining can be used to store multiple elements at the same position.</p>

  <CodeExample 
    client:load
    title="Custom Hash Table Implementation"
    code={`#include <iostream>
#include <vector>
#include <list>
#include <string>
using namespace std;

template<typename K, typename V>
class HashTable {
private:
    struct KeyValue {
        K key;
        V value;
        KeyValue(const K& k, const V& v) : key(k), value(v) {}
    };
    
    vector<list<KeyValue>> table;
    int capacity;
    int size;
    
    int hash(const K& key) {
        return std::hash<K>{}(key) % capacity;
    }
    
public:
    HashTable(int cap = 16) : capacity(cap), size(0) {
        table.resize(capacity);
    }
    
    void insert(const K& key, const V& value) {
        int index = hash(key);
        
        // Check if key already exists
        for (auto& kv : table[index]) {
            if (kv.key == key) {
                kv.value = value; // Update existing value
                return;
            }
        }
        
        // Insert new key-value pair
        table[index].emplace_back(key, value);
        size++;
        
        // Rehash if load factor is too high
        if (size > capacity * 0.75) {
            rehash();
        }
    }
    
    bool find(const K& key, V& value) {
        int index = hash(key);
        
        for (const auto& kv : table[index]) {
            if (kv.key == key) {
                value = kv.value;
                return true;
            }
        }
        
        return false;
    }
    
    bool remove(const K& key) {
        int index = hash(key);
        
        auto& chain = table[index];
        for (auto it = chain.begin(); it != chain.end(); ++it) {
            if (it->key == key) {
                chain.erase(it);
                size--;
                return true;
            }
        }
        
        return false;
    }
    
    void printStats() {
        cout << "Hash Table Statistics:" << endl;
        cout << "Capacity: " << capacity << endl;
        cout << "Size: " << size << endl;
        cout << "Load Factor: " << (double)size / capacity << endl;
        
        int maxChainLength = 0;
        int emptyBuckets = 0;
        
        for (const auto& chain : table) {
            if (chain.empty()) {
                emptyBuckets++;
            } else {
                maxChainLength = max(maxChainLength, (int)chain.size());
            }
        }
        
        cout << "Empty Buckets: " << emptyBuckets << endl;
        cout << "Max Chain Length: " << maxChainLength << endl;
    }
    
private:
    void rehash() {
        vector<list<KeyValue>> oldTable = move(table);
        int oldCapacity = capacity;
        
        capacity *= 2;
        size = 0;
        table.clear();
        table.resize(capacity);
        
        // Reinsert all elements
        for (const auto& chain : oldTable) {
            for (const auto& kv : chain) {
                insert(kv.key, kv.value);
            }
        }
        
        cout << "Rehashed from " << oldCapacity << " to " << capacity << endl;
    }
};

// Robin Hood Hashing for better performance
class RobinHoodHash {
private:
    struct Entry {
        string key;
        int value;
        int distance; // Distance from ideal position
        bool occupied;
        
        Entry() : distance(0), occupied(false) {}
        Entry(const string& k, int v, int d) : key(k), value(v), distance(d), occupied(true) {}
    };
    
    vector<Entry> table;
    int capacity;
    int size;
    
    int hash(const string& key) {
        return std::hash<string>{}(key) % capacity;
    }
    
public:
    RobinHoodHash(int cap = 16) : capacity(cap), size(0) {
        table.resize(capacity);
    }
    
    void insert(const string& key, int value) {
        if (size >= capacity * 0.75) {
            rehash();
        }
        
        int pos = hash(key);
        int distance = 0;
        Entry newEntry(key, value, distance);
        
        while (true) {
            if (!table[pos].occupied) {
                table[pos] = newEntry;
                size++;
                return;
            }
            
            if (table[pos].key == key) {
                table[pos].value = value; // Update existing
                return;
            }
            
            // Robin Hood: if current entry is richer, swap
            if (distance > table[pos].distance) {
                swap(newEntry, table[pos]);
            }
            
            pos = (pos + 1) % capacity;
            distance++;
            newEntry.distance = distance;
        }
    }
    
    bool find(const string& key, int& value) {
        int pos = hash(key);
        int distance = 0;
        
        while (table[pos].occupied && distance <= table[pos].distance) {
            if (table[pos].key == key) {
                value = table[pos].value;
                return true;
            }
            
            pos = (pos + 1) % capacity;
            distance++;
        }
        
        return false;
    }
    
    void printStats() {
        cout << "Robin Hood Hash Statistics:" << endl;
        cout << "Capacity: " << capacity << endl;
        cout << "Size: " << size << endl;
        
        int maxDistance = 0;
        for (const auto& entry : table) {
            if (entry.occupied) {
                maxDistance = max(maxDistance, entry.distance);
            }
        }
        
        cout << "Max Distance: " << maxDistance << endl;
    }
    
private:
    void rehash() {
        vector<Entry> oldTable = move(table);
        int oldCapacity = capacity;
        
        capacity *= 2;
        size = 0;
        table.clear();
        table.resize(capacity);
        
        for (const auto& entry : oldTable) {
            if (entry.occupied) {
                insert(entry.key, entry.value);
            }
        }
        
        cout << "Robin Hood rehashed from " << oldCapacity << " to " << capacity << endl;
    }
};

int main() {
    // Test chaining hash table
    cout << "Testing Chaining Hash Table:" << endl;
    HashTable<string, int> ht;
    
    vector<string> keys = {"apple", "banana", "cherry", "date", "elderberry", "fig", "grape"};
    
    for (int i = 0; i < keys.size(); i++) {
        ht.insert(keys[i], i + 1);
    }
    
    ht.printStats();
    cout << endl;
    
    // Test lookups
    int value;
    if (ht.find("cherry", value)) {
        cout << "Found cherry: " << value << endl;
    }
    
    // Test Robin Hood hashing
    cout << "\\nTesting Robin Hood Hashing:" << endl;
    RobinHoodHash rh;
    
    for (int i = 0; i < keys.size(); i++) {
        rh.insert(keys[i], i + 1);
    }
    
    rh.printStats();
    
    if (rh.find("banana", value)) {
        cout << "Found banana: " << value << endl;
    }
    
    return 0;
}`}
    explanation="Chaining handles collisions by maintaining linked lists at each bucket. Robin Hood hashing minimizes variance in probe distances by swapping entries when a 'poorer' entry (higher distance) is found."
    output={`Testing Chaining Hash Table:
Hash Table Statistics:
Capacity: 16
Size: 7
Load Factor: 0.4375
Empty Buckets: 11
Max Chain Length: 2

Found cherry: 3

Testing Robin Hood Hashing:
Robin Hood Hash Statistics:
Capacity: 16
Size: 7
Max Distance: 2

Found banana: 2`}
  />

  <h2>Advanced Hash Table Applications</h2>
  
  <p>Hash tables are crucial in many competitive programming scenarios, including frequency counting, duplicate detection, and substring problems.</p>

  <CodeExample 
    client:load
    title="Advanced Hashing Applications"
    code={`#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <string>
#include <algorithm>
using namespace std;

// Rolling Hash for efficient substring operations
class RollingHash {
private:
    static const int BASE = 31;
    static const int MOD = 1000000007;
    
public:
    // Find longest repeated substring
    string longestRepeatedSubstring(string s) {
        int n = s.length();
        int left = 1, right = n;
        string result = "";
        
        while (left <= right) {
            int mid = (left + right) / 2;
            string candidate = findRepeatedSubstring(s, mid);
            
            if (!candidate.empty()) {
                result = candidate;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }
    
    // Check if all substrings of given length are unique
    bool allSubstringsUnique(string s, int length) {
        if (length > s.length()) return true;
        
        unordered_set<long long> seen;
        long long hash = 0;
        long long power = 1;
        
        // Calculate hash of first substring
        for (int i = 0; i < length; i++) {
            hash = (hash * BASE + (s[i] - 'a' + 1)) % MOD;
            if (i < length - 1) {
                power = (power * BASE) % MOD;
            }
        }
        
        seen.insert(hash);
        
        // Rolling hash for remaining substrings
        for (int i = length; i < s.length(); i++) {
            hash = (hash - (s[i - length] - 'a' + 1) * power) % MOD;
            hash = (hash * BASE + (s[i] - 'a' + 1)) % MOD;
            hash = (hash + MOD) % MOD;
            
            if (seen.count(hash)) {
                return false;
            }
            seen.insert(hash);
        }
        
        return true;
    }
    
private:
    string findRepeatedSubstring(string s, int length) {
        unordered_map<long long, vector<int>> hashToIndices;
        long long hash = 0;
        long long power = 1;
        
        for (int i = 0; i < length; i++) {
            hash = (hash * BASE + (s[i] - 'a' + 1)) % MOD;
            if (i < length - 1) {
                power = (power * BASE) % MOD;
            }
        }
        
        hashToIndices[hash].push_back(0);
        
        for (int i = length; i < s.length(); i++) {
            hash = (hash - (s[i - length] - 'a' + 1) * power) % MOD;
            hash = (hash * BASE + (s[i] - 'a' + 1)) % MOD;
            hash = (hash + MOD) % MOD;
            
            int startIdx = i - length + 1;
            hashToIndices[hash].push_back(startIdx);
            
            if (hashToIndices[hash].size() > 1) {
                // Verify actual string match (handle hash collisions)
                string current = s.substr(startIdx, length);
                for (int prevIdx : hashToIndices[hash]) {
                    if (prevIdx != startIdx) {
                        string prev = s.substr(prevIdx, length);
                        if (current == prev) {
                            return current;
                        }
                    }
                }
            }
        }
        
        return "";
    }
};

// Frequency-based problems using hash tables
class FrequencyProblems {
public:
    // Find all anagrams in a string array
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> groups;
        
        for (const string& str : strs) {
            string key = str;
            sort(key.begin(), key.end());
            groups[key].push_back(str);
        }
        
        vector<vector<string>> result;
        for (auto& pair : groups) {
            result.push_back(pair.second);
        }
        
        return result;
    }
    
    // Find top K frequent elements
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        
        // Use bucket sort for O(n) solution
        vector<vector<int>> buckets(nums.size() + 1);
        for (auto& pair : freq) {
            buckets[pair.second].push_back(pair.first);
        }
        
        vector<int> result;
        for (int i = buckets.size() - 1; i >= 0 && result.size() < k; i--) {
            for (int num : buckets[i]) {
                result.push_back(num);
                if (result.size() == k) break;
            }
        }
        
        return result;
    }
    
    // Longest substring without repeating characters
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> lastSeen;
        int maxLength = 0;
        int start = 0;
        
        for (int end = 0; end < s.length(); end++) {
            if (lastSeen.count(s[end]) && lastSeen[s[end]] >= start) {
                start = lastSeen[s[end]] + 1;
            }
            
            lastSeen[s[end]] = end;
            maxLength = max(maxLength, end - start + 1);
        }
        
        return maxLength;
    }
    
    // Count distinct elements in all windows of size k
    vector<int> countDistinctInWindows(vector<int>& arr, int k) {
        vector<int> result;
        unordered_map<int, int> freq;
        
        // Initialize first window
        for (int i = 0; i < k; i++) {
            freq[arr[i]]++;
        }
        result.push_back(freq.size());
        
        // Slide window
        for (int i = k; i < arr.size(); i++) {
            // Remove leftmost element
            int leftElement = arr[i - k];
            freq[leftElement]--;
            if (freq[leftElement] == 0) {
                freq.erase(leftElement);
            }
            
            // Add rightmost element
            freq[arr[i]]++;
            result.push_back(freq.size());
        }
        
        return result;
    }
};

int main() {
    // Test rolling hash
    cout << "Testing Rolling Hash:" << endl;
    RollingHash rh;
    
    string text = "abcabcabc";
    cout << "Text: " << text << endl;
    cout << "Longest repeated substring: '" << rh.longestRepeatedSubstring(text) << "'" << endl;
    cout << "All substrings of length 3 unique: " << (rh.allSubstringsUnique(text, 3) ? "Yes" : "No") << endl;
    cout << "All substrings of length 4 unique: " << (rh.allSubstringsUnique(text, 4) ? "Yes" : "No") << endl;
    
    // Test frequency problems
    cout << "\\nTesting Frequency Problems:" << endl;
    FrequencyProblems fp;
    
    vector<string> words = {"eat", "tea", "tan", "ate", "nat", "bat"};
    cout << "Anagram groups:" << endl;
    auto anagramGroups = fp.groupAnagrams(words);
    for (const auto& group : anagramGroups) {
        cout << "[";
        for (int i = 0; i < group.size(); i++) {
            cout << group[i];
            if (i < group.size() - 1) cout << ", ";
        }
        cout << "]" << endl;
    }
    
    vector<int> nums = {1, 1, 1, 2, 2, 3};
    int k = 2;
    auto topK = fp.topKFrequent(nums, k);
    cout << "\\nTop " << k << " frequent elements: ";
    for (int num : topK) {
        cout << num << " ";
    }
    cout << endl;
    
    string s = "abcabcbb";
    cout << "Longest substring without repeating chars in '" << s << "': " 
         << fp.lengthOfLongestSubstring(s) << endl;
    
    vector<int> arr = {1, 2, 1, 3, 4, 2, 3};
    int windowSize = 4;
    auto distinctCounts = fp.countDistinctInWindows(arr, windowSize);
    cout << "Distinct counts in windows of size " << windowSize << ": ";
    for (int count : distinctCounts) {
        cout << count << " ";
    }
    cout << endl;
    
    return 0;
}`}
    explanation="Advanced hash table applications include rolling hash for efficient substring operations, frequency counting for statistical problems, and sliding window techniques for dynamic range queries."
    output={`Testing Rolling Hash:
Text: abcabcabc
Longest repeated substring: 'abcabc'
All substrings of length 3 unique: No
All substrings of length 4 unique: Yes

Testing Frequency Problems:
Anagram groups:
[eat, tea, ate]
[tan, nat]
[bat]

Top 2 frequent elements: 1 2 

Longest substring without repeating chars in 'abcabcbb': 3

Distinct counts in windows of size 4: 4 4 3 3`}
  />

  <h2>Competitive Programming Techniques</h2>
  
  <div class="tips">
    <h3>String Hashing Best Practices:</h3>
    <ul>
      <li>Use large prime moduli (10^9+7, 10^9+9) to minimize collisions</li>
      <li>Choose good base values (31, 37) for character hashing</li>
      <li>Implement double hashing for critical applications</li>
      <li>Precompute powers and prefix hashes for O(1) queries</li>
    </ul>
    
    <h3>Collision Resolution Strategies:</h3>
    <ul>
      <li>Chaining: Simple implementation, good for unknown data sizes</li>
      <li>Open addressing: Better cache performance, requires careful deletion</li>
      <li>Robin Hood hashing: Minimizes variance in probe distances</li>
      <li>Cuckoo hashing: Guarantees O(1) worst-case lookup time</li>
    </ul>
    
    <h3>Hash Table Optimization:</h3>
    <ul>
      <li>Maintain load factor below 0.75 for good performance</li>
      <li>Use power-of-2 table sizes for fast modulo operations</li>
      <li>Implement efficient rehashing with exponential growth</li>
      <li>Consider custom hash functions for specific data types</li>
    </ul>
    
    <h3>Common Applications:</h3>
    <ul>
      <li>Substring matching and pattern searching</li>
      <li>Frequency counting and statistical analysis</li>
      <li>Duplicate detection and uniqueness checking</li>
      <li>Anagram grouping and permutation problems</li>
    </ul>
    
    <h3>Implementation Tips:</h3>
    <ul>
      <li>Handle hash collisions properly in competitive settings</li>
      <li>Use rolling hash for efficient substring operations</li>
      <li>Combine multiple hash functions for higher reliability</li>
      <li>Profile hash function performance for time-critical problems</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/data-structures" class="prev">← Data Structures</a>
    <a href="/4-competitive/divide-conquer" class="next">Divide & Conquer →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>