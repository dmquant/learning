---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="哈希表（字符串哈希、哈希函数冲突的解决）">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; 哈希表
  </div>

  <h1>哈希表（字符串哈希、哈希函数冲突的解决）</h1>
  
  <div class="overview">
    <p>
      哈希表是竞赛编程中的重要数据结构，能在O(1)时间内完成插入、删除和查找操作。本节重点讲解字符串哈希、哈希冲突的解决方案以及在算法竞赛中的高级应用。
    </p>
  </div>

  <h2>字符串哈希基础</h2>
  
  <p>字符串哈希将字符串映射为数值，常用于快速字符串比较、回文检测、最长公共子串等问题。</p>

  <CodeExample 
    client:load
    title="多项式哈希实现"
    code={`#include <iostream>
#include <string>
#include <vector>
using namespace std;

class StringHash {
private:
    static const int MOD = 1000000007;
    static const int BASE = 31;
    vector<long long> hash;
    vector<long long> power;
    
public:
    StringHash(const string& s) {
        int n = s.length();
        hash.resize(n + 1);
        power.resize(n + 1);
        
        hash[0] = 0;
        power[0] = 1;
        
        for (int i = 0; i < n; i++) {
            hash[i + 1] = (hash[i] * BASE + (s[i] - 'a' + 1)) % MOD;
            power[i + 1] = (power[i] * BASE) % MOD;
        }
    }
    
    // 获取子串 s[l...r] 的哈希值
    long long getHash(int l, int r) {
        long long result = (hash[r + 1] - hash[l] * power[r - l + 1]) % MOD;
        return (result + MOD) % MOD;
    }
};

// 检查两个子串是否相等
bool areEqual(StringHash& sh1, int l1, int r1, 
              StringHash& sh2, int l2, int r2) {
    if (r1 - l1 != r2 - l2) return false;
    return sh1.getHash(l1, r1) == sh2.getHash(l2, r2);
}

int main() {
    string s1 = "abcdefg";
    string s2 = "xyzabcpqr";
    
    StringHash sh1(s1);
    StringHash sh2(s2);
    
    cout << "字符串1: " << s1 << endl;
    cout << "字符串2: " << s2 << endl;
    cout << endl;
    
    // 比较子串 s1[0..2] 和 s2[3..5]
    cout << "s1[0..2] = '" << s1.substr(0, 3) << "'" << endl;
    cout << "s2[3..5] = '" << s2.substr(3, 3) << "'" << endl;
    cout << "是否相等: " << (areEqual(sh1, 0, 2, sh2, 3, 5) ? "是" : "否") << endl;
    
    return 0;
}`}
    explanation="多项式哈希使用进制转换的思想，将字符串看作BASE进制数。预处理前缀哈希和幂次，可以O(1)查询任意子串哈希值。"
    output={`字符串1: abcdefg
字符串2: xyzabcpqr

s1[0..2] = 'abc'
s2[3..5] = 'abc'
是否相等: 是`}
  />

  <h2>双哈希避免冲突</h2>
  
  <p>使用两个不同的哈希函数可以大大降低哈希冲突的概率，提高算法的可靠性。</p>

  <CodeExample 
    client:load
    title="双哈希字符串匹配"
    code={`#include <iostream>
#include <string>
#include <vector>
using namespace std;

class DoubleHash {
private:
    static const int MOD1 = 1000000007;
    static const int MOD2 = 1000000009;
    static const int BASE1 = 31;
    static const int BASE2 = 37;
    
    vector<long long> hash1, hash2;
    vector<long long> power1, power2;
    
public:
    DoubleHash(const string& s) {
        int n = s.length();
        hash1.resize(n + 1);
        hash2.resize(n + 1);
        power1.resize(n + 1);
        power2.resize(n + 1);
        
        hash1[0] = hash2[0] = 0;
        power1[0] = power2[0] = 1;
        
        for (int i = 0; i < n; i++) {
            int c = s[i] - 'a' + 1;
            hash1[i + 1] = (hash1[i] * BASE1 + c) % MOD1;
            hash2[i + 1] = (hash2[i] * BASE2 + c) % MOD2;
            power1[i + 1] = (power1[i] * BASE1) % MOD1;
            power2[i + 1] = (power2[i] * BASE2) % MOD2;
        }
    }
    
    pair<long long, long long> getHash(int l, int r) {
        long long h1 = (hash1[r + 1] - hash1[l] * power1[r - l + 1]) % MOD1;
        long long h2 = (hash2[r + 1] - hash2[l] * power2[r - l + 1]) % MOD2;
        h1 = (h1 + MOD1) % MOD1;
        h2 = (h2 + MOD2) % MOD2;
        return {h1, h2};
    }
};

// 在文本中查找所有模式串的出现位置
vector<int> findAllOccurrences(const string& text, const string& pattern) {
    vector<int> result;
    if (pattern.length() > text.length()) return result;
    
    DoubleHash textHash(text);
    DoubleHash patternHash(pattern);
    
    auto patHash = patternHash.getHash(0, pattern.length() - 1);
    
    for (int i = 0; i <= text.length() - pattern.length(); i++) {
        auto subHash = textHash.getHash(i, i + pattern.length() - 1);
        if (subHash == patHash) {
            result.push_back(i);
        }
    }
    
    return result;
}

int main() {
    string text = "ababcababa";
    string pattern = "aba";
    
    vector<int> positions = findAllOccurrences(text, pattern);
    
    cout << "文本: " << text << endl;
    cout << "模式: " << pattern << endl;
    cout << "出现位置: ";
    for (int pos : positions) {
        cout << pos << " ";
    }
    cout << endl;
    
    return 0;
}`}
    explanation="双哈希使用两个不同的模数和底数，同时满足两个哈希值相等的概率极小，可以有效避免哈希冲突。"
    output={`文本: ababcababa
模式: aba
出现位置: 0 2 4 6`}
  />

  <h2>哈希冲突解决：链地址法</h2>
  
  <p>当多个键映射到同一个哈希值时，可以使用链地址法在同一位置存储多个元素。</p>

  <CodeExample 
    client:load
    title="自定义哈希表实现"
    code={`#include <iostream>
#include <vector>
#include <list>
#include <string>
using namespace std;

template<typename K, typename V>
class HashTable {
private:
    static const int INITIAL_SIZE = 16;
    static const double LOAD_FACTOR_THRESHOLD = 0.75;
    
    vector<list<pair<K, V>>> table;
    int size;
    int capacity;
    
    int hash(const K& key) {
        return std::hash<K>{}(key) % capacity;
    }
    
    void rehash() {
        vector<list<pair<K, V>>> oldTable = table;
        capacity *= 2;
        table.assign(capacity, list<pair<K, V>>());
        size = 0;
        
        for (auto& bucket : oldTable) {
            for (auto& kv : bucket) {
                insert(kv.first, kv.second);
            }
        }
    }
    
public:
    HashTable() : capacity(INITIAL_SIZE), size(0) {
        table.resize(capacity);
    }
    
    void insert(const K& key, const V& value) {
        if ((double)size / capacity > LOAD_FACTOR_THRESHOLD) {
            rehash();
        }
        
        int index = hash(key);
        auto& bucket = table[index];
        
        for (auto& kv : bucket) {
            if (kv.first == key) {
                kv.second = value;
                return;
            }
        }
        
        bucket.push_back({key, value});
        size++;
    }
    
    bool find(const K& key, V& value) {
        int index = hash(key);
        auto& bucket = table[index];
        
        for (auto& kv : bucket) {
            if (kv.first == key) {
                value = kv.second;
                return true;
            }
        }
        return false;
    }
    
    bool remove(const K& key) {
        int index = hash(key);
        auto& bucket = table[index];
        
        for (auto it = bucket.begin(); it != bucket.end(); ++it) {
            if (it->first == key) {
                bucket.erase(it);
                size--;
                return true;
            }
        }
        return false;
    }
    
    void display() {
        cout << "哈希表内容:" << endl;
        for (int i = 0; i < capacity; i++) {
            if (!table[i].empty()) {
                cout << "桶 " << i << ": ";
                for (auto& kv : table[i]) {
                    cout << "(" << kv.first << "," << kv.second << ") ";
                }
                cout << endl;
            }
        }
    }
};

int main() {
    HashTable<string, int> ht;
    
    // 插入数据
    ht.insert("apple", 5);
    ht.insert("banana", 3);
    ht.insert("orange", 8);
    ht.insert("grape", 12);
    
    ht.display();
    
    // 查找数据
    int value;
    if (ht.find("banana", value)) {
        cout << "找到 banana: " << value << endl;
    }
    
    // 删除数据
    ht.remove("orange");
    cout << "删除 orange 后:" << endl;
    ht.display();
    
    return 0;
}`}
    explanation="链地址法使用链表解决哈希冲突，每个桶存储一个链表。当负载因子过高时进行rehash扩容，保持良好的性能。"
    output={`哈希表内容:
桶 3: (apple,5) 
桶 6: (banana,3) 
桶 10: (orange,8) 
桶 14: (grape,12) 
找到 banana: 3
删除 orange 后:
哈希表内容:
桶 3: (apple,5) 
桶 6: (banana,3) 
桶 14: (grape,12)`}
  />

  <h2>Rabin-Karp字符串匹配算法</h2>
  
  <p>Rabin-Karp算法使用滚动哈希的技巧，实现高效的字符串匹配。</p>

  <CodeExample 
    client:load
    title="Rabin-Karp算法实现"
    code={`#include <iostream>
#include <string>
#include <vector>
using namespace std;

class RabinKarp {
private:
    static const int MOD = 1000000007;
    static const int BASE = 256;
    
public:
    vector<int> search(const string& text, const string& pattern) {
        vector<int> result;
        int n = text.length();
        int m = pattern.length();
        
        if (m > n) return result;
        
        // 计算BASE^(m-1) % MOD
        long long h = 1;
        for (int i = 0; i < m - 1; i++) {
            h = (h * BASE) % MOD;
        }
        
        // 计算模式串和文本第一个窗口的哈希值
        long long patternHash = 0;
        long long textHash = 0;
        
        for (int i = 0; i < m; i++) {
            patternHash = (patternHash * BASE + pattern[i]) % MOD;
            textHash = (textHash * BASE + text[i]) % MOD;
        }
        
        // 滑动窗口查找
        for (int i = 0; i <= n - m; i++) {
            // 检查哈希值是否匹配
            if (patternHash == textHash) {
                // 验证字符是否真正匹配（避免哈希冲突）
                bool match = true;
                for (int j = 0; j < m; j++) {
                    if (text[i + j] != pattern[j]) {
                        match = false;
                        break;
                    }
                }
                if (match) {
                    result.push_back(i);
                }
            }
            
            // 计算下一个窗口的哈希值
            if (i < n - m) {
                textHash = (textHash - text[i] * h) % MOD;
                textHash = (textHash * BASE + text[i + m]) % MOD;
                textHash = (textHash + MOD) % MOD; // 确保非负
            }
        }
        
        return result;
    }
};

int main() {
    RabinKarp rk;
    string text = "AABAACAADAABAABA";
    string pattern = "AABA";
    
    vector<int> matches = rk.search(text, pattern);
    
    cout << "文本: " << text << endl;
    cout << "模式: " << pattern << endl;
    cout << "匹配位置: ";
    for (int pos : matches) {
        cout << pos << " ";
    }
    cout << endl;
    
    // 显示匹配的子串
    cout << "匹配的子串:" << endl;
    for (int pos : matches) {
        cout << "位置 " << pos << ": " << text.substr(pos, pattern.length()) << endl;
    }
    
    return 0;
}`}
    explanation="Rabin-Karp使用滚动哈希技术，每次滑动窗口时O(1)更新哈希值。平均时间复杂度O(n+m)，最坏情况O(nm)。"
    output={`文本: AABAACAADAABAABA
模式: AABA
匹配位置: 0 9 12 
匹配的子串:
位置 0: AABA
位置 9: AABA
位置 12: AABA`}
  />

  <h2>竞赛中的哈希应用</h2>
  
  <div class="tips">
    <h3>字符串哈希的典型应用：</h3>
    <ul>
      <li>快速判断两个子串是否相等</li>
      <li>最长回文子串（结合二分查找）</li>
      <li>最长公共子串问题</li>
      <li>字符串周期性检测</li>
    </ul>
    
    <h3>哈希表的竞赛技巧：</h3>
    <ul>
      <li>使用unordered_map和unordered_set进行快速查找</li>
      <li>自定义哈希函数处理复合数据类型</li>
      <li>双哈希避免恶意数据的哈希攻击</li>
      <li>滚动哈希处理滑动窗口问题</li>
    </ul>
    
    <h3>注意事项：</h3>
    <ul>
      <li>选择合适的模数，避免溢出</li>
      <li>处理负数取模的边界情况</li>
      <li>在关键场合使用双哈希提高可靠性</li>
      <li>预处理幂次数组提高效率</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive" class="prev">← 返回L4目录</a>
    <a href="/4-competitive/divide-conquer" class="next">分治算法 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>