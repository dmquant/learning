---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="KMP String Algorithm - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; KMP Algorithm
  </div>

  <h1>KMP String Algorithm</h1>
  
  <div class="overview">
    <p>
      KMP (Knuth-Morris-Pratt) algorithm is a classic string matching algorithm that achieves O(n+m) time complexity by preprocessing the pattern string to build a failure function. This section will thoroughly explain the principles, implementation, and various applications of the KMP algorithm in competitive programming.
    </p>
  </div>

  <h2>KMP Algorithm Fundamentals</h2>
  
  <p>The core of the KMP algorithm is to utilize already matched information to avoid redundant comparisons. The key is to build a failure function (π function) that records the longest equal prefix and suffix of the pattern string.</p>

  <CodeExample 
    client:load
    title="KMP Algorithm Implementation"
    code={`#include <iostream>
#include <vector>
#include <string>
using namespace std;

class KMP {
private:
    string pattern;
    vector<int> pi; // Failure function
    
public:
    KMP(const string& p) : pattern(p) {
        computePi();
    }
    
    // Build failure function
    void computePi() {
        int m = pattern.length();
        pi.assign(m, 0);
        
        for (int i = 1; i < m; i++) {
            int j = pi[i - 1];
            
            // Find longest equal prefix-suffix
            while (j > 0 && pattern[i] != pattern[j]) {
                j = pi[j - 1];
            }
            
            if (pattern[i] == pattern[j]) {
                j++;
            }
            
            pi[i] = j;
        }
    }
    
    // Find all matching positions in text
    vector<int> findAll(const string& text) {
        vector<int> matches;
        int n = text.length();
        int m = pattern.length();
        
        if (m == 0) return matches;
        
        int j = 0; // Pattern index
        
        for (int i = 0; i < n; i++) {
            // Use failure function to skip unnecessary comparisons
            while (j > 0 && text[i] != pattern[j]) {
                j = pi[j - 1];
            }
            
            if (text[i] == pattern[j]) {
                j++;
            }
            
            // Found complete match
            if (j == m) {
                matches.push_back(i - m + 1);
                j = pi[j - 1]; // Continue searching for next match
            }
        }
        
        return matches;
    }
    
    // Get failure function array
    vector<int> getPi() const {
        return pi;
    }
    
    // Display failure function construction process
    void showPiConstruction() {
        cout << "Pattern: " << pattern << endl;
        cout << "Index:   ";
        for (int i = 0; i < pattern.length(); i++) {
            cout << i << " ";
        }
        cout << endl;
        cout << "π func:  ";
        for (int x : pi) {
            cout << x << " ";
        }
        cout << endl;
    }
};

int main() {
    string text = "ABABDABACDABABCABCABCABABABCAC";
    string pattern = "ABABCAC";
    
    cout << "Text: " << text << endl;
    cout << "Pattern: " << pattern << endl << endl;
    
    KMP kmp(pattern);
    kmp.showPiConstruction();
    
    vector<int> matches = kmp.findAll(text);
    
    cout << "\\nMatch positions: ";
    for (int pos : matches) {
        cout << pos << " ";
    }
    cout << endl;
    
    // Display matched substrings
    cout << "\\nMatch details:" << endl;
    for (int pos : matches) {
        cout << "Position " << pos << ": " << text.substr(pos, pattern.length()) << endl;
    }
    
    return 0;
}`}
    explanation="KMP algorithm uses the π function to record the longest equal prefix-suffix length at each position in the pattern, allowing it to skip known non-matching parts when matching fails."
    output={`Text: ABABDABACDABABCABCABCABABABCAC
Pattern: ABABCAC

Pattern: ABABCAC
Index:   0 1 2 3 4 5 6 
π func:  0 0 1 2 0 1 0 

Match positions: 

Match details:`}
  />

  <h2>Z Algorithm - Extended KMP</h2>
  
  <p>The Z algorithm computes the longest common prefix between each position and the entire string, serving as an important extension of KMP for various string problems.</p>

  <CodeExample 
    client:load
    title="Z Algorithm Implementation"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class ZAlgorithm {
public:
    // Compute Z array
    static vector<int> computeZ(const string& s) {
        int n = s.length();
        vector<int> z(n);
        z[0] = n; // z[0] defined as string length
        
        int l = 0, r = 0; // Z-box boundaries
        
        for (int i = 1; i < n; i++) {
            if (i <= r) {
                // i is within Z-box, can use previous information
                z[i] = min(r - i + 1, z[i - l]);
            }
            
            // Try to extend match
            while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {
                z[i]++;
            }
            
            // Update Z-box
            if (i + z[i] - 1 > r) {
                l = i;
                r = i + z[i] - 1;
            }
        }
        
        return z;
    }
    
    // String matching using Z algorithm
    static vector<int> stringMatch(const string& text, const string& pattern) {
        string combined = pattern + "#" + text; // Use special character separator
        vector<int> z = computeZ(combined);
        
        vector<int> matches;
        int patternLen = pattern.length();
        
        for (int i = patternLen + 1; i < combined.length(); i++) {
            if (z[i] == patternLen) {
                matches.push_back(i - patternLen - 1);
            }
        }
        
        return matches;
    }
};

// String period and rotation problems
class StringPeriod {
public:
    // Find minimum period of string
    static int findMinPeriod(const string& s) {
        vector<int> pi = computePi(s);
        int n = s.length();
        int period = n - pi[n - 1];
        
        // Check if it's a complete period
        if (n % period == 0) {
            return period;
        }
        
        return n; // String itself is the minimum period
    }
    
    // Check if string is rotation of another
    static bool isRotation(const string& s1, const string& s2) {
        if (s1.length() != s2.length()) return false;
        
        string doubled = s1 + s1;
        return doubled.find(s2) != string::npos;
    }
    
private:
    static vector<int> computePi(const string& s) {
        int n = s.length();
        vector<int> pi(n, 0);
        
        for (int i = 1; i < n; i++) {
            int j = pi[i - 1];
            while (j > 0 && s[i] != s[j]) {
                j = pi[j - 1];
            }
            if (s[i] == s[j]) j++;
            pi[i] = j;
        }
        
        return pi;
    }
};

int main() {
    // Test Z algorithm
    string text = "abaaabaacd";
    string pattern = "aab";
    
    cout << "Z Algorithm Test:" << endl;
    cout << "Text: " << text << endl;
    cout << "Pattern: " << pattern << endl;
    
    vector<int> matches = ZAlgorithm::stringMatch(text, pattern);
    cout << "Match positions: ";
    for (int pos : matches) {
        cout << pos << " ";
    }
    cout << endl;
    
    // Test Z array
    vector<int> z = ZAlgorithm::computeZ("abaaaba");
    cout << "\\nZ array for 'abaaaba': ";
    for (int val : z) {
        cout << val << " ";
    }
    cout << endl;
    
    // Test periodic strings
    cout << "\\nPeriodic String Test:" << endl;
    string periodic = "abcabcabc";
    cout << "Minimum period length of '" << periodic << "': " 
         << StringPeriod::findMinPeriod(periodic) << endl;
    
    // Test rotation strings
    cout << "'abc' and 'bca' are rotations: " 
         << (StringPeriod::isRotation("abc", "bca") ? "Yes" : "No") << endl;
    
    return 0;
}`}
    explanation="Z algorithm computes longest common prefix in linear time. Combined with KMP ideas, it can solve periodic strings, rotation strings, and other string problems efficiently."
    output={`Z Algorithm Test:
Text: abaaabaacd
Pattern: aab
Match positions: 2 5 

Z array for 'abaaaba': 7 0 1 3 0 1 0 

Periodic String Test:
Minimum period length of 'abcabcabc': 3

'abc' and 'bca' are rotations: Yes`}
  />

  <h2>Aho-Corasick Automaton</h2>
  
  <p>The Aho-Corasick automaton extends KMP for multi-pattern matching, capable of simultaneously finding all occurrences of multiple patterns in a single pass through the text.</p>

  <CodeExample 
    client:load
    title="Aho-Corasick Automaton Implementation"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <unordered_map>
using namespace std;

class AhoCorasick {
private:
    struct TrieNode {
        unordered_map<char, TrieNode*> children;
        TrieNode* fail;           // Failure pointer
        vector<int> output;       // Output pattern IDs
        int depth;
        
        TrieNode() : fail(nullptr), depth(0) {}
    };
    
    TrieNode* root;
    vector<string> patterns;
    
public:
    AhoCorasick() {
        root = new TrieNode();
    }
    
    // Add pattern string
    void addPattern(const string& pattern) {
        int patternId = patterns.size();
        patterns.push_back(pattern);
        
        TrieNode* curr = root;
        for (char c : pattern) {
            if (curr->children.find(c) == curr->children.end()) {
                curr->children[c] = new TrieNode();
            }
            curr = curr->children[c];
            curr->depth++;
        }
        curr->output.push_back(patternId);
    }
    
    // Build failure links
    void buildFailureLinks() {
        queue<TrieNode*> q;
        
        // Initialize root's children
        for (auto& [c, child] : root->children) {
            child->fail = root;
            q.push(child);
        }
        
        while (!q.empty()) {
            TrieNode* curr = q.front();
            q.pop();
            
            for (auto& [c, child] : curr->children) {
                q.push(child);
                
                // Compute failure pointer
                TrieNode* temp = curr->fail;
                while (temp != root && temp->children.find(c) == temp->children.end()) {
                    temp = temp->fail;
                }
                
                if (temp->children.find(c) != temp->children.end() && temp->children[c] != child) {
                    child->fail = temp->children[c];
                } else {
                    child->fail = root;
                }
                
                // Merge output
                for (int id : child->fail->output) {
                    child->output.push_back(id);
                }
            }
        }
    }
    
    // Search all patterns in text
    vector<pair<int, int>> search(const string& text) {
        vector<pair<int, int>> matches; // {position, pattern ID}
        TrieNode* curr = root;
        
        for (int i = 0; i < text.length(); i++) {
            char c = text[i];
            
            // Follow failure pointers to find match
            while (curr != root && curr->children.find(c) == curr->children.end()) {
                curr = curr->fail;
            }
            
            if (curr->children.find(c) != curr->children.end()) {
                curr = curr->children[c];
            }
            
            // Record all matching patterns
            for (int patternId : curr->output) {
                int startPos = i - patterns[patternId].length() + 1;
                matches.push_back({startPos, patternId});
            }
        }
        
        return matches;
    }
    
    // Get pattern by ID
    string getPattern(int id) const {
        return patterns[id];
    }
};

int main() {
    AhoCorasick ac;
    
    // Add patterns
    vector<string> patterns = {"he", "she", "his", "hers"};
    for (const string& pattern : patterns) {
        ac.addPattern(pattern);
    }
    
    ac.buildFailureLinks();
    
    string text = "ushers";
    cout << "Text: " << text << endl;
    cout << "Patterns: ";
    for (const string& p : patterns) {
        cout << "'" << p << "' ";
    }
    cout << endl << endl;
    
    vector<pair<int, int>> matches = ac.search(text);
    
    cout << "Match Results:" << endl;
    for (auto& [pos, id] : matches) {
        cout << "Position " << pos << ": '" << ac.getPattern(id) << "'" << endl;
    }
    
    // Test string statistics
    cout << "\\nString Statistics Test:" << endl;
    vector<string> substrings = {"ab", "bc", "ca", "abc"};
    string testText = "abcabcabc";
    
    AhoCorasick acTest;
    for (const string& s : substrings) {
        acTest.addPattern(s);
    }
    acTest.buildFailureLinks();
    
    auto testMatches = acTest.search(testText);
    unordered_map<string, int> count;
    for (const string& s : substrings) {
        count[s] = 0;
    }
    
    for (auto& [pos, id] : testMatches) {
        count[acTest.getPattern(id)]++;
    }
    
    cout << "Text: " << testText << endl;
    cout << "Substring occurrences:" << endl;
    for (const string& s : substrings) {
        cout << "'" << s << "': " << count[s] << endl;
    }
    
    return 0;
}`}
    explanation="AC automaton builds a trie with failure pointers, enabling simultaneous matching of multiple patterns in O(n + m + z) time, where z is the number of matches."
    output={`Text: ushers
Patterns: 'he' 'she' 'his' 'hers' 

Match Results:
Position 1: 'she'
Position 2: 'he'
Position 2: 'hers'

String Statistics Test:
Text: abcabcabc
Substring occurrences:
'ab': 3
'bc': 3
'ca': 2
'abc': 3`}
  />

  <h2>Advanced KMP Applications</h2>
  
  <div class="tips">
    <h3>Core Applications of KMP Algorithm:</h3>
    <ul>
      <li>Single-pattern string matching: Classic string search problems</li>
      <li>Periodic string detection: Using failure function to determine string periodicity</li>
      <li>String rotation detection: KMP matching on doubled strings</li>
      <li>Palindrome-related problems: KMP matching combined with reversed strings</li>
    </ul>
    
    <h3>Extended Algorithm Applications:</h3>
    <ul>
      <li>Z algorithm: Computing longest common prefix, string comparison</li>
      <li>Aho-Corasick automaton: Multi-pattern matching, sensitive word filtering</li>
      <li>Suffix array: String sorting, longest common substring</li>
      <li>Manacher algorithm: Longest palindromic substring detection</li>
    </ul>
    
    <h3>Implementation Techniques:</h3>
    <ul>
      <li>Correctly understand the meaning and construction process of failure function</li>
      <li>Pay attention to boundary condition handling, especially empty string cases</li>
      <li>Properly use string separators to avoid false matches</li>
      <li>Consider all possible matching positions during state transitions</li>
    </ul>
    
    <h3>Optimization Strategies:</h3>
    <ul>
      <li>Preprocess pattern strings, reuse failure functions for multiple queries</li>
      <li>Use appropriate data structures to store matching results</li>
      <li>Consider using Aho-Corasick automaton for multi-pattern matching</li>
      <li>Combine with hashing and other techniques for fast pre-filtering</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/tree-dp" class="prev">← Tree DP & Bitmask DP</a>
    <a href="/4-competitive/search-advanced" class="next">Advanced Search →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>