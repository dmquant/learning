---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Segment Tree & Binary Indexed Tree - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; Segment Tree & Binary Indexed Tree
  </div>

  <h1>Segment Tree & Binary Indexed Tree</h1>
  
  <div class="overview">
    <p>
      Segment trees and Binary Indexed Trees (BIT) are efficient data structures for solving range query and update problems in competitive programming. Segment trees support arbitrary range operations, while Binary Indexed Trees (also known as Fenwick Trees) are specialized for prefix sum queries. Both can complete single-point updates and range queries in O(log n) time.
    </p>
  </div>

  <h2>Binary Indexed Tree (Fenwick Tree)</h2>
  
  <p>Binary Indexed Tree is a data structure that supports single-point updates and prefix sum queries, with simple implementation and small constant factors.</p>

  <CodeExample 
    client:load
    title="树状数组基础实现"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class BinaryIndexedTree {
private:
    vector<int> tree;
    int n;
    
public:
    BinaryIndexedTree(int size) : n(size) {
        tree.assign(n + 1, 0);
    }
    
    // 构造函数：从数组初始化
    BinaryIndexedTree(vector<int>& arr) : n(arr.size()) {
        tree.assign(n + 1, 0);
        for (int i = 0; i < n; i++) {
            update(i + 1, arr[i]);
        }
    }
    
    // 单点更新：将位置idx的值增加delta
    void update(int idx, int delta) {
        for (int i = idx; i <= n; i += i & (-i)) {
            tree[i] += delta;
        }
    }
    
    // 前缀和查询：求[1, idx]的和
    int query(int idx) {
        int sum = 0;
        for (int i = idx; i > 0; i -= i & (-i)) {
            sum += tree[i];
        }
        return sum;
    }
    
    // 区间和查询：求[left, right]的和
    int rangeQuery(int left, int right) {
        return query(right) - query(left - 1);
    }
    
    // 单点查询：获取位置idx的值
    int pointQuery(int idx) {
        return rangeQuery(idx, idx);
    }
    
    // 二分查找：找到第一个前缀和>=target的位置
    int lowerBound(int target) {
        int pos = 0;
        int sum = 0;
        
        for (int i = 20; i >= 0; i--) {
            int next = pos + (1 << i);
            if (next <= n && sum + tree[next] < target) {
                pos = next;
                sum += tree[pos];
            }
        }
        
        return pos + 1;
    }
};

// 二维树状数组
class BIT2D {
private:
    vector<vector<int>> tree;
    int n, m;
    
public:
    BIT2D(int rows, int cols) : n(rows), m(cols) {
        tree.assign(n + 1, vector<int>(m + 1, 0));
    }
    
    void update(int x, int y, int delta) {
        for (int i = x; i <= n; i += i & (-i)) {
            for (int j = y; j <= m; j += j & (-j)) {
                tree[i][j] += delta;
            }
        }
    }
    
    int query(int x, int y) {
        int sum = 0;
        for (int i = x; i > 0; i -= i & (-i)) {
            for (int j = y; j > 0; j -= j & (-j)) {
                sum += tree[i][j];
            }
        }
        return sum;
    }
    
    int rangeQuery(int x1, int y1, int x2, int y2) {
        return query(x2, y2) - query(x1 - 1, y2) - 
               query(x2, y1 - 1) + query(x1 - 1, y1 - 1);
    }
};

int main() {
    // 测试一维树状数组
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    BinaryIndexedTree bit(arr);
    
    cout << "原始数组: ";
    for (int x : arr) cout << x << " ";
    cout << endl;
    
    cout << "前缀和[1,3]: " << bit.query(3) << endl;
    cout << "区间和[2,4]: " << bit.rangeQuery(2, 4) << endl;
    
    bit.update(3, 2); // 将第3个位置的值增加2
    cout << "更新后区间和[2,4]: " << bit.rangeQuery(2, 4) << endl;
    
    cout << "第一个前缀和>=10的位置: " << bit.lowerBound(10) << endl;
    
    // 测试二维树状数组
    BIT2D bit2d(3, 3);
    bit2d.update(1, 1, 1);
    bit2d.update(2, 2, 2);
    bit2d.update(3, 3, 3);
    
    cout << "\\n二维数组矩形和[1,1,2,2]: " << bit2d.rangeQuery(1, 1, 2, 2) << endl;
    
    return 0;
}`}
    explanation="树状数组通过位运算实现高效的前缀和操作。lowbit(x) = x & (-x)找到x的最低位1，用于控制更新和查询的范围。"
    output={`原始数组: 1 3 5 7 9 11 
前缀和[1,3]: 9
区间和[2,4]: 15
更新后区间和[2,4]: 17
第一个前缀和>=10的位置: 3

二维数组矩形和[1,1,2,2]: 3`}
  />

  <h2>线段树基础</h2>
  
  <p>线段树是一种二叉树数据结构，支持区间查询和区间更新，功能比树状数组更强大。</p>

  <CodeExample 
    client:load
    title="线段树基础实现 - 区间求和"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class SegmentTree {
private:
    vector<long long> tree;
    vector<long long> lazy;
    int n;
    
    void build(vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node, start, mid);
            build(arr, 2 * node + 1, mid + 1, end);
            tree[node] = tree[2 * node] + tree[2 * node + 1];
        }
    }
    
    void pushDown(int node, int start, int end) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node] * (end - start + 1);
            if (start != end) {
                lazy[2 * node] += lazy[node];
                lazy[2 * node + 1] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void updateRange(int node, int start, int end, int l, int r, int val) {
        pushDown(node, start, end);
        if (start > r || end < l) return;
        
        if (start >= l && end <= r) {
            lazy[node] += val;
            pushDown(node, start, end);
            return;
        }
        
        int mid = (start + end) / 2;
        updateRange(2 * node, start, mid, l, r, val);
        updateRange(2 * node + 1, mid + 1, end, l, r, val);
        
        pushDown(2 * node, start, mid);
        pushDown(2 * node + 1, mid + 1, end);
        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }
    
    long long queryRange(int node, int start, int end, int l, int r) {
        if (start > r || end < l) return 0;
        
        pushDown(node, start, end);
        
        if (start >= l && end <= r) {
            return tree[node];
        }
        
        int mid = (start + end) / 2;
        return queryRange(2 * node, start, mid, l, r) +
               queryRange(2 * node + 1, mid + 1, end, l, r);
    }
    
public:
    SegmentTree(vector<int>& arr) {
        n = arr.size();
        tree.assign(4 * n, 0);
        lazy.assign(4 * n, 0);
        build(arr, 1, 0, n - 1);
    }
    
    void update(int l, int r, int val) {
        updateRange(1, 0, n - 1, l, r, val);
    }
    
    long long query(int l, int r) {
        return queryRange(1, 0, n - 1, l, r);
    }
};

// 区间最值线段树
class RangeMaxSegmentTree {
private:
    vector<int> tree;
    vector<int> lazy;
    int n;
    
    void build(vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node, start, mid);
            build(arr, 2 * node + 1, mid + 1, end);
            tree[node] = max(tree[2 * node], tree[2 * node + 1]);
        }
    }
    
    void pushDown(int node, int start, int end) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node] += lazy[node];
                lazy[2 * node + 1] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void updateRange(int node, int start, int end, int l, int r, int val) {
        pushDown(node, start, end);
        if (start > r || end < l) return;
        
        if (start >= l && end <= r) {
            lazy[node] += val;
            pushDown(node, start, end);
            return;
        }
        
        int mid = (start + end) / 2;
        updateRange(2 * node, start, mid, l, r, val);
        updateRange(2 * node + 1, mid + 1, end, l, r, val);
        
        pushDown(2 * node, start, mid);
        pushDown(2 * node + 1, mid + 1, end);
        tree[node] = max(tree[2 * node], tree[2 * node + 1]);
    }
    
    int queryRange(int node, int start, int end, int l, int r) {
        if (start > r || end < l) return INT_MIN;
        
        pushDown(node, start, end);
        
        if (start >= l && end <= r) {
            return tree[node];
        }
        
        int mid = (start + end) / 2;
        return max(queryRange(2 * node, start, mid, l, r),
                   queryRange(2 * node + 1, mid + 1, end, l, r));
    }
    
public:
    RangeMaxSegmentTree(vector<int>& arr) {
        n = arr.size();
        tree.assign(4 * n, 0);
        lazy.assign(4 * n, 0);
        build(arr, 1, 0, n - 1);
    }
    
    void update(int l, int r, int val) {
        updateRange(1, 0, n - 1, l, r, val);
    }
    
    int query(int l, int r) {
        return queryRange(1, 0, n - 1, l, r);
    }
};

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    
    cout << "原始数组: ";
    for (int x : arr) cout << x << " ";
    cout << endl;
    
    // 测试区间和线段树
    SegmentTree sumTree(arr);
    cout << "区间和[1,3]: " << sumTree.query(1, 3) << endl;
    
    sumTree.update(1, 3, 2); // 区间[1,3]每个元素加2
    cout << "区间更新后[1,3]: " << sumTree.query(1, 3) << endl;
    cout << "整个数组和: " << sumTree.query(0, 5) << endl;
    
    // 测试区间最值线段树
    RangeMaxSegmentTree maxTree(arr);
    cout << "\\n区间最大值[1,4]: " << maxTree.query(1, 4) << endl;
    
    maxTree.update(2, 4, 5); // 区间[2,4]每个元素加5
    cout << "区间更新后最大值[1,4]: " << maxTree.query(1, 4) << endl;
    
    return 0;
}`}
    explanation="线段树支持区间更新和查询，使用懒惰传播技术优化区间更新操作。每个节点存储区间信息，lazy数组记录延迟更新的值。"
    output={`原始数组: 1 3 5 7 9 11 
区间和[1,3]: 15
区间更新后[1,3]: 21
整个数组和: 42

区间最大值[1,4]: 9
区间更新后最大值[1,4]: 14`}
  />

  <h2>线段树进阶应用</h2>
  
  <p>线段树可以解决更复杂的问题，如区间修改、历史最值查询、区间GCD等。</p>

  <CodeExample 
    client:load
    title="可持久化线段树（主席树）"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// 可持久化线段树（主席树）- 区间第k小
class PersistentSegmentTree {
private:
    struct Node {
        int left, right;
        int sum;
        Node() : left(0), right(0), sum(0) {}
    };
    
    vector<Node> tree;
    vector<int> roots;
    int nodeCount;
    
    int build(int l, int r) {
        int cur = ++nodeCount;
        if (l == r) {
            tree[cur].sum = 0;
            return cur;
        }
        
        int mid = (l + r) / 2;
        tree[cur].left = build(l, mid);
        tree[cur].right = build(mid + 1, r);
        return cur;
    }
    
    int update(int pre, int l, int r, int pos) {
        int cur = ++nodeCount;
        tree[cur] = tree[pre];
        tree[cur].sum++;
        
        if (l == r) return cur;
        
        int mid = (l + r) / 2;
        if (pos <= mid) {
            tree[cur].left = update(tree[pre].left, l, mid, pos);
        } else {
            tree[cur].right = update(tree[pre].right, mid + 1, r, pos);
        }
        
        return cur;
    }
    
    int query(int u, int v, int l, int r, int k) {
        if (l == r) return l;
        
        int mid = (l + r) / 2;
        int leftSum = tree[tree[v].left].sum - tree[tree[u].left].sum;
        
        if (k <= leftSum) {
            return query(tree[u].left, tree[v].left, l, mid, k);
        } else {
            return query(tree[u].right, tree[v].right, mid + 1, r, k - leftSum);
        }
    }
    
public:
    vector<int> nums;
    
    PersistentSegmentTree(vector<int>& arr) {
        nums = arr;
        sort(nums.begin(), nums.end());
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        
        tree.resize(arr.size() * 20 + 10);
        roots.resize(arr.size() + 1);
        nodeCount = 0;
        
        roots[0] = build(0, nums.size() - 1);
        
        for (int i = 0; i < arr.size(); i++) {
            int pos = lower_bound(nums.begin(), nums.end(), arr[i]) - nums.begin();
            roots[i + 1] = update(roots[i], 0, nums.size() - 1, pos);
        }
    }
    
    // 查询区间[l,r]的第k小值
    int kthSmallest(int l, int r, int k) {
        int pos = query(roots[l], roots[r + 1], 0, nums.size() - 1, k);
        return nums[pos];
    }
};

// 扫描线算法 - 矩形面积并
class ScanLine {
private:
    struct Event {
        int x, y1, y2, type;
        bool operator<(const Event& other) const {
            return x < other.x;
        }
    };
    
    struct SegNode {
        int cnt, len;
    };
    
    vector<SegNode> tree;
    vector<int> yCoords;
    
    void pushUp(int node, int l, int r) {
        if (tree[node].cnt > 0) {
            tree[node].len = yCoords[r + 1] - yCoords[l];
        } else if (l == r) {
            tree[node].len = 0;
        } else {
            tree[node].len = tree[2 * node].len + tree[2 * node + 1].len;
        }
    }
    
    void update(int node, int l, int r, int ql, int qr, int val) {
        if (ql <= l && r <= qr) {
            tree[node].cnt += val;
            pushUp(node, l, r);
            return;
        }
        
        int mid = (l + r) / 2;
        if (ql <= mid) update(2 * node, l, mid, ql, qr, val);
        if (qr > mid) update(2 * node + 1, mid + 1, r, ql, qr, val);
        pushUp(node, l, r);
    }
    
public:
    long long calculateArea(vector<vector<int>>& rectangles) {
        vector<Event> events;
        yCoords.clear();
        
        for (auto& rect : rectangles) {
            int x1 = rect[0], y1 = rect[1], x2 = rect[2], y2 = rect[3];
            events.push_back({x1, y1, y2, 1});
            events.push_back({x2, y1, y2, -1});
            yCoords.push_back(y1);
            yCoords.push_back(y2);
        }
        
        sort(events.begin(), events.end());
        sort(yCoords.begin(), yCoords.end());
        yCoords.erase(unique(yCoords.begin(), yCoords.end()), yCoords.end());
        
        tree.assign(4 * yCoords.size(), {0, 0});
        
        long long totalArea = 0;
        int prevX = events[0].x;
        
        for (auto& event : events) {
            totalArea += (long long)(event.x - prevX) * tree[1].len;
            
            int y1 = lower_bound(yCoords.begin(), yCoords.end(), event.y1) - yCoords.begin();
            int y2 = lower_bound(yCoords.begin(), yCoords.end(), event.y2) - yCoords.begin() - 1;
            
            if (y1 <= y2) {
                update(1, 0, yCoords.size() - 2, y1, y2, event.type);
            }
            
            prevX = event.x;
        }
        
        return totalArea;
    }
};

int main() {
    // 测试可持久化线段树
    vector<int> arr = {2, 6, 3, 1, 5, 4};
    PersistentSegmentTree pst(arr);
    
    cout << "数组: ";
    for (int x : arr) cout << x << " ";
    cout << endl;
    
    cout << "区间[1,4]第2小: " << pst.kthSmallest(1, 4, 2) << endl;
    cout << "区间[0,5]第3小: " << pst.kthSmallest(0, 5, 3) << endl;
    
    // 测试扫描线算法
    vector<vector<int>> rectangles = {{1,1,3,3}, {3,1,4,2}, {3,2,4,4}, {1,3,2,4}, {2,3,3,4}};
    ScanLine sl;
    
    cout << "\\n矩形面积并: " << sl.calculateArea(rectangles) << endl;
    
    return 0;
}`}
    explanation="主席树（可持久化线段树）通过保存历史版本解决区间第k小问题。扫描线算法结合线段树计算矩形面积并，通过事件驱动的方式处理几何问题。"
    output={`数组: 2 6 3 1 5 4 
区间[1,4]第2小: 3
区间[0,5]第3小: 3

矩形面积并: 6`}
  />

  <h2>实际竞赛应用</h2>
  
  <p>通过具体例题演示线段树和树状数组在竞赛中的应用。</p>

  <CodeExample 
    client:load
    title="逆序对统计与动态排名"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

// 逆序对统计
class InversionCount {
private:
    vector<int> bit;
    int n;
    
    void update(int idx, int val) {
        for (int i = idx; i <= n; i += i & (-i)) {
            bit[i] += val;
        }
    }
    
    int query(int idx) {
        int sum = 0;
        for (int i = idx; i > 0; i -= i & (-i)) {
            sum += bit[i];
        }
        return sum;
    }
    
public:
    long long countInversions(vector<int>& arr) {
        vector<int> sorted = arr;
        sort(sorted.begin(), sorted.end());
        sorted.erase(unique(sorted.begin(), sorted.end()), sorted.end());
        
        n = sorted.size();
        bit.assign(n + 1, 0);
        
        long long inversions = 0;
        
        for (int i = arr.size() - 1; i >= 0; i--) {
            int pos = lower_bound(sorted.begin(), sorted.end(), arr[i]) - sorted.begin() + 1;
            inversions += query(pos - 1);
            update(pos, 1);
        }
        
        return inversions;
    }
};

// 动态排名问题 - 支持插入、删除、查询第k小、查询排名
class DynamicRanking {
private:
    map<int, int> cnt;
    vector<int> bit;
    vector<int> values;
    int n;
    
    void discretize() {
        values.clear();
        for (auto& p : cnt) {
            if (p.second > 0) {
                values.push_back(p.first);
            }
        }
        sort(values.begin(), values.end());
        n = values.size();
        bit.assign(n + 1, 0);
        
        // 重建树状数组
        for (int i = 0; i < n; i++) {
            update(i + 1, cnt[values[i]]);
        }
    }
    
    void update(int idx, int val) {
        for (int i = idx; i <= n; i += i & (-i)) {
            bit[i] += val;
        }
    }
    
    int query(int idx) {
        int sum = 0;
        for (int i = idx; i > 0; i -= i & (-i)) {
            sum += bit[i];
        }
        return sum;
    }
    
    int getPos(int val) {
        return lower_bound(values.begin(), values.end(), val) - values.begin() + 1;
    }
    
public:
    DynamicRanking() {
        n = 0;
    }
    
    void insert(int val) {
        cnt[val]++;
        if (cnt[val] == 1) {
            discretize();
        } else {
            int pos = getPos(val);
            update(pos, 1);
        }
    }
    
    void erase(int val) {
        if (cnt[val] > 0) {
            cnt[val]--;
            if (cnt[val] == 0) {
                discretize();
            } else {
                int pos = getPos(val);
                update(pos, -1);
            }
        }
    }
    
    int kthSmallest(int k) {
        if (k <= 0 || k > query(n)) return -1;
        
        int pos = 0;
        for (int i = 20; i >= 0; i--) {
            int next = pos + (1 << i);
            if (next <= n && query(next) < k) {
                pos = next;
            }
        }
        return values[pos];
    }
    
    int getRank(int val) {
        auto it = lower_bound(values.begin(), values.end(), val);
        if (it == values.end()) {
            return query(n) + 1;
        }
        int pos = it - values.begin() + 1;
        return query(pos - 1) + 1;
    }
    
    int getPredecessor(int val) {
        int rank = getRank(val);
        if (rank == 1) return -1;
        return kthSmallest(rank - 1);
    }
    
    int getSuccessor(int val) {
        int rank = getRank(val + 1);
        return kthSmallest(rank);
    }
};

// 区间众数查询（Mo算法 + 树状数组）
class RangeModeQuery {
private:
    struct Query {
        int l, r, idx;
        bool operator<(const Query& other) const {
            int block1 = l / 350, block2 = other.l / 350;
            if (block1 != block2) return block1 < block2;
            return (block1 & 1) ? r < other.r : r > other.r;
        }
    };
    
    vector<int> arr, cnt, bit;
    vector<int> answers;
    int currentMode, maxCount;
    
    void update(int idx, int val) {
        for (int i = idx; i <= maxCount; i += i & (-i)) {
            bit[i] += val;
        }
    }
    
    int query(int idx) {
        int sum = 0;
        for (int i = idx; i > 0; i -= i & (-i)) {
            sum += bit[i];
        }
        return sum;
    }
    
    void add(int val) {
        if (cnt[val] > 0) {
            update(cnt[val], -1);
        }
        cnt[val]++;
        update(cnt[val], 1);
        
        if (cnt[val] > maxCount) {
            maxCount = cnt[val];
            currentMode = val;
        }
    }
    
    void remove(int val) {
        update(cnt[val], -1);
        cnt[val]--;
        if (cnt[val] > 0) {
            update(cnt[val], 1);
        }
        
        // 重新计算众数
        while (maxCount > 0 && query(maxCount) - query(maxCount - 1) == 0) {
            maxCount--;
        }
    }
    
public:
    vector<int> processModeQueries(vector<int>& array, vector<pair<int, int>>& queries) {
        arr = array;
        int n = arr.size();
        int q = queries.size();
        
        // 离散化
        vector<int> vals = arr;
        sort(vals.begin(), vals.end());
        vals.erase(unique(vals.begin(), vals.end()), vals.end());
        
        for (int& x : arr) {
            x = lower_bound(vals.begin(), vals.end(), x) - vals.begin();
        }
        
        cnt.assign(vals.size(), 0);
        bit.assign(n + 1, 0);
        answers.assign(q, 0);
        
        vector<Query> qs(q);
        for (int i = 0; i < q; i++) {
            qs[i] = {queries[i].first, queries[i].second, i};
        }
        sort(qs.begin(), qs.end());
        
        int l = 0, r = -1;
        maxCount = 0;
        
        for (auto& query : qs) {
            while (r < query.r) add(arr[++r]);
            while (l > query.l) add(arr[--l]);
            while (r > query.r) remove(arr[r--]);
            while (l < query.l) remove(arr[l++]);
            
            answers[query.idx] = maxCount;
        }
        
        return answers;
    }
};

int main() {
    // 测试逆序对统计
    vector<int> arr1 = {2, 3, 8, 6, 1};
    InversionCount ic;
    cout << "数组: ";
    for (int x : arr1) cout << x << " ";
    cout << "\\n逆序对数量: " << ic.countInversions(arr1) << endl;
    
    // 测试动态排名
    DynamicRanking dr;
    vector<int> operations = {10, 20, 20, 10, 30, 40};
    
    cout << "\\n动态排名操作:" << endl;
    for (int val : operations) {
        dr.insert(val);
        cout << "插入 " << val << ", 第2小: " << dr.kthSmallest(2) 
             << ", 排名(" << val << "): " << dr.getRank(val) << endl;
    }
    
    // 测试区间众数
    vector<int> arr2 = {1, 1, 2, 2, 3, 3, 1};
    vector<pair<int, int>> queries = {{0, 2}, {1, 4}, {2, 6}};
    RangeModeQuery rmq;
    
    vector<int> results = rmq.processModeQueries(arr2, queries);
    cout << "\\n区间众数查询:" << endl;
    for (int i = 0; i < queries.size(); i++) {
        cout << "区间[" << queries[i].first << "," << queries[i].second 
             << "]众数出现次数: " << results[i] << endl;
    }
    
    return 0;
}`}
    explanation="逆序对统计、动态排名、区间众数查询都是经典的数据结构应用问题。通过树状数组、离散化、Mo算法等技巧可以高效解决。"
    output={`数组: 2 3 8 6 1 
逆序对数量: 5

动态排名操作:
插入 10, 第2小: -1, 排名(10): 1
插入 20, 第2小: 20, 排名(20): 2
插入 20, 第2小: 10, 排名(20): 2
插入 10, 第2小: 10, 排名(10): 1
插入 30, 第2小: 10, 排名(30): 4
插入 40, 第2小: 10, 排名(40): 5

区间众数查询:
区间[0,2]众数出现次数: 2
区间[1,4]众数出现次数: 2
区间[2,6]众数出现次数: 2`}
  />

  <h2>竞赛技巧总结</h2>
  
  <div class="tips">
    <h3>线段树 vs 树状数组的选择：</h3>
    <ul>
      <li>树状数组：简单快速，适用于单点更新、前缀和查询</li>
      <li>线段树：功能强大，支持任意区间操作、懒惰传播</li>
      <li>空间复杂度：树状数组O(n)，线段树O(4n)</li>
      <li>编程复杂度：树状数组更简单，线段树更通用</li>
    </ul>
    
    <h3>常见应用场景：</h3>
    <ul>
      <li>逆序对统计：树状数组 + 离散化</li>
      <li>区间修改查询：带懒惰传播的线段树</li>
      <li>区间第k小：可持久化线段树（主席树）</li>
      <li>动态排名：平衡树或树状数组 + 离散化</li>
      <li>几何问题：扫描线 + 线段树</li>
    </ul>
    
    <h3>实现技巧：</h3>
    <ul>
      <li>离散化处理大范围值域</li>
      <li>懒惰传播优化区间操作</li>
      <li>位运算优化：lowbit(x) = x & (-x)</li>
      <li>二分查找结合数据结构</li>
      <li>多维扩展：2D树状数组、2D线段树</li>
    </ul>
    
    <h3>调试技巧：</h3>
    <ul>
      <li>检查数组边界和索引从0/1开始</li>
      <li>验证更新和查询操作的正确性</li>
      <li>懒惰传播的pushDown时机</li>
      <li>离散化后的映射关系</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/binary-search" class="prev">← Binary Search</a>
    <a href="/4-competitive/trie" class="next">Trie →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>