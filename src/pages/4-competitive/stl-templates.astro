---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="STL Containers & Templates - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; STL Containers & Templates
  </div>

  <h1>STL Containers & Templates</h1>
  
  <div class="overview">
    <p>
      STL (Standard Template Library) is the core tool for C++ competitive programming. Mastering the characteristics and usage techniques of STL containers can greatly improve problem-solving efficiency and code quality.
    </p>
  </div>

  <h2>set and multiset - Ordered Collections</h2>
  
  <CodeExample 
    client:load
    title="Advanced set Operations and Applications"
    code={`#include <iostream>
#include <set>
#include <vector>
using namespace std;

int main() {
    set<int> s;
    multiset<int> ms;
    
    // Insert elements
    vector<int> nums = {3, 1, 4, 1, 5, 9, 2, 6};
    
    for (int x : nums) {
        s.insert(x);    // set automatically removes duplicates
        ms.insert(x);   // multiset allows duplicates
    }
    
    cout << "Original array: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    cout << "set (deduplicated and sorted): ";
    for (int x : s) cout << x << " ";
    cout << endl;
    
    cout << "multiset (keeps duplicates): ";
    for (int x : ms) cout << x << " ";
    cout << endl;
    
    // Search operations
    int target = 4;
    auto it = s.find(target);
    if (it != s.end()) {
        cout << "Found element " << target << endl;
        
        // Find first element >= target
        auto lb = s.lower_bound(target);
        // Find first element > target  
        auto ub = s.upper_bound(target);
        
        cout << "lower_bound(" << target << "): " << *lb << endl;
        if (ub != s.end()) {
            cout << "upper_bound(" << target << "): " << *ub << endl;
        }
    }
    
    // Delete operations
    s.erase(1);  // Remove element with value 1
    cout << "set after removing 1: ";
    for (int x : s) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="set is implemented using red-black tree, automatically sorts and deduplicates, supports O(log n) insertion, deletion, and search. lower_bound and upper_bound are important operations in competitive programming."
    output={`Original array: 3 1 4 1 5 9 2 6 
set (deduplicated and sorted): 1 2 3 4 5 6 9 
multiset (keeps duplicates): 1 1 2 3 4 5 6 9 
Found element 4
lower_bound(4): 4
upper_bound(4): 5
set after removing 1: 2 3 4 5 6 9`}
  />

  <h2>map and unordered_map - Mapping Containers</h2>
  
  <CodeExample 
    client:load
    title="Practical map Applications - Counting and Searching"
    code={`#include <iostream>
#include <map>
#include <unordered_map>
#include <string>
#include <vector>
using namespace std;

int main() {
    vector<string> words = {"apple", "banana", "apple", "cherry", "banana", "apple"};
    
    // Use map for word frequency counting (ordered)
    map<string, int> wordCount;
    for (const string& word : words) {
        wordCount[word]++;
    }
    
    cout << "Word frequency (map - ordered):" << endl;
    for (const auto& pair : wordCount) {
        cout << pair.first << ": " << pair.second << endl;
    }
    
    // Use unordered_map (faster lookup)
    unordered_map<string, int> fastCount;
    for (const string& word : words) {
        fastCount[word]++;
    }
    
    cout << "\\nWord frequency (unordered_map):" << endl;
    for (const auto& pair : fastCount) {
        cout << pair.first << ": " << pair.second << endl;
    }
    
    // Advanced map operations
    cout << "\\nAdvanced map operations:" << endl;
    
    // Search operations
    string target = "banana";
    auto it = wordCount.find(target);
    if (it != wordCount.end()) {
        cout << "Found " << target << ", count: " << it->second << endl;
    }
    
    // Range search
    auto lower = wordCount.lower_bound("b");
    auto upper = wordCount.upper_bound("c");
    
    cout << "Words starting with 'b' or 'c':" << endl;
    for (auto it = lower; it != upper; ++it) {
        cout << it->first << ": " << it->second << endl;
    }
    
    return 0;
}`}
    explanation="map is based on red-black tree, keeps keys ordered, search O(log n); unordered_map is based on hash table, average search O(1). Choose based on requirements in competitive programming."
    output={`Word frequency (map - ordered):
apple: 3
banana: 2
cherry: 1

Word frequency (unordered_map):
cherry: 1
banana: 2
apple: 3

Advanced map operations:
Found banana, count: 2
Words starting with 'b' or 'c':
banana: 2
cherry: 1`}
  />

  <h2>pair and tuple - Composite Data Types</h2>
  
  <CodeExample 
    client:load
    title="pair and tuple Applications in Competitive Programming"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
using namespace std;

int main() {
    // pair application - coordinate point sorting
    vector<pair<int, int>> points = {{3, 2}, {1, 4}, {2, 1}, {1, 2}};
    
    cout << "Original point coordinates:" << endl;
    for (const auto& p : points) {
        cout << "(" << p.first << ", " << p.second << ") ";
    }
    cout << endl;
    
    // Sort by x coordinate, then by y coordinate when x is same
    sort(points.begin(), points.end());
    
    cout << "Points after sorting:" << endl;
    for (const auto& p : points) {
        cout << "(" << p.first << ", " << p.second << ") ";
    }
    cout << endl;
    
    // Custom sorting - sort by distance from origin
    sort(points.begin(), points.end(), [](const pair<int,int>& a, const pair<int,int>& b) {
        return a.first*a.first + a.second*a.second < b.first*b.first + b.second*b.second;
    });
    
    cout << "Sorted by distance from origin:" << endl;
    for (const auto& p : points) {
        cout << "(" << p.first << ", " << p.second << ") ";
    }
    cout << endl;
    
    // tuple application - student score management
    vector<tuple<string, int, double>> students = {
        {"Alice", 20, 85.5},
        {"Bob", 19, 92.0},
        {"Charlie", 20, 78.5},
        {"David", 19, 88.0}
    };
    
    cout << "\\nStudent information (name, age, score):" << endl;
    for (const auto& student : students) {
        cout << get<0>(student) << " " << get<1>(student) << " years old " << get<2>(student) << " points" << endl;
    }
    
    // Sort by score in descending order
    sort(students.begin(), students.end(), [](const auto& a, const auto& b) {
        return get<2>(a) > get<2>(b);  // Sort by score in descending order
    });
    
    cout << "\\nSorted by score:" << endl;
    for (const auto& student : students) {
        auto [name, age, score] = student;  // C++17 structured binding
        cout << name << " " << age << " years old " << score << " points" << endl;
    }
    
    return 0;
}`}
    explanation="pair is used for two-element combinations and supports comparison operations; tuple can store multiple elements of different types, accessed using get<>."
    output={`Original point coordinates:
(3, 2) (1, 4) (2, 1) (1, 2) 
Points after sorting:
(1, 2) (1, 4) (2, 1) (3, 2) 
Sorted by distance from origin:
(1, 2) (2, 1) (1, 4) (3, 2) 

Student information (name, age, score):
Alice 20 years old 85.5 points
Bob 19 years old 92 points
Charlie 20 years old 78.5 points
David 19 years old 88 points

Sorted by score:
Bob 19 years old 92 points
David 19 years old 88 points
Alice 20 years old 85.5 points
Charlie 20 years old 78.5 points`}
  />

  <h2>deque - Double-Ended Queue</h2>
  
  <CodeExample 
    client:load
    title="deque Characteristics and Application Scenarios"
    code={`#include <iostream>
#include <deque>
#include <algorithm>
using namespace std;

int main() {
    deque<int> dq;
    
    // Double-end insertion
    dq.push_back(3);
    dq.push_front(1);
    dq.push_back(4);
    dq.push_front(0);
    
    cout << "Double-end insertion after: ";
    for (int x : dq) cout << x << " ";
    cout << endl;
    
    // Random access
    cout << "dq[1] = " << dq[1] << endl;
    cout << "dq.at(2) = " << dq.at(2) << endl;
    
    // Insert element in the middle
    auto it = dq.begin() + 2;
    dq.insert(it, 2);
    
    cout << "Insert 2 at position 2 after: ";
    for (int x : dq) cout << x << " ";
    cout << endl;
    
    // Double-end deletion
    dq.pop_front();
    dq.pop_back();
    
    cout << "Double-end deletion after: ";
    for (int x : dq) cout << x << " ";
    cout << endl;
    
    // deque advantage: sliding window maximum value problem
    cout << "\\nSliding window application example:" << endl;
    deque<int> window;
    vector<int> arr = {1, 3, 2, 5, 8, 7, 4, 6};
    int k = 3;  // Window size
    
    cout << "Array: ";
    for (int x : arr) cout << x << " ";
    cout << "\\nWindow size: " << k << endl;
    
    for (int i = 0; i < k; i++) {
        window.push_back(arr[i]);
    }
    sort(window.begin(), window.end());
    
    cout << "Sliding window content:" << endl;
    for (int i = 0; i <= arr.size() - k; i++) {
        if (i > 0) {
            // Remove leftmost element of the window
            auto pos = find(window.begin(), window.end(), arr[i-1]);
            window.erase(pos);
            
            // Add new element and keep sorted
            auto insert_pos = lower_bound(window.begin(), window.end(), arr[i+k-1]);
            window.insert(insert_pos, arr[i+k-1]);
        }
        
        cout << "Window[" << i << "," << i+k-1 << "]: ";
        for (int x : window) cout << x << " ";
        cout << "Maximum value: " << window.back() << endl;
    }
    
    return 0;
}`}
    explanation="deque (double-ended queue) supports O(1) insertion/deletion at both ends and O(1) random access in the middle. It's more efficient than vector when frequent operations are needed at both ends, often used for sliding window problems."
    output={`Double-end insertion after: 0 1 3 4 
dq[1] = 1
dq.at(2) = 3
Insert 2 at position 2 after: 0 1 2 3 4 
Double-end deletion after: 1 2 3 

Sliding window application example:
Array: 1 3 2 5 8 7 4 6 
Window size: 3
Sliding window content:
Window[0,2]: 1 2 3  Maximum value: 3
Window[1,3]: 2 3 5  Maximum value: 5
Window[2,4]: 2 5 8  Maximum value: 8
Window[3,5]: 5 7 8  Maximum value: 8
Window[4,6]: 4 7 8  Maximum value: 8
Window[5,7]: 4 6 7  Maximum value: 7`}
  />

  <h2>STL Algorithms and Iterators</h2>
  
  <CodeExample 
    client:load
    title="STL Algorithms in Competitive Programming"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iterator>
using namespace std;

int main() {
    vector<int> nums = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
    
    cout << "Original array: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    // Sort
    sort(nums.begin(), nums.end());
    cout << "Sorted array: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    // Remove duplicates
    auto last = unique(nums.begin(), nums.end());
    nums.erase(last, nums.end());
    cout << "After removing duplicates: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    // Binary search
    int target = 5;
    bool found = binary_search(nums.begin(), nums.end(), target);
    cout << "Found " << target << ": " << (found ? "Yes" : "No") << endl;
    
    // Aggregate algorithms
    vector<int> data = {1, 2, 3, 4, 5};
    int sum = accumulate(data.begin(), data.end(), 0);
    int product = accumulate(data.begin(), data.end(), 1, multiplies<int>());
    
    cout << "\\nArray [1,2,3,4,5]:" << endl;
    cout << "Sum: " << sum << endl;
    cout << "Product: " << product << endl;
    
    // Generate and transform
    vector<int> squares(5);
    iota(squares.begin(), squares.end(), 1);  // Generate 1,2,3,4,5
    transform(squares.begin(), squares.end(), squares.begin(), 
              [](int x) { return x * x; });
    
    cout << "Squares: ";
    for (int x : squares) cout << x << " ";
    cout << endl;
    
    // Conditional operations
    vector<int> test = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Count even numbers
    int evenCount = count_if(test.begin(), test.end(), [](int x) { return x % 2 == 0; });
    cout << "\\nEven number count: " << evenCount << endl;
    
    // Find first element greater than 5
    auto it = find_if(test.begin(), test.end(), [](int x) { return x > 5; });
    if (it != test.end()) {
        cout << "First element greater than 5: " << *it << " (Position: " << distance(test.begin(), it) << ")" << endl;
    }
    
    // Partition: Move even numbers to front, odd numbers to back
    auto pivot = partition(test.begin(), test.end(), [](int x) { return x % 2 == 0; });
    cout << "After partitioning (even numbers first): ";
    for (int x : test) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="STL algorithm library provides a variety of algorithm functions, including sorting, searching, counting, transforming, etc. Using these algorithms can significantly simplify code implementation and improve development efficiency."
    output={`Original array: 3 1 4 1 5 9 2 6 5 3 
Sorted array: 1 1 2 3 3 4 5 5 6 9 
After removing duplicates: 1 2 3 4 5 6 9 
Found 5: Yes

Array [1,2,3,4,5]:
Sum: 15
Product: 120
Squares: 1 4 9 16 25 

Even number count: 5
First element greater than 5: 6 (Position: 5)
After partitioning (even numbers first): 2 4 6 8 10 1 3 5 7 9`}
  />

  <div class="navigation">
    <a href="/4-competitive/data-structures" class="prev">← Data Structures</a>
    <a href="/4-competitive/hash-tables" class="next">Hash Tables →</a>
  </div>
</Layout>

<style>
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>