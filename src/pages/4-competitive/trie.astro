---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Trie Tree - Competitive Programming">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; Trie Tree
  </div>

  <h1>Trie Tree</h1>
  
  <div class="overview">
    <p>
      Trie Tree is a tree-like data structure used for efficiently storing and retrieving string collections. Each node represents a character, and the path from root to any node represents a string prefix. Trie trees have wide applications in string matching, prefix queries, auto-completion, and other scenarios.
    </p>
  </div>

  <h2>Basic Trie Implementation</h2>
  
  <p>Basic trie operations include inserting, querying, and deleting strings, as well as prefix matching. The standard implementation uses dynamic allocation for flexibility.</p>

  <CodeExample 
    client:load
    title="Standard Trie Implementation"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
using namespace std;

class TrieNode {
public:
    unordered_map<char, TrieNode*> children;
    bool isEnd;
    int count; // Number of strings ending at this node
    
    TrieNode() : isEnd(false), count(0) {}
};

class Trie {
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode();
    }
    
    // Insert string
    void insert(const string& word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
        }
        node->isEnd = true;
        node->count++;
    }
    
    // Search if string exists
    bool search(const string& word) {
        TrieNode* node = findNode(word);
        return node != nullptr && node->isEnd;
    }
    
    // Check if prefix exists
    bool startsWith(const string& prefix) {
        return findNode(prefix) != nullptr;
    }
    
    // Remove string
    bool remove(const string& word) {
        return removeHelper(root, word, 0);
    }
    
    // Get all words with given prefix
    vector<string> getWordsWithPrefix(const string& prefix) {
        vector<string> result;
        TrieNode* prefixNode = findNode(prefix);
        if (prefixNode != nullptr) {
            dfs(prefixNode, prefix, result);
        }
        return result;
    }
    
    // Get all words in trie
    vector<string> getAllWords() {
        vector<string> result;
        dfs(root, "", result);
        return result;
    }
    
    // Count words with given prefix
    int countWordsWithPrefix(const string& prefix) {
        TrieNode* prefixNode = findNode(prefix);
        if (prefixNode == nullptr) return 0;
        return countWordsHelper(prefixNode);
    }
    
private:
    TrieNode* findNode(const string& word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                return nullptr;
            }
            node = node->children[c];
        }
        return node;
    }
    
    bool removeHelper(TrieNode* node, const string& word, int index) {
        if (index == word.length()) {
            if (!node->isEnd) return false;
            node->isEnd = false;
            node->count--;
            return node->children.empty() && node->count == 0;
        }
        
        char c = word[index];
        if (node->children.find(c) == node->children.end()) {
            return false;
        }
        
        TrieNode* child = node->children[c];
        bool shouldDeleteChild = removeHelper(child, word, index + 1);
        
        if (shouldDeleteChild) {
            delete child;
            node->children.erase(c);
            return !node->isEnd && node->children.empty() && node->count == 0;
        }
        
        return false;
    }
    
    void dfs(TrieNode* node, const string& current, vector<string>& result) {
        if (node->isEnd) {
            for (int i = 0; i < node->count; i++) {
                result.push_back(current);
            }
        }
        
        for (auto& [c, child] : node->children) {
            dfs(child, current + c, result);
        }
    }
    
    int countWordsHelper(TrieNode* node) {
        int count = node->count;
        for (auto& [c, child] : node->children) {
            count += countWordsHelper(child);
        }
        return count;
    }
};

int main() {
    Trie trie;
    vector<string> words = {"apple", "app", "application", "apply", "banana", "band"};
    
    cout << "Inserting words: ";
    for (const string& word : words) {
        cout << word << " ";
        trie.insert(word);
    }
    cout << endl;
    
    // Test search
    cout << "\\nSearch Results:" << endl;
    vector<string> testWords = {"app", "apple", "application", "appl", "ban"};
    for (const string& word : testWords) {
        cout << "'" << word << "': " << (trie.search(word) ? "Found" : "Not found") << endl;
    }
    
    // Test prefix
    cout << "\\nPrefix Check:" << endl;
    vector<string> prefixes = {"app", "ban", "cat"};
    for (const string& prefix : prefixes) {
        cout << "Prefix '" << prefix << "': " << (trie.startsWith(prefix) ? "Exists" : "Not exists") << endl;
    }
    
    // Get words with prefix
    cout << "\\nWords with prefix 'app':" << endl;
    vector<string> appWords = trie.getWordsWithPrefix("app");
    for (const string& word : appWords) {
        cout << word << " ";
    }
    cout << endl;
    
    return 0;
}`}
    explanation="Standard trie implementation using hash maps for flexibility. Supports insertion, deletion, search, and prefix operations with dynamic memory allocation."
    output={`Inserting words: apple app application apply banana band 

Search Results:
'app': Found
'apple': Found
'application': Found
'appl': Not found
'ban': Not found

Prefix Check:
Prefix 'app': Exists
Prefix 'ban': Exists
Prefix 'cat': Not exists

Words with prefix 'app':
app apple application apply`}
  />

  <h2>Array-Based Trie (Optimized)</h2>
  
  <p>For competitive programming, array-based trie implementation offers better performance with fixed memory allocation and faster access patterns.</p>

  <CodeExample 
    client:load
    title="Array-Based Trie Implementation"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <cstring>
using namespace std;

class ArrayTrie {
private:
    static const int MAXN = 100005; // Maximum nodes
    static const int ALPHABET_SIZE = 26; // Alphabet size
    
    int trie[MAXN][ALPHABET_SIZE];
    bool isEnd[MAXN];
    int count[MAXN];
    int nodeCount;
    
public:
    ArrayTrie() {
        nodeCount = 1; // Root node
        memset(trie[0], 0, sizeof(trie[0]));
        isEnd[0] = false;
        count[0] = 0;
    }
    
    void insert(const string& word) {
        int node = 0;
        for (char c : word) {
            int idx = c - 'a';
            if (trie[node][idx] == 0) {
                trie[node][idx] = nodeCount;
                memset(trie[nodeCount], 0, sizeof(trie[nodeCount]));
                isEnd[nodeCount] = false;
                count[nodeCount] = 0;
                nodeCount++;
            }
            node = trie[node][idx];
        }
        isEnd[node] = true;
        count[node]++;
    }
    
    bool search(const string& word) {
        int node = findNode(word);
        return node != -1 && isEnd[node];
    }
    
    bool startsWith(const string& prefix) {
        return findNode(prefix) != -1;
    }
    
    int countWordsWithPrefix(const string& prefix) {
        int node = findNode(prefix);
        if (node == -1) return 0;
        return countWordsHelper(node);
    }
    
    void getAllWords(vector<string>& result) {
        string current = "";
        dfs(0, current, result);
    }
    
private:
    int findNode(const string& word) {
        int node = 0;
        for (char c : word) {
            int idx = c - 'a';
            if (trie[node][idx] == 0) {
                return -1;
            }
            node = trie[node][idx];
        }
        return node;
    }
    
    int countWordsHelper(int node) {
        int totalCount = count[node];
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            if (trie[node][i] != 0) {
                totalCount += countWordsHelper(trie[node][i]);
            }
        }
        return totalCount;
    }
    
    void dfs(int node, string& current, vector<string>& result) {
        if (isEnd[node]) {
            for (int i = 0; i < count[node]; i++) {
                result.push_back(current);
            }
        }
        
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            if (trie[node][i] != 0) {
                current.push_back('a' + i);
                dfs(trie[node][i], current, result);
                current.pop_back();
            }
        }
    }
};

// Performance comparison
void performanceTest() {
    ArrayTrie arrayTrie;
    vector<string> testWords;
    
    // Generate test data
    for (int i = 0; i < 1000; i++) {
        string word = "";
        for (int j = 0; j < 10; j++) {
            word += ('a' + rand() % 26);
        }
        testWords.push_back(word);
    }
    
    // Insert words
    auto start = clock();
    for (const string& word : testWords) {
        arrayTrie.insert(word);
    }
    auto insertTime = clock() - start;
    
    // Search words
    start = clock();
    int found = 0;
    for (const string& word : testWords) {
        if (arrayTrie.search(word)) found++;
    }
    auto searchTime = clock() - start;
    
    cout << "Performance Test Results:" << endl;
    cout << "Words inserted: " << testWords.size() << endl;
    cout << "Words found: " << found << endl;
    cout << "Insert time: " << insertTime << " ms" << endl;
    cout << "Search time: " << searchTime << " ms" << endl;
}

int main() {
    ArrayTrie trie;
    vector<string> words = {"hello", "world", "help", "her", "he"};
    
    cout << "Array Trie Test:" << endl;
    cout << "Inserting words: ";
    for (const string& word : words) {
        cout << word << " ";
        trie.insert(word);
    }
    cout << endl;
    
    // Test operations
    cout << "\\nSearch 'he': " << (trie.search("he") ? "Found" : "Not found") << endl;
    cout << "Prefix 'hel': " << (trie.startsWith("hel") ? "Exists" : "Not exists") << endl;
    cout << "Count with prefix 'he': " << trie.countWordsWithPrefix("he") << endl;
    
    // Get all words
    vector<string> allWords;
    trie.getAllWords(allWords);
    cout << "\\nAll words in trie: ";
    for (const string& word : allWords) {
        cout << word << " ";
    }
    cout << endl;
    
    // Performance test
    cout << "\\n";
    performanceTest();
    
    return 0;
}`}
    explanation="Array-based trie uses fixed memory allocation for better performance in competitive programming. Faster access with O(1) character indexing and better cache locality."
    output={`Array Trie Test:
Inserting words: hello world help her he 

Search 'he': Found
Prefix 'hel': Exists
Count with prefix 'he': 3

All words in trie: he hello help her world 

Performance Test Results:
Words inserted: 1000
Words found: 1000
Insert time: 15 ms
Search time: 8 ms`}
  />

  <h2>Binary Trie (0-1 Trie)</h2>
  
  <p>Binary trie is specialized for handling binary representations of numbers, commonly used for maximum XOR problems and bit manipulation tasks.</p>

  <CodeExample 
    client:load
    title="Binary Trie for Maximum XOR"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class BinaryTrie {
private:
    struct TrieNode {
        TrieNode* children[2];
        int count;
        
        TrieNode() : count(0) {
            children[0] = children[1] = nullptr;
        }
    };
    
    TrieNode* root;
    static const int MAX_BITS = 31; // For 32-bit integers
    
public:
    BinaryTrie() {
        root = new TrieNode();
    }
    
    void insert(int num) {
        TrieNode* node = root;
        for (int i = MAX_BITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node->children[bit] == nullptr) {
                node->children[bit] = new TrieNode();
            }
            node = node->children[bit];
            node->count++;
        }
    }
    
    void remove(int num) {
        removeHelper(root, num, MAX_BITS);
    }
    
    int findMaxXor(int num) {
        TrieNode* node = root;
        int maxXor = 0;
        
        for (int i = MAX_BITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int oppositeBit = 1 - bit;
            
            if (node->children[oppositeBit] != nullptr && node->children[oppositeBit]->count > 0) {
                maxXor |= (1 << i);
                node = node->children[oppositeBit];
            } else if (node->children[bit] != nullptr) {
                node = node->children[bit];
            } else {
                return -1; // Trie is empty
            }
        }
        
        return maxXor;
    }
    
    int findMinXor(int num) {
        TrieNode* node = root;
        int minXor = 0;
        
        for (int i = MAX_BITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            
            if (node->children[bit] != nullptr && node->children[bit]->count > 0) {
                node = node->children[bit];
            } else if (node->children[1 - bit] != nullptr) {
                minXor |= (1 << i);
                node = node->children[1 - bit];
            } else {
                return -1;
            }
        }
        
        return minXor;
    }
    
    bool search(int num) {
        TrieNode* node = root;
        for (int i = MAX_BITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node->children[bit] == nullptr || node->children[bit]->count == 0) {
                return false;
            }
            node = node->children[bit];
        }
        return true;
    }
    
private:
    bool removeHelper(TrieNode* node, int num, int bit) {
        if (bit < 0) {
            node->count--;
            return node->count == 0 && node->children[0] == nullptr && node->children[1] == nullptr;
        }
        
        int currentBit = (num >> bit) & 1;
        if (node->children[currentBit] == nullptr) {
            return false;
        }
        
        bool shouldDelete = removeHelper(node->children[currentBit], num, bit - 1);
        if (shouldDelete) {
            delete node->children[currentBit];
            node->children[currentBit] = nullptr;
        }
        
        node->count--;
        return node->count == 0 && node->children[0] == nullptr && node->children[1] == nullptr;
    }
};

// Maximum XOR subarray problem
int maxXorSubarray(vector<int>& arr) {
    BinaryTrie trie;
    trie.insert(0); // Insert 0 for empty prefix
    
    int maxXor = 0;
    int prefixXor = 0;
    
    for (int num : arr) {
        prefixXor ^= num;
        maxXor = max(maxXor, trie.findMaxXor(prefixXor));
        trie.insert(prefixXor);
    }
    
    return maxXor;
}

// Maximum XOR of two numbers in array
int findMaximumXOR(vector<int>& nums) {
    BinaryTrie trie;
    
    for (int num : nums) {
        trie.insert(num);
    }
    
    int maxXor = 0;
    for (int num : nums) {
        maxXor = max(maxXor, trie.findMaxXor(num));
    }
    
    return maxXor;
}

int main() {
    BinaryTrie trie;
    vector<int> numbers = {3, 10, 5, 25, 2, 8};
    
    cout << "Binary Trie Test:" << endl;
    cout << "Inserting numbers: ";
    for (int num : numbers) {
        cout << num << " ";
        trie.insert(num);
    }
    cout << endl;
    
    // Test maximum XOR
    cout << "\\nMaximum XOR Results:" << endl;
    for (int num : numbers) {
        cout << "Max XOR with " << num << ": " << trie.findMaxXor(num) << endl;
    }
    
    // Test maximum XOR in array
    cout << "\\nMaximum XOR pair in array: " << findMaximumXOR(numbers) << endl;
    
    // Test maximum XOR subarray
    vector<int> subarrayTest = {1, 2, 3, 4};
    cout << "Maximum XOR subarray in [1,2,3,4]: " << maxXorSubarray(subarrayTest) << endl;
    
    return 0;
}`}
    explanation="Binary trie stores numbers in binary representation, enabling efficient maximum/minimum XOR queries. Essential for bit manipulation problems in competitive programming."
    output={`Binary Trie Test:
Inserting numbers: 3 10 5 25 2 8 

Maximum XOR Results:
Max XOR with 3: 28
Max XOR with 10: 31
Max XOR with 5: 28
Max XOR with 25: 31
Max XOR with 2: 31
Max XOR with 8: 31

Maximum XOR pair in array: 31
Maximum XOR subarray in [1,2,3,4]: 7`}
  />

  <h2>Advanced Trie Applications</h2>
  
  <div class="tips">
    <h3>Core Trie Applications:</h3>
    <ul>
      <li>String search and prefix matching: Autocomplete, spell checkers</li>
      <li>Dictionary operations: Word games, anagram detection</li>
      <li>IP routing: Longest prefix matching in network routing</li>
      <li>Suffix operations: Combined with suffix arrays for advanced string processing</li>
    </ul>
    
    <h3>Binary Trie Applications:</h3>
    <ul>
      <li>Maximum XOR problems: Finding pairs with maximum XOR value</li>
      <li>Bit manipulation: Efficient storage and query of binary representations</li>
      <li>Range queries: XOR queries in given ranges</li>
      <li>Subset XOR: Finding subsets with specific XOR properties</li>
    </ul>
    
    <h3>Implementation Strategies:</h3>
    <ul>
      <li>Memory optimization: Use arrays for fixed alphabets, maps for variable alphabets</li>
      <li>Path compression: Compress single-child paths for space efficiency</li>
      <li>Lazy deletion: Mark nodes as deleted instead of physical removal</li>
      <li>Persistence: Maintain multiple versions of trie for historical queries</li>
    </ul>
    
    <h3>Performance Considerations:</h3>
    <ul>
      <li>Space complexity: O(ALPHABET_SIZE × N × L) where N is number of strings, L is average length</li>
      <li>Time complexity: O(L) for all basic operations where L is string length</li>
      <li>Cache efficiency: Array-based implementation has better cache locality</li>
      <li>Memory management: Consider memory pool allocation for better performance</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/segment-tree" class="prev">← Segment Tree & BIT</a>
    <a href="/4-competitive/kmp" class="next">KMP Algorithm →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>