---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="字典树">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/4-competitive">Competitive Programming</a> &gt; 字典树
  </div>

  <h1>字典树（Trie Tree）</h1>
  
  <div class="overview">
    <p>
      字典树（Trie Tree）是一种树形数据结构，用于高效地存储和检索字符串集合。每个节点代表一个字符，从根到任意节点的路径代表一个字符串前缀。字典树在字符串匹配、前缀查询、自动补全等场景中有广泛应用。
    </p>
  </div>

  <h2>字典树基础实现</h2>
  
  <p>字典树的基本操作包括插入、查询、删除字符串，以及前缀匹配。</p>

  <CodeExample 
    client:load
    title="标准字典树实现"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
using namespace std;

class TrieNode {
public:
    unordered_map<char, TrieNode*> children;
    bool isEnd;
    int count; // 以当前节点为结尾的字符串数量
    
    TrieNode() : isEnd(false), count(0) {}
};

class Trie {
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode();
    }
    
    // 插入字符串
    void insert(const string& word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
        }
        node->isEnd = true;
        node->count++;
    }
    
    // 查询字符串是否存在
    bool search(const string& word) {
        TrieNode* node = findNode(word);
        return node != nullptr && node->isEnd;
    }
    
    // 查询前缀是否存在
    bool startsWith(const string& prefix) {
        return findNode(prefix) != nullptr;
    }
    
    // 删除字符串
    bool remove(const string& word) {
        return removeHelper(root, word, 0);
    }
    
    // 获取所有以prefix为前缀的字符串
    vector<string> getWordsWithPrefix(const string& prefix) {
        vector<string> result;
        TrieNode* prefixNode = findNode(prefix);
        if (prefixNode != nullptr) {
            dfs(prefixNode, prefix, result);
        }
        return result;
    }
    
    // 获取字典树中的所有字符串
    vector<string> getAllWords() {
        vector<string> result;
        dfs(root, "", result);
        return result;
    }
    
    // 计算以prefix为前缀的字符串数量
    int countWordsWithPrefix(const string& prefix) {
        TrieNode* prefixNode = findNode(prefix);
        if (prefixNode == nullptr) return 0;
        return countWordsHelper(prefixNode);
    }
    
private:
    TrieNode* findNode(const string& word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                return nullptr;
            }
            node = node->children[c];
        }
        return node;
    }
    
    bool removeHelper(TrieNode* node, const string& word, int index) {
        if (index == word.length()) {
            if (!node->isEnd) return false;
            node->isEnd = false;
            node->count--;
            return node->children.empty() && node->count == 0;
        }
        
        char c = word[index];
        if (node->children.find(c) == node->children.end()) {
            return false;
        }
        
        TrieNode* child = node->children[c];
        bool shouldDeleteChild = removeHelper(child, word, index + 1);
        
        if (shouldDeleteChild) {
            delete child;
            node->children.erase(c);
            return !node->isEnd && node->children.empty() && node->count == 0;
        }
        
        return false;
    }
    
    void dfs(TrieNode* node, const string& current, vector<string>& result) {
        if (node->isEnd) {
            for (int i = 0; i < node->count; i++) {
                result.push_back(current);
            }
        }
        
        for (auto& [c, child] : node->children) {
            dfs(child, current + c, result);
        }
    }
    
    int countWordsHelper(TrieNode* node) {
        int count = node->count;
        for (auto& [c, child] : node->children) {
            count += countWordsHelper(child);
        }
        return count;
    }
};

// 数组实现的字典树（更高效）
class ArrayTrie {
private:
    static const int MAXN = 100005; // 最大节点数
    static const int ALPHABET_SIZE = 26; // 字母表大小
    
    int trie[MAXN][ALPHABET_SIZE];
    bool isEnd[MAXN];
    int count[MAXN];
    int nodeCount;
    
public:
    ArrayTrie() {
        nodeCount = 1; // 根节点
        memset(trie[0], 0, sizeof(trie[0]));
        isEnd[0] = false;
        count[0] = 0;
    }
    
    void insert(const string& word) {
        int node = 0;
        for (char c : word) {
            int idx = c - 'a';
            if (trie[node][idx] == 0) {
                trie[node][idx] = nodeCount;
                memset(trie[nodeCount], 0, sizeof(trie[nodeCount]));
                isEnd[nodeCount] = false;
                count[nodeCount] = 0;
                nodeCount++;
            }
            node = trie[node][idx];
        }
        isEnd[node] = true;
        count[node]++;
    }
    
    bool search(const string& word) {
        int node = findNode(word);
        return node != -1 && isEnd[node];
    }
    
    bool startsWith(const string& prefix) {
        return findNode(prefix) != -1;
    }
    
    int countPrefix(const string& prefix) {
        int node = findNode(prefix);
        if (node == -1) return 0;
        return countWordsHelper(node);
    }
    
private:
    int findNode(const string& word) {
        int node = 0;
        for (char c : word) {
            int idx = c - 'a';
            if (trie[node][idx] == 0) {
                return -1;
            }
            node = trie[node][idx];
        }
        return node;
    }
    
    int countWordsHelper(int node) {
        int cnt = count[node];
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            if (trie[node][i] != 0) {
                cnt += countWordsHelper(trie[node][i]);
            }
        }
        return cnt;
    }
};

int main() {
    // 测试标准字典树
    Trie trie;
    vector<string> words = {"apple", "app", "apricot", "banana", "band", "bandana"};
    
    cout << "插入单词: ";
    for (const string& word : words) {
        cout << word << " ";
        trie.insert(word);
    }
    cout << endl;
    
    // 测试查询
    cout << "\\n查询测试:" << endl;
    cout << "search('app'): " << (trie.search("app") ? "found" : "not found") << endl;
    cout << "search('apple'): " << (trie.search("apple") ? "found" : "not found") << endl;
    cout << "search('application'): " << (trie.search("application") ? "found" : "not found") << endl;
    
    cout << "startsWith('app'): " << (trie.startsWith("app") ? "yes" : "no") << endl;
    cout << "startsWith('ban'): " << (trie.startsWith("ban") ? "yes" : "no") << endl;
    cout << "startsWith('cat'): " << (trie.startsWith("cat") ? "yes" : "no") << endl;
    
    // 测试前缀匹配
    cout << "\\n前缀 'app' 的所有单词: ";
    vector<string> appWords = trie.getWordsWithPrefix("app");
    for (const string& word : appWords) {
        cout << word << " ";
    }
    cout << endl;
    
    cout << "前缀 'ban' 的所有单词: ";
    vector<string> banWords = trie.getWordsWithPrefix("ban");
    for (const string& word : banWords) {
        cout << word << " ";
    }
    cout << endl;
    
    // 测试计数
    cout << "\\n以 'app' 为前缀的单词数量: " << trie.countWordsWithPrefix("app") << endl;
    cout << "以 'ban' 为前缀的单词数量: " << trie.countWordsWithPrefix("ban") << endl;
    
    // 测试数组实现
    cout << "\\n测试数组实现的字典树:" << endl;
    ArrayTrie arrayTrie;
    for (const string& word : words) {
        arrayTrie.insert(word);
    }
    
    cout << "ArrayTrie search('app'): " << (arrayTrie.search("app") ? "found" : "not found") << endl;
    cout << "ArrayTrie countPrefix('app'): " << arrayTrie.countPrefix("app") << endl;
    
    return 0;
}`}
    explanation="字典树通过树形结构存储字符串，每个节点对应一个字符。支持高效的插入、查询、前缀匹配操作，时间复杂度为O(字符串长度)。数组实现比指针实现更快。"
    output={`插入单词: apple app apricot banana band bandana 

查询测试:
search('app'): found
search('apple'): found
search('application'): not found
startsWith('app'): yes
startsWith('ban'): yes
startsWith('cat'): no

前缀 'app' 的所有单词: app apple apricot 
前缘 'ban' 的所有单词: banana band bandana 

以 'app' 为前缀的单词数量: 3
以 'ban' 为前缀的单词数量: 3

测试数组实现的字典树:
ArrayTrie search('app'): found
ArrayTrie countPrefix('app'): 3`}
  />

  <h2>01字典树（二进制字典树）</h2>
  
  <p>01字典树专门处理二进制数据，常用于求解异或相关问题，如最大异或值、异或第k小等。</p>

  <CodeExample 
    client:load
    title="01字典树 - 最大异或值问题"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class BinaryTrie {
private:
    struct TrieNode {
        TrieNode* children[2];
        int count;
        
        TrieNode() : count(0) {
            children[0] = children[1] = nullptr;
        }
    };
    
    TrieNode* root;
    static const int MAXBITS = 31; // 32位整数
    
public:
    BinaryTrie() {
        root = new TrieNode();
    }
    
    // 插入一个数
    void insert(int num) {
        TrieNode* node = root;
        for (int i = MAXBITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node->children[bit] == nullptr) {
                node->children[bit] = new TrieNode();
            }
            node = node->children[bit];
            node->count++;
        }
    }
    
    // 删除一个数
    void remove(int num) {
        removeHelper(root, num, MAXBITS);
    }
    
    // 查询与num异或的最大值
    int queryMaxXor(int num) {
        TrieNode* node = root;
        int result = 0;
        
        for (int i = MAXBITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int oppositeBit = 1 - bit;
            
            // 优先选择相反的位以最大化异或值
            if (node->children[oppositeBit] != nullptr && node->children[oppositeBit]->count > 0) {
                result |= (1 << i);
                node = node->children[oppositeBit];
            } else if (node->children[bit] != nullptr && node->children[bit]->count > 0) {
                node = node->children[bit];
            } else {
                // 无法继续，返回当前结果
                break;
            }
        }
        
        return result;
    }
    
    // 查询与num异或的最小值
    int queryMinXor(int num) {
        TrieNode* node = root;
        int result = 0;
        
        for (int i = MAXBITS; i >= 0; i--) {
            int bit = (num >> i) & 1;
            
            // 优先选择相同的位以最小化异或值
            if (node->children[bit] != nullptr && node->children[bit]->count > 0) {
                node = node->children[bit];
            } else if (node->children[1 - bit] != nullptr && node->children[1 - bit]->count > 0) {
                result |= (1 << i);
                node = node->children[1 - bit];
            } else {
                break;
            }
        }
        
        return result;
    }
    
    // 查询字典树中数的数量
    int size() {
        return root->count;
    }
    
private:
    bool removeHelper(TrieNode* node, int num, int bit) {
        if (bit < 0) {
            node->count--;
            return node->count == 0 && node->children[0] == nullptr && node->children[1] == nullptr;
        }
        
        int currentBit = (num >> bit) & 1;
        if (node->children[currentBit] == nullptr) {
            return false;
        }
        
        bool shouldDelete = removeHelper(node->children[currentBit], num, bit - 1);
        if (shouldDelete) {
            delete node->children[currentBit];
            node->children[currentBit] = nullptr;
        }
        
        node->count--;
        return node->count == 0 && node->children[0] == nullptr && node->children[1] == nullptr;
    }
};

// 解决最大子数组异或值问题
class MaxSubArrayXOR {
private:
    BinaryTrie trie;
    
public:
    int findMaxXorSubarray(vector<int>& arr) {
        int n = arr.size();
        int maxXor = 0;
        int prefixXor = 0;
        
        trie.insert(0); // 插入初始前缀异或值0
        
        for (int i = 0; i < n; i++) {
            prefixXor ^= arr[i];
            
            // 查询当前前缀异或值与之前前缀异或值的最大异或值
            maxXor = max(maxXor, trie.queryMaxXor(prefixXor));
            
            // 插入当前前缀异或值
            trie.insert(prefixXor);
        }
        
        return maxXor;
    }
};

// 可持久化01字典树 - 支持历史版本查询
class PersistentBinaryTrie {
private:
    struct TrieNode {
        TrieNode* children[2];
        int count;
        
        TrieNode() : count(0) {
            children[0] = children[1] = nullptr;
        }
        
        TrieNode(TrieNode* other) : count(other->count) {
            children[0] = other->children[0];
            children[1] = other->children[1];
        }
    };
    
    vector<TrieNode*> roots;
    static const int MAXBITS = 31;
    
    TrieNode* insert(TrieNode* node, int num, int bit) {
        TrieNode* newNode = new TrieNode(node);
        newNode->count++;
        
        if (bit < 0) return newNode;
        
        int currentBit = (num >> bit) & 1;
        if (newNode->children[currentBit] == nullptr) {
            newNode->children[currentBit] = new TrieNode();
        }
        newNode->children[currentBit] = insert(newNode->children[currentBit], num, bit - 1);
        
        return newNode;
    }
    
    int queryMaxXor(TrieNode* node, int num, int bit) {
        if (bit < 0 || node == nullptr) return 0;
        
        int currentBit = (num >> bit) & 1;
        int oppositeBit = 1 - currentBit;
        
        if (node->children[oppositeBit] != nullptr && node->children[oppositeBit]->count > 0) {
            return (1 << bit) | queryMaxXor(node->children[oppositeBit], num, bit - 1);
        } else {
            return queryMaxXor(node->children[currentBit], num, bit - 1);
        }
    }
    
public:
    PersistentBinaryTrie() {
        roots.push_back(new TrieNode()); // 版本0：空字典树
    }
    
    void insert(int num) {
        TrieNode* newRoot = insert(roots.back(), num, MAXBITS);
        roots.push_back(newRoot);
    }
    
    int queryMaxXor(int version, int num) {
        if (version >= roots.size()) return 0;
        return queryMaxXor(roots[version], num, MAXBITS);
    }
    
    int getCurrentVersion() {
        return roots.size() - 1;
    }
};

int main() {
    // 测试01字典树基本功能
    BinaryTrie binaryTrie;
    vector<int> nums = {3, 10, 5, 25, 2, 8};
    
    cout << "插入数字: ";
    for (int num : nums) {
        cout << num << " ";
        binaryTrie.insert(num);
    }
    cout << endl;
    
    cout << "\\n异或查询测试:" << endl;
    for (int num : {3, 7, 15}) {
        cout << "与 " << num << " 异或的最大值: " << binaryTrie.queryMaxXor(num) << endl;
        cout << "与 " << num << " 异或的最小值: " << binaryTrie.queryMinXor(num) << endl;
    }
    
    // 测试最大子数组异或值
    cout << "\\n最大子数组异或值问题:" << endl;
    vector<int> arr = {1, 2, 3, 4};
    MaxSubArrayXOR maxXorSolver;
    cout << "数组 [1,2,3,4] 的最大子数组异或值: " << maxXorSolver.findMaxXorSubarray(arr) << endl;
    
    vector<int> arr2 = {8, 1, 2, 12};
    cout << "数组 [8,1,2,12] 的最大子数组异或值: " << maxXorSolver.findMaxXorSubarray(arr2) << endl;
    
    // 测试可持久化01字典树
    cout << "\\n可持久化01字典树测试:" << endl;
    PersistentBinaryTrie persistentTrie;
    
    vector<int> insertOrder = {1, 3, 6, 9};
    for (int i = 0; i < insertOrder.size(); i++) {
        persistentTrie.insert(insertOrder[i]);
        cout << "版本 " << persistentTrie.getCurrentVersion() 
             << " (插入 " << insertOrder[i] << " 后)，与5异或的最大值: "
             << persistentTrie.queryMaxXor(persistentTrie.getCurrentVersion(), 5) << endl;
    }
    
    // 查询历史版本
    cout << "查询版本2与5异或的最大值: " << persistentTrie.queryMaxXor(2, 5) << endl;
    
    return 0;
}`}
    explanation="01字典树专门处理二进制数据，从高位到低位构建。在查询最大异或值时，优先选择相反的位。可持久化版本支持历史版本查询，适用于离线查询问题。"
    output={`插入数字: 3 10 5 25 2 8

异或查询测试:
与 3 异或的最大值: 28
与 3 异或的最小值: 1
与 7 异或的最大值: 30
与 7 异或的最小值: 2
与 15 异或的最大值: 18
与 15 异或的最小值: 10

最大子数组异或值问题:
数组 [1,2,3,4] 的最大子数组异或值: 7
数组 [8,1,2,12] 的最大子数组异或值: 15

可持久化01字典树测试:
版本 1 (插入 1 后)，与5异或的最大值: 4
版本 2 (插入 3 后)，与5异或的最大值: 6
版本 3 (插入 6 后)，与5异或的最大值: 6
版本 4 (插入 9 后)，与5异或的最大值: 12
查询版本2与5异或的最大值: 6`}
  />

  <h2>字典树的高级应用</h2>
  
  <p>字典树在实际竞赛中的高级应用，包括多字符串匹配、自动补全、字符串统计等。</p>

  <CodeExample 
    client:load
    title="AC自动机 - 多模式字符串匹配"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <unordered_map>
using namespace std;

class ACAutomaton {
private:
    struct TrieNode {
        unordered_map<char, TrieNode*> children;
        TrieNode* failure;
        vector<int> patternIds; // 以当前节点结尾的模式串ID
        
        TrieNode() : failure(nullptr) {}
    };
    
    TrieNode* root;
    vector<string> patterns;
    
public:
    ACAutomaton() {
        root = new TrieNode();
    }
    
    // 添加模式串
    void addPattern(const string& pattern) {
        TrieNode* node = root;
        for (char c : pattern) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
        }
        node->patternIds.push_back(patterns.size());
        patterns.push_back(pattern);
    }
    
    // 构建失配指针
    void buildFailureFunction() {
        queue<TrieNode*> q;
        
        // 第一层节点的失配指针指向根
        for (auto& [c, child] : root->children) {
            child->failure = root;
            q.push(child);
        }
        
        while (!q.empty()) {
            TrieNode* current = q.front();
            q.pop();
            
            for (auto& [c, child] : current->children) {
                TrieNode* failure = current->failure;
                
                // 寻找最长的相同前后缀
                while (failure != nullptr && failure->children.find(c) == failure->children.end()) {
                    failure = failure->failure;
                }
                
                if (failure == nullptr) {
                    child->failure = root;
                } else {
                    child->failure = failure->children[c];
                    // 继承失配节点的模式串信息
                    for (int id : child->failure->patternIds) {
                        child->patternIds.push_back(id);
                    }
                }
                
                q.push(child);
            }
        }
    }
    
    // 在文本中搜索所有模式串的出现位置
    vector<pair<int, int>> search(const string& text) {
        vector<pair<int, int>> results; // (position, pattern_id)
        TrieNode* current = root;
        
        for (int i = 0; i < text.length(); i++) {
            char c = text[i];
            
            // 寻找下一个状态
            while (current != nullptr && current->children.find(c) == current->children.end()) {
                current = current->failure;
            }
            
            if (current == nullptr) {
                current = root;
            } else {
                current = current->children[c];
                
                // 检查是否匹配到模式串
                for (int patternId : current->patternIds) {
                    int startPos = i - patterns[patternId].length() + 1;
                    results.push_back({startPos, patternId});
                }
            }
        }
        
        return results;
    }
    
    // 获取模式串
    const vector<string>& getPatterns() const {
        return patterns;
    }
};

// 字符串集合的最长公共前缀
class LongestCommonPrefix {
private:
    struct TrieNode {
        unordered_map<char, TrieNode*> children;
        int count; // 经过当前节点的字符串数量
        
        TrieNode() : count(0) {}
    };
    
    TrieNode* root;
    
public:
    LongestCommonPrefix() {
        root = new TrieNode();
    }
    
    void insert(const string& word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
            node->count++;
        }
    }
    
    string findLCP(int totalStrings) {
        string lcp = "";
        TrieNode* node = root;
        
        while (node->children.size() == 1) {
            auto& [c, child] = *node->children.begin();
            if (child->count == totalStrings) {
                lcp += c;
                node = child;
            } else {
                break;
            }
        }
        
        return lcp;
    }
};

// 实现简单的搜索引擎自动补全
class AutoComplete {
private:
    struct TrieNode {
        unordered_map<char, TrieNode*> children;
        bool isEnd;
        int frequency; // 单词的搜索频率
        string word;
        
        TrieNode() : isEnd(false), frequency(0) {}
    };
    
    TrieNode* root;
    
    void dfs(TrieNode* node, vector<pair<string, int>>& candidates) {
        if (node->isEnd) {
            candidates.push_back({node->word, node->frequency});
        }
        
        for (auto& [c, child] : node->children) {
            dfs(child, candidates);
        }
    }
    
public:
    AutoComplete() {
        root = new TrieNode();
    }
    
    void addWord(const string& word, int frequency = 1) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            node = node->children[c];
        }
        node->isEnd = true;
        node->frequency += frequency;
        node->word = word;
    }
    
    vector<string> getSuggestions(const string& prefix, int maxSuggestions = 5) {
        TrieNode* node = root;
        
        // 找到前缀对应的节点
        for (char c : prefix) {
            if (node->children.find(c) == node->children.end()) {
                return {}; // 前缀不存在
            }
            node = node->children[c];
        }
        
        // 收集所有以该前缀开始的单词
        vector<pair<string, int>> candidates;
        dfs(node, candidates);
        
        // 按频率排序
        sort(candidates.begin(), candidates.end(), 
             [](const pair<string, int>& a, const pair<string, int>& b) {
                 return a.second > b.second;
             });
        
        vector<string> suggestions;
        for (int i = 0; i < min(maxSuggestions, (int)candidates.size()); i++) {
            suggestions.push_back(candidates[i].first);
        }
        
        return suggestions;
    }
};

int main() {
    // 测试AC自动机
    cout << "AC自动机测试:" << endl;
    ACAutomaton ac;
    ac.addPattern("she");
    ac.addPattern("he");
    ac.addPattern("her");
    ac.addPattern("hers");
    ac.buildFailureFunction();
    
    string text = "ushers";
    vector<pair<int, int>> matches = ac.search(text);
    
    cout << "在文本 '" << text << "' 中找到的模式串:" << endl;
    for (auto& match : matches) {
        cout << "位置 " << match.first << ": " << ac.getPatterns()[match.second] << endl;
    }
    
    // 测试最长公共前缀
    cout << "\\n最长公共前缀测试:" << endl;
    LongestCommonPrefix lcp;
    vector<string> strings = {"flower", "flow", "flight"};
    
    cout << "字符串集合: ";
    for (const string& s : strings) {
        cout << s << " ";
        lcp.insert(s);
    }
    cout << "\\n最长公共前缀: '" << lcp.findLCP(strings.size()) << "'" << endl;
    
    // 测试自动补全
    cout << "\\n自动补全测试:" << endl;
    AutoComplete autoComplete;
    
    // 添加一些单词和它们的搜索频率
    autoComplete.addWord("apple", 100);
    autoComplete.addWord("application", 50);
    autoComplete.addWord("apply", 80);
    autoComplete.addWord("appreciate", 30);
    autoComplete.addWord("approach", 70);
    autoComplete.addWord("appropriate", 40);
    
    vector<string> suggestions = autoComplete.getSuggestions("app", 3);
    cout << "前缀 'app' 的建议 (最多3个): ";
    for (const string& suggestion : suggestions) {
        cout << suggestion << " ";
    }
    cout << endl;
    
    return 0;
}`}
    explanation="AC自动机是字典树的扩展，通过失配指针实现多模式串匹配。自动补全系统利用字典树的前缀特性，结合频率排序提供智能建议。最长公共前缀通过字典树的路径找到。"
    output={`AC自动机测试:
在文本 'ushers' 中找到的模式串:
位置 1: she
位置 2: he
位置 2: her
位置 2: hers

最长公共前缀测试:
字符串集合: flower flow flight 
最长公共前缀: 'fl'

自动补全测试:
前缀 'app' 的建议 (最多3个): apple apply approach`}
  />

  <h2>竞赛技巧总结</h2>
  
  <div class="tips">
    <h3>字典树的适用场景：</h3>
    <ul>
      <li>字符串集合的前缀查询和匹配</li>
      <li>多模式字符串匹配（AC自动机）</li>
      <li>自动补全和搜索建议</li>
      <li>异或问题（01字典树）</li>
      <li>字符串统计和去重</li>
    </ul>
    
    <h3>实现选择：</h3>
    <ul>
      <li>指针实现：灵活，支持任意字符集</li>
      <li>数组实现：效率高，适用于固定字符集</li>
      <li>01字典树：专门处理二进制数据</li>
      <li>可持久化字典树：支持历史版本查询</li>
    </ul>
    
    <h3>优化技巧：</h3>
    <ul>
      <li>使用数组而非map/unordered_map提高效率</li>
      <li>预分配节点空间避免频繁内存分配</li>
      <li>压缩路径减少空间消耗</li>
      <li>懒惰删除避免复杂的删除操作</li>
    </ul>
    
    <h3>常见问题和解决方案：</h3>
    <ul>
      <li>空间限制：使用压缩字典树或动态分配</li>
      <li>字符集过大：使用哈希表存储子节点</li>
      <li>删除操作：标记删除或引用计数</li>
      <li>并发访问：读写锁或无锁数据结构</li>
    </ul>
    
    <h3>竞赛中的应用模式：</h3>
    <ul>
      <li>字符串前缀/后缀问题 → 正向/反向字典树</li>
      <li>多字符串匹配 → AC自动机</li>
      <li>异或最值问题 → 01字典树</li>
      <li>字符串计数统计 → 字典树 + DFS</li>
      <li>动态字符串集合 → 可持久化字典树</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/4-competitive/segment-tree" class="prev">← 线段树和树状数组</a>
    <a href="/4-competitive/monotonic-queue" class="next">单调队列 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>