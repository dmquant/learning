---
import Layout from '../layouts/Layout.astro';
import CodeExample from '../components/CodeExample.tsx';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout title="C++ Learning Hub">
	<main>
		<h1>C++ Learning Hub</h1>
		<p class="intro">Master C++ programming from basics to advanced competitive programming</p>
		
		<div class="level-grid">
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üöÄ</div>
					<div class="level-meta">
						<span class="difficulty beginner">Beginner</span>
						<span class="lessons">7 Lessons</span>
					</div>
				</div>
				<h2><a href="/1-syntax-basics/">Syntax Basics</a></h2>
				<p>Learn C++ programming from scratch, master basic syntax and core concepts</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">Variables</span>
						<span class="topic">Functions</span>
						<span class="topic">Classes</span>
						<span class="topic">Pointers</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üß†</div>
					<div class="level-meta">
						<span class="difficulty intermediate">Intermediate</span>
						<span class="lessons">7 Lessons</span>
					</div>
				</div>
				<h2><a href="/2-algorithm-basics/">Algorithm Basics</a></h2>
				<p>Master core algorithmic thinking and build a solid foundation for advanced programming</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">Sorting</span>
						<span class="topic">Searching</span>
						<span class="topic">Recursion</span>
						<span class="topic">Dynamic Programming</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üèóÔ∏è</div>
					<div class="level-meta">
						<span class="difficulty intermediate">Intermediate</span>
						<span class="lessons">8 Lessons</span>
					</div>
				</div>
				<h2><a href="/3-data-structures/">Data Structures</a></h2>
				<p>Deep understanding of classic data structures and efficient data organization methods</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">Arrays</span>
						<span class="topic">Linked Lists</span>
						<span class="topic">Trees</span>
						<span class="topic">Hash Tables</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üèÜ</div>
					<div class="level-meta">
						<span class="difficulty advanced">Advanced</span>
						<span class="lessons">14 Lessons</span>
					</div>
				</div>
				<h2><a href="/4-competitive/">Competitive Programming</a></h2>
				<p>Master advanced algorithms and data structures to enhance competitive programming skills</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">STL</span>
						<span class="topic">Segment Trees</span>
						<span class="topic">Graph Theory</span>
						<span class="topic">Number Theory</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üåü</div>
					<div class="level-meta">
						<span class="difficulty expert">Expert</span>
						<span class="lessons">7 Lessons</span>
					</div>
				</div>
				<h2><a href="/5-advanced/">Advanced Algorithms</a></h2>
				<p>Explore cutting-edge algorithms and advanced computational techniques</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">Advanced Graph Theory</span>
						<span class="topic">Union-Find</span>
						<span class="topic">Sweep Line</span>
						<span class="topic">DP Optimization</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üöÄ</div>
					<div class="level-meta">
						<span class="difficulty expert">Expert</span>
						<span class="lessons">10 Lessons</span>
					</div>
				</div>
				<h2><a href="/6-world-class/">World-Class Level</a></h2>
				<p>Master the most advanced C++ techniques and cutting-edge algorithms</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">Combinatorics</span>
						<span class="topic">Linear Algebra</span>
						<span class="topic">Advanced DP</span>
						<span class="topic">Balanced Trees</span>
					</div>
				</div>
			</div>
		</div>
	</main>

	<section class="featured-content">
		<h2>Featured Examples</h2>
		
		<CodeExample 
			client:load
			title="Hello World - Your First C++ Program"
			code={`#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    return 0;
}`}
			explanation="This is the classic 'Hello World' program. It demonstrates the basic structure of a C++ program including headers, main function, and output."
			output="Hello, World!"
		/>

		<CodeExample 
			client:load
			title="Variables and Data Types"
			code={`#include <iostream>
using namespace std;

int main() {
    // Different data types
    int age = 25;
    double price = 99.99;
    char grade = 'A';
    string name = "Alice";
    bool isStudent = true;
    
    cout << "Name: " << name << endl;
    cout << "Age: " << age << endl;
    cout << "Grade: " << grade << endl;
    cout << "Price: $" << price << endl;
    cout << "Is Student: " << (isStudent ? "Yes" : "No") << endl;
    
    return 0;
}`}
			explanation="This example shows the fundamental data types in C++: int, double, char, string, and bool. Understanding these types is crucial for C++ programming."
			output={`Name: Alice
Age: 25
Grade: A
Price: $99.99
Is Student: Yes`}
		/>

		<CodeExample 
			client:load
			title="Simple Array Operations"
			code={`#include <iostream>
using namespace std;

int main() {
    int numbers[5] = {10, 20, 30, 40, 50};
    
    cout << "Array elements:" << endl;
    for(int i = 0; i < 5; i++) {
        cout << "numbers[" << i << "] = " << numbers[i] << endl;
    }
    
    // Calculate sum
    int sum = 0;
    for(int i = 0; i < 5; i++) {
        sum += numbers[i];
    }
    
    cout << "Sum of all elements: " << sum << endl;
    cout << "Average: " << (double)sum / 5 << endl;
    
    return 0;
}`}
			explanation="Arrays are fundamental data structures. This example demonstrates array declaration, initialization, iteration, and basic operations like calculating sum and average."
			output={`Array elements:
numbers[0] = 10
numbers[1] = 20
numbers[2] = 30
numbers[3] = 40
numbers[4] = 50
Sum of all elements: 150
Average: 30`}
		/>
	</section>

	<section class="learning-path">
		<h2>Recommended Learning Path</h2>
		
		<div class="path-steps">
			<div class="step">
				<div class="step-number">1</div>
				<div class="step-content">
					<h3>Syntax Basics</h3>
					<p>Start with C++ fundamentals, master basic syntax, variables, data types and control structures.</p>
					<ul>
						<li>Introduction to C++</li>
						<li>Variables & Basic Operations</li>
						<li>Data Types</li>
						<li>Loop Structures</li>
						<li>Functions & Applications</li>
						<li>Pointers</li>
					</ul>
				</div>
			</div>
			
			<div class="step">
				<div class="step-number">2</div>
				<div class="step-content">
					<h3>Algorithm Basics</h3>
					<p>Learn core algorithmic thinking, including sorting, searching, recursion and introduction to dynamic programming.</p>
					<ul>
						<li>Sorting Algorithms</li>
						<li>Search & Backtracking Algorithms</li>
						<li>Recursion & Recurrence</li>
						<li>Greedy Approach</li>
						<li>Dynamic Programming Basics</li>
						<li>Mathematical Foundations</li>
					</ul>
				</div>
			</div>
			
			<div class="step">
				<div class="step-number">3</div>
				<div class="step-content">
					<h3>Data Structures + Advanced Algorithms</h3>
					<p>Deep dive into data structures and advanced algorithmic patterns.</p>
					<ul>
						<li>Stacks, Queues, Lists, Trees</li>
						<li>STL Containers</li>
						<li>Graph Storage & Traversal</li>
						<li>Classic DP Models</li>
						<li>Shortest Path Algorithms</li>
						<li>Number Theory Basics</li>
					</ul>
				</div>
			</div>
			
			<div class="step">
				<div class="step-number">4+</div>
				<div class="step-content">
					<h3>Competitive Programming</h3>
					<p>Master advanced data structures and competitive programming techniques.</p>
					<ul>
						<li>Segment Trees, Fenwick Trees</li>
						<li>String Algorithms</li>
						<li>Advanced Graph Theory</li>
						<li>Advanced Number Theory</li>
						<li>DP Optimizations</li>
						<li>Balanced Trees</li>
					</ul>
				</div>
			</div>
		</div>
	</section>

	<section class="features">
		<h2>Why Choose C++ Learning Hub?</h2>
		
		<div class="features-grid">
			<div class="feature">
				<h3>üíª Interactive Examples</h3>
				<p>Run and modify code examples directly in your browser with real-time feedback.</p>
			</div>
			
			<div class="feature">
				<h3>üìö Comprehensive Coverage</h3>
				<p>From basic syntax to advanced algorithms, everything you need to master C++.</p>
			</div>
			
			<div class="feature">
				<h3>üéØ Practical Focus</h3>
				<p>Learn through hands-on examples and real-world programming scenarios.</p>
			</div>
			
			<div class="feature">
				<h3>üìà Progressive Learning</h3>
				<p>Structured curriculum that builds knowledge step by step.</p>
			</div>
			
			<div class="feature">
				<h3>üîç Visual Explanations</h3>
				<p>Complex concepts explained with clear diagrams and visual aids.</p>
			</div>
			
			<div class="feature">
				<h3>‚ö° Modern C++</h3>
				<p>Learn modern C++ features and best practices used in industry.</p>
			</div>
		</div>
	</section>
</Layout>

<style>
	main {
		margin: auto;
		padding: 2rem;
		width: 1200px;
		max-width: calc(100% - 2rem);
		color: #1e293b;
		line-height: 1.6;
	}
	
	h1 {
		font-size: 3rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1rem;
		background: linear-gradient(135deg, #4f46e5, #7c3aed);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}
	
	.intro {
		font-size: 1.25rem;
		text-align: center;
		color: #6b7280;
		margin-bottom: 3rem;
	}
	
	.level-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
		gap: 2rem;
		margin-top: 2rem;
	}
	
	.level-card {
		background: white;
		border: 1px solid #e2e8f0;
		border-radius: 12px;
		padding: 0;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		overflow: hidden;
		position: relative;
	}
	
	.level-card:hover {
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
		transform: translateY(-4px);
		border-color: #4f46e5;
	}

	.level-card:hover .level-icon {
		transform: scale(1.2) rotate(5deg);
	}

	.card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.5rem 1.5rem 1rem 1.5rem;
		background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
		border-bottom: 1px solid #e2e8f0;
	}

	.level-icon {
		font-size: 2rem;
		transition: all 0.3s ease;
	}

	.level-meta {
		display: flex;
		gap: 0.75rem;
		align-items: center;
	}

	.difficulty {
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.75rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.difficulty.beginner {
		background: #dcfce7;
		color: #166534;
	}

	.difficulty.intermediate {
		background: #fef3c7;
		color: #92400e;
	}

	.difficulty.advanced {
		background: #fecaca;
		color: #991b1b;
	}

	.difficulty.expert {
		background: #f3e8ff;
		color: #6b21a8;
	}

	.lessons {
		background: #e0e7ff;
		color: #3730a3;
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.75rem;
		font-weight: 500;
	}

	.level-card h2 {
		margin: 0 0 0.75rem 0;
		font-size: 1.5rem;
		padding: 0 1.5rem;
	}
	
	.level-card h2 a {
		color: #1e293b;
		text-decoration: none;
		font-weight: 600;
		transition: color 0.3s ease;
	}
	
	.level-card:hover h2 a {
		color: #4f46e5;
	}
	
	.level-card p {
		margin: 0 0 1.5rem 0;
		color: #6b7280;
		font-size: 0.95rem;
		line-height: 1.6;
		padding: 0 1.5rem;
	}

	.card-footer {
		padding: 1rem 1.5rem 1.5rem 1.5rem;
		background: #fafbfc;
		border-top: 1px solid #f1f5f9;
	}

	.topics {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.topic {
		background: white;
		border: 1px solid #e2e8f0;
		color: #64748b;
		padding: 0.375rem 0.75rem;
		border-radius: 6px;
		font-size: 0.8rem;
		font-weight: 500;
		transition: all 0.2s ease;
	}

	.level-card:hover .topic {
		border-color: #c7d2fe;
		background: #f0f4ff;
		color: #4338ca;
	}

	/* Progress indicator */
	.level-card::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 3px;
		background: linear-gradient(90deg, #4f46e5, #7c3aed);
		transform: scaleX(0);
		transform-origin: left;
		transition: transform 0.3s ease;
	}

	.level-card:hover::before {
		transform: scaleX(1);
	}

	@media (max-width: 768px) {
		main {
			padding: 1rem;
		}
		
		h1 {
			font-size: 2rem;
		}
		
		.level-grid {
			grid-template-columns: 1fr;
			gap: 1.5rem;
		}

		.level-meta {
			flex-direction: column;
			gap: 0.5rem;
		}
	}

	.featured-content {
		margin: 3rem 0;
	}

	.learning-path {
		margin: 4rem 0;
	}

	.path-steps {
		display: grid;
		gap: 2rem;
	}

	.step {
		display: flex;
		gap: 1.5rem;
		align-items: flex-start;
	}

	.step-number {
		background: #667eea;
		color: white;
		width: 3rem;
		height: 3rem;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: bold;
		font-size: 1.25rem;
		flex-shrink: 0;
	}

	.step-content h3 {
		margin: 0 0 0.5rem 0;
		color: #1e293b;
	}

	.step-content p {
		margin-bottom: 1rem;
		color: #64748b;
	}

	.step-content ul {
		margin: 0;
		padding-left: 1.5rem;
		color: #64748b;
	}

	.step-content li {
		margin-bottom: 0.25rem;
	}

	.features {
		margin: 4rem 0;
	}

	.features-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 2rem;
		margin-top: 2rem;
	}

	.feature {
		padding: 1.5rem;
		background: #f8fafc;
		border-radius: 8px;
		border-left: 4px solid #667eea;
	}

	.feature h3 {
		margin: 0 0 1rem 0;
		color: #1e293b;
	}

	.feature p {
		margin: 0;
		color: #64748b;
	}
</style>
