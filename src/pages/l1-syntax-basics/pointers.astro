---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Pointers & References - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l1-syntax-basics">Syntax Basics</a> &gt; Pointers & References
  </div>

  <h1>Pointers & References</h1>
  
  <div class="overview">
    <p>
      Pointers and references are powerful features in C++ that allow you to work directly with memory addresses. 
      Pointers store memory addresses of variables, while references provide aliases to existing variables. 
      Understanding these concepts is crucial for dynamic memory allocation, efficient parameter passing, and advanced C++ programming.
    </p>
    
    <p>
      While pointers offer great flexibility and control, they require careful handling to avoid common errors 
      like null pointer dereferences and memory leaks. References provide a safer alternative for many use cases.
    </p>
  </div>

  <section class="content-section">
    <h2>Pointer Basics</h2>

    <CodeExample 
      client:load
      title="Introduction to Pointers"
      code={`#include <iostream>
using namespace std;

int main() {
    // Regular variables
    int number = 42;
    double price = 19.99;
    char grade = 'A';
    
    // Declaring pointers
    int* numPtr;        // Pointer to int
    double* pricePtr;   // Pointer to double
    char* gradePtr;     // Pointer to char
    
    // Getting addresses of variables using & operator
    numPtr = &number;
    pricePtr = &price;
    gradePtr = &grade;
    
    // Displaying variable values and addresses
    cout << "Variable values:" << endl;
    cout << "number = " << number << endl;
    cout << "price = " << price << endl;
    cout << "grade = " << grade << endl;
    
    cout << "\\nVariable addresses:" << endl;
    cout << "Address of number: " << &number << endl;
    cout << "Address of price: " << &price << endl;
    cout << "Address of grade: " << (void*)&grade << endl;  // Cast for proper display
    
    cout << "\\nPointer values (addresses they store):" << endl;
    cout << "numPtr = " << numPtr << endl;
    cout << "pricePtr = " << pricePtr << endl;
    cout << "gradePtr = " << (void*)gradePtr << endl;
    
    // Dereferencing pointers using * operator
    cout << "\\nDereferencing pointers (accessing values):" << endl;
    cout << "*numPtr = " << *numPtr << endl;
    cout << "*pricePtr = " << *pricePtr << endl;
    cout << "*gradePtr = " << *gradePtr << endl;
    
    // Modifying values through pointers
    *numPtr = 100;
    *pricePtr = 29.99;
    *gradePtr = 'B';
    
    cout << "\\nAfter modification through pointers:" << endl;
    cout << "number = " << number << endl;
    cout << "price = " << price << endl;
    cout << "grade = " << grade << endl;
    
    return 0;
}`}
      explanation="Pointers store memory addresses of variables. Use & to get an address and * to dereference (access the value). Modifying values through pointers affects the original variables since they point to the same memory locations."
      output={`Variable values:
number = 42
price = 19.99
grade = A

Variable addresses:
Address of number: 0x7fff5fbff6ac
Address of price: 0x7fff5fbff6a0
Address of grade: 0x7fff5fbff69f

Pointer values (addresses they store):
numPtr = 0x7fff5fbff6ac
pricePtr = 0x7fff5fbff6a0
gradePtr = 0x7fff5fbff69f

Dereferencing pointers (accessing values):
*numPtr = 42
*pricePtr = 19.99
*gradePtr = A

After modification through pointers:
number = 100
price = 29.99
grade = B`}
    />
  </section>

  <section class="content-section">
    <h2>Null Pointers and Pointer Safety</h2>

    <CodeExample 
      client:load
      title="Safe Pointer Usage"
      code={`#include <iostream>
using namespace std;

int main() {
    // Null pointer initialization
    int* ptr1 = nullptr;        // C++11 way (recommended)
    int* ptr2 = NULL;           // C-style (still valid)
    int* ptr3 = 0;              // Also null, but less clear
    
    cout << "Null pointer values:" << endl;
    cout << "ptr1 = " << ptr1 << endl;
    cout << "ptr2 = " << ptr2 << endl;
    cout << "ptr3 = " << ptr3 << endl;
    
    // Checking for null before dereferencing
    if (ptr1 != nullptr) {
        cout << "*ptr1 = " << *ptr1 << endl;
    } else {
        cout << "ptr1 is null - cannot dereference" << endl;
    }
    
    // Assigning a valid address
    int value = 25;
    ptr1 = &value;
    
    cout << "\\nAfter assigning address:" << endl;
    cout << "ptr1 = " << ptr1 << endl;
    
    // Safe dereferencing
    if (ptr1 != nullptr) {
        cout << "*ptr1 = " << *ptr1 << endl;
        *ptr1 = 50;  // Safe to modify
        cout << "After modification: *ptr1 = " << *ptr1 << endl;
        cout << "Original value: " << value << endl;
    }
    
    // Demonstrating pointer reassignment
    int anotherValue = 75;
    int* ptr4 = &value;        // Points to value
    int* ptr5 = &anotherValue; // Points to anotherValue
    
    cout << "\\nPointer reassignment:" << endl;
    cout << "ptr4 points to value: " << *ptr4 << endl;
    cout << "ptr5 points to anotherValue: " << *ptr5 << endl;
    
    // Swap what the pointers point to
    int* temp = ptr4;
    ptr4 = ptr5;
    ptr5 = temp;
    
    cout << "After swapping pointers:" << endl;
    cout << "ptr4 now points to: " << *ptr4 << endl;
    cout << "ptr5 now points to: " << *ptr5 << endl;
    
    // Pointer comparison
    cout << "\\nPointer comparisons:" << endl;
    cout << "ptr4 == ptr5: " << (ptr4 == ptr5 ? "true" : "false") << endl;
    cout << "ptr4 == &anotherValue: " << (ptr4 == &anotherValue ? "true" : "false") << endl;
    
    return 0;
}`}
      explanation="Always initialize pointers and check for null before dereferencing. Use nullptr (C++11) for null pointers. Pointers can be reassigned to point to different variables, and you can compare pointer addresses."
      output={`Null pointer values:
ptr1 = 0
ptr2 = 0
ptr3 = 0
ptr1 is null - cannot dereference

After assigning address:
ptr1 = 0x7fff5fbff6ac

*ptr1 = 25
After modification: *ptr1 = 50
Original value: 50

Pointer reassignment:
ptr4 points to value: 50
ptr5 points to anotherValue: 75
After swapping pointers:
ptr4 now points to: 75
ptr5 now points to: 50

Pointer comparisons:
ptr4 == ptr5: false
ptr4 == &anotherValue: true`}
    />
  </section>

  <section class="content-section">
    <h2>References</h2>

    <CodeExample 
      client:load
      title="References vs Pointers"
      code={`#include <iostream>
#include <string>
using namespace std;

int main() {
    // Original variables
    int original = 100;
    string name = "Alice";
    
    // Creating references (aliases)
    int& refToOriginal = original;      // Reference must be initialized
    string& refToName = name;
    
    cout << "Original values:" << endl;
    cout << "original = " << original << endl;
    cout << "name = " << name << endl;
    
    cout << "\\nReference values:" << endl;
    cout << "refToOriginal = " << refToOriginal << endl;
    cout << "refToName = " << refToName << endl;
    
    // Modifying through references
    refToOriginal = 200;
    refToName = "Bob";
    
    cout << "\\nAfter modifying through references:" << endl;
    cout << "original = " << original << endl;
    cout << "name = " << name << endl;
    cout << "refToOriginal = " << refToOriginal << endl;
    cout << "refToName = " << refToName << endl;
    
    // Addresses are the same
    cout << "\\nAddress comparison:" << endl;
    cout << "Address of original: " << &original << endl;
    cout << "Address of refToOriginal: " << &refToOriginal << endl;
    cout << "Same address? " << (&original == &refToOriginal ? "Yes" : "No") << endl;
    
    // Pointer vs Reference comparison
    int value = 42;
    
    // Using pointer
    int* ptr = &value;
    cout << "\\nPointer example:" << endl;
    cout << "value = " << value << endl;
    cout << "ptr = " << ptr << " (address)" << endl;
    cout << "*ptr = " << *ptr << " (dereferenced value)" << endl;
    
    // Using reference
    int& ref = value;
    cout << "\\nReference example:" << endl;
    cout << "value = " << value << endl;
    cout << "ref = " << ref << " (same as value)" << endl;
    cout << "&ref = " << &ref << " (same address as value)" << endl;
    
    // Key differences demonstration
    cout << "\\nKey differences:" << endl;
    
    // 1. References cannot be reassigned
    int another = 99;
    // ref = another;  // This assigns value, doesn't change what ref refers to
    ref = another;     // Now value becomes 99, ref still refers to value
    cout << "After ref = another: value = " << value << ", ref = " << ref << endl;
    
    // 2. Pointers can be reassigned
    ptr = &another;    // Now ptr points to another variable
    cout << "After ptr = &another: *ptr = " << *ptr << endl;
    
    // 3. References cannot be null
    // int& nullRef;   // Error! Must be initialized
    // int& nullRef = nullptr;  // Error! Cannot reference null
    
    return 0;
}`}
      explanation="References are aliases to existing variables - they must be initialized and cannot be reassigned. Unlike pointers, references cannot be null and don't need dereferencing. They provide safer, cleaner syntax for many operations."
      output={`Original values:
original = 100
name = Alice

Reference values:
refToOriginal = 100
refToName = Alice

After modifying through references:
original = 200
name = Bob
refToOriginal = 200
refToName = Bob

Address comparison:
Address of original: 0x7fff5fbff6ac
Address of refToOriginal: 0x7fff5fbff6ac
Same address? Yes

Pointer example:
value = 42
ptr = 0x7fff5fbff6a8 (address)
*ptr = 42 (dereferenced value)

Reference example:
value = 42
ref = 42 (same as value)
&ref = 0x7fff5fbff6a8 (same address as value)

Key differences:
After ref = another: value = 99, ref = 99
After ptr = &another: *ptr = 99`}
    />
  </section>

  <section class="content-section">
    <h2>Pointers with Arrays</h2>

    <CodeExample 
      client:load
      title="Pointer Arithmetic with Arrays"
      code={`#include <iostream>
using namespace std;

int main() {
    // Array declaration
    int numbers[] = {10, 20, 30, 40, 50};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    
    // Array name is a pointer to the first element
    int* ptr = numbers;  // Same as: int* ptr = &numbers[0];
    
    cout << "Array elements using array notation:" << endl;
    for (int i = 0; i < size; i++) {
        cout << "numbers[" << i << "] = " << numbers[i] << endl;
    }
    
    cout << "\\nArray elements using pointer arithmetic:" << endl;
    for (int i = 0; i < size; i++) {
        cout << "*(ptr + " << i << ") = " << *(ptr + i) << endl;
    }
    
    cout << "\\nPointer arithmetic step by step:" << endl;
    cout << "ptr = " << ptr << " (points to first element)" << endl;
    cout << "*ptr = " << *ptr << " (first element)" << endl;
    
    ptr++;  // Move to next element
    cout << "After ptr++:" << endl;
    cout << "ptr = " << ptr << " (points to second element)" << endl;
    cout << "*ptr = " << *ptr << " (second element)" << endl;
    
    ptr += 2;  // Move forward by 2 elements
    cout << "After ptr += 2:" << endl;
    cout << "ptr = " << ptr << " (points to fourth element)" << endl;
    cout << "*ptr = " << *ptr << " (fourth element)" << endl;
    
    // Reset pointer to beginning
    ptr = numbers;
    
    cout << "\\nTraversing array with pointer:" << endl;
    for (int i = 0; i < size; i++) {
        cout << "Element " << i << ": " << *ptr << " at address " << ptr << endl;
        ptr++;
    }
    
    // Pointer subtraction
    ptr = numbers;
    int* endPtr = numbers + size;
    cout << "\\nPointer difference:" << endl;
    cout << "Distance between start and end: " << (endPtr - ptr) << " elements" << endl;
    
    // Using pointers to modify array
    ptr = numbers;
    cout << "\\nModifying array through pointer:" << endl;
    for (int i = 0; i < size; i++) {
        *ptr *= 2;  // Double each element
        ptr++;
    }
    
    cout << "Array after modification:" << endl;
    for (int i = 0; i < size; i++) {
        cout << numbers[i] << " ";
    }
    cout << endl;
    
    // Relationship between arrays and pointers
    cout << "\\nArray and pointer relationships:" << endl;
    cout << "numbers == &numbers[0]: " << (numbers == &numbers[0] ? "true" : "false") << endl;
    cout << "numbers[2] == *(numbers + 2): " << (numbers[2] == *(numbers + 2) ? "true" : "false") << endl;
    
    return 0;
}`}
      explanation="Array names are pointers to the first element. Pointer arithmetic allows navigation through arrays: ptr++ moves to the next element, ptr+n moves n elements forward. Array[i] is equivalent to *(array + i)."
      output={`Array elements using array notation:
numbers[0] = 10
numbers[1] = 20
numbers[2] = 30
numbers[3] = 40
numbers[4] = 50

Array elements using pointer arithmetic:
*(ptr + 0) = 10
*(ptr + 1) = 20
*(ptr + 2) = 30
*(ptr + 3) = 40
*(ptr + 4) = 50

Pointer arithmetic step by step:
ptr = 0x7fff5fbff690 (points to first element)
*ptr = 10 (first element)
After ptr++:
ptr = 0x7fff5fbff694 (points to second element)
*ptr = 20 (second element)
After ptr += 2:
ptr = 0x7fff5fbff69c (points to fourth element)
*ptr = 40 (fourth element)

Traversing array with pointer:
Element 0: 10 at address 0x7fff5fbff690
Element 1: 20 at address 0x7fff5fbff694
Element 2: 30 at address 0x7fff5fbff698
Element 3: 40 at address 0x7fff5fbff69c
Element 4: 50 at address 0x7fff5fbff6a0

Pointer difference:
Distance between start and end: 5 elements

Modifying array through pointer:
Array after modification:
20 40 60 80 100 

Array and pointer relationships:
numbers == &numbers[0]: true
numbers[2] == *(numbers + 2): true`}
    />
  </section>

  <section class="content-section">
    <h2>Function Parameters with Pointers and References</h2>

    <CodeExample 
      client:load
      title="Passing Pointers and References to Functions"
      code={`#include <iostream>
using namespace std;

// Function that takes a pointer parameter
void modifyWithPointer(int* ptr) {
    if (ptr != nullptr) {
        *ptr = *ptr * 2;
        cout << "Inside modifyWithPointer: *ptr = " << *ptr << endl;
    }
}

// Function that takes a reference parameter
void modifyWithReference(int& ref) {
    ref = ref * 3;
    cout << "Inside modifyWithReference: ref = " << ref << endl;
}

// Function that takes value (copy)
void modifyWithValue(int value) {
    value = value * 4;
    cout << "Inside modifyWithValue: value = " << value << endl;
}

// Function to swap values using pointers
void swapWithPointers(int* a, int* b) {
    if (a != nullptr && b != nullptr) {
        int temp = *a;
        *a = *b;
        *b = temp;
    }
}

// Function to swap values using references
void swapWithReferences(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function that returns a pointer (be careful!)
int* createNumber() {
    static int number = 42;  // Static ensures it persists after function ends
    return &number;
}

// Function that returns a reference (also be careful!)
int& getStaticNumber() {
    static int number = 100;
    return number;
}

// Function to process array using pointer
void printArray(int* arr, int size) {
    cout << "Array elements: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int number = 10;
    
    cout << "Original number: " << number << endl;
    
    // Pass by value - doesn't modify original
    modifyWithValue(number);
    cout << "After modifyWithValue: " << number << endl;
    
    // Pass by pointer - modifies original
    modifyWithPointer(&number);
    cout << "After modifyWithPointer: " << number << endl;
    
    // Pass by reference - modifies original
    modifyWithReference(number);
    cout << "After modifyWithReference: " << number << endl;
    
    // Swapping examples
    int x = 5, y = 15;
    cout << "\\nBefore swapping: x = " << x << ", y = " << y << endl;
    
    swapWithPointers(&x, &y);
    cout << "After swapWithPointers: x = " << x << ", y = " << y << endl;
    
    swapWithReferences(x, y);
    cout << "After swapWithReferences: x = " << x << ", y = " << y << endl;
    
    // Using functions that return pointers/references
    int* ptrFromFunction = createNumber();
    cout << "\\nPointer from function: *ptrFromFunction = " << *ptrFromFunction << endl;
    
    int& refFromFunction = getStaticNumber();
    cout << "Reference from function: refFromFunction = " << refFromFunction << endl;
    refFromFunction = 200;  // Modifies the static variable
    cout << "After modification: refFromFunction = " << refFromFunction << endl;
    
    // Array processing
    int numbers[] = {1, 2, 3, 4, 5};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    
    cout << "\\nProcessing array:" << endl;
    printArray(numbers, size);
    
    return 0;
}`}
      explanation="Functions can take pointers and references as parameters to modify original values. Pass by value creates copies, pass by pointer/reference allows modification. Be careful when returning pointers/references - ensure the referenced memory remains valid."
      output={`Original number: 10
Inside modifyWithValue: value = 40
After modifyWithValue: 10
Inside modifyWithPointer: *ptr = 20
After modifyWithPointer: 20
Inside modifyWithReference: ref = 60
After modifyWithReference: 60

Before swapping: x = 5, y = 15
After swapWithPointers: x = 15, y = 5
After swapWithReferences: x = 5, y = 15

Pointer from function: *ptrFromFunction = 42
Reference from function: refFromFunction = 100
After modification: refFromFunction = 200

Processing array:
Array elements: 1 2 3 4 5`}
    />
  </section>

  <section class="content-section">
    <h2>Common Pointer Pitfalls</h2>

    <CodeExample 
      client:load
      title="Avoiding Common Pointer Errors"
      code={`#include <iostream>
using namespace std;

void demonstratePitfalls() {
    cout << "Common Pointer Pitfalls and How to Avoid Them:" << endl;
    
    // 1. Uninitialized pointers
    cout << "\\n1. Uninitialized Pointers:" << endl;
    int* badPtr;  // Uninitialized - contains garbage value
    int* goodPtr = nullptr;  // Properly initialized
    
    // Don't do this:
    // cout << *badPtr;  // Undefined behavior!
    
    // Do this instead:
    if (goodPtr != nullptr) {
        cout << "*goodPtr = " << *goodPtr << endl;
    } else {
        cout << "goodPtr is null - safe!" << endl;
    }
    
    // 2. Dangling pointers
    cout << "\\n2. Dangling Pointers:" << endl;
    int* danglingPtr;
    {
        int localVar = 42;
        danglingPtr = &localVar;
        cout << "Inside block: *danglingPtr = " << *danglingPtr << endl;
    }  // localVar goes out of scope here
    
    // Don't do this:
    // cout << *danglingPtr;  // Undefined behavior - localVar is destroyed!
    cout << "After block: danglingPtr is now dangling (unsafe to use)" << endl;
    
    // 3. Memory leaks (will be covered more in dynamic allocation)
    cout << "\\n3. Null Pointer Safety:" << endl;
    int* nullPtr = nullptr;
    
    // Always check before dereferencing
    if (nullPtr != nullptr) {
        cout << "*nullPtr = " << *nullPtr << endl;
    } else {
        cout << "nullPtr is null - cannot dereference" << endl;
    }
    
    // 4. Pointer arithmetic bounds
    cout << "\\n4. Pointer Arithmetic Safety:" << endl;
    int arr[5] = {1, 2, 3, 4, 5};
    int* ptr = arr;
    
    // Safe pointer arithmetic
    for (int i = 0; i < 5; i++) {
        cout << "arr[" << i << "] = " << *ptr << endl;
        ptr++;
    }
    
    // Don't go beyond array bounds:
    // cout << *ptr;  // Undefined behavior - beyond array!
    
    // Reset to safe position
    ptr = arr;
    cout << "Reset ptr to safe position: *ptr = " << *ptr << endl;
}

// Safe function for pointer operations
void safePointerFunction(int* ptr, int size) {
    if (ptr == nullptr) {
        cout << "Error: Null pointer passed to function!" << endl;
        return;
    }
    
    cout << "Processing array of size " << size << ":" << endl;
    for (int i = 0; i < size; i++) {
        cout << ptr[i] << " ";
    }
    cout << endl;
}

// Function showing const correctness with pointers
void readOnlyPointer(const int* ptr, int size) {
    if (ptr == nullptr) return;
    
    cout << "Read-only access to array: ";
    for (int i = 0; i < size; i++) {
        cout << ptr[i] << " ";
        // ptr[i] = 0;  // Error! Cannot modify through const pointer
    }
    cout << endl;
}

int main() {
    demonstratePitfalls();
    
    cout << "\\nSafe Pointer Usage Examples:" << endl;
    
    int numbers[] = {10, 20, 30, 40, 50};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    
    // Safe function calls
    safePointerFunction(numbers, size);
    safePointerFunction(nullptr, 0);  // Gracefully handles null
    
    readOnlyPointer(numbers, size);
    
    cout << "\\nBest Practices:" << endl;
    cout << "1. Always initialize pointers" << endl;
    cout << "2. Check for null before dereferencing" << endl;
    cout << "3. Be careful with pointer arithmetic bounds" << endl;
    cout << "4. Avoid dangling pointers" << endl;
    cout << "5. Use const for read-only access" << endl;
    cout << "6. Consider using references when appropriate" << endl;
    
    return 0;
}`}
      explanation="Common pointer errors include uninitialized pointers, dangling pointers (pointing to destroyed objects), null pointer dereference, and out-of-bounds access. Always initialize pointers, check for null, and be careful with pointer arithmetic."
      output={`Common Pointer Pitfalls and How to Avoid Them:

1. Uninitialized Pointers:
goodPtr is null - safe!

2. Dangling Pointers:
Inside block: *danglingPtr = 42
After block: danglingPtr is now dangling (unsafe to use)

3. Null Pointer Safety:
nullPtr is null - cannot dereference

4. Pointer Arithmetic Safety:
arr[0] = 1
arr[1] = 2
arr[2] = 3
arr[3] = 4
arr[4] = 5
Reset ptr to safe position: *ptr = 1

Safe Pointer Usage Examples:
Processing array of size 5:
10 20 30 40 50 
Error: Null pointer passed to function!
Read-only access to array: 10 20 30 40 50 

Best Practices:
1. Always initialize pointers
2. Check for null before dereferencing
3. Be careful with pointer arithmetic bounds
4. Avoid dangling pointers
5. Use const for read-only access
6. Consider using references when appropriate`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Initialize Pointers</h4>
        <p>Always initialize pointers to nullptr or a valid address. Never leave pointers uninitialized as they contain garbage values.</p>
      </div>
      
      <div class="practice">
        <h4>2. Check for Null</h4>
        <p>Always check if a pointer is null before dereferencing it. This prevents crashes from null pointer access.</p>
      </div>
      
      <div class="practice">
        <h4>3. Prefer References When Possible</h4>
        <p>Use references instead of pointers when you don't need pointer arithmetic or reassignment. References are safer and cleaner.</p>
      </div>
      
      <div class="practice">
        <h4>4. Use const Correctness</h4>
        <p>Use const pointers and const references when you don't intend to modify the data. This prevents accidental modifications.</p>
      </div>
      
      <div class="practice">
        <h4>5. Avoid Pointer Arithmetic When Possible</h4>
        <p>Prefer array indexing or iterators over raw pointer arithmetic to reduce the chance of out-of-bounds errors.</p>
      </div>
    </div>
  </section>

  <section class="content-section">
    <h2>Practice Exercises</h2>
    
    <div class="exercise">
      <h3>Exercise 1: Pointer Functions</h3>
      <p>Write functions that use pointers to find the minimum and maximum values in an array, and return their positions.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 2: Reference Utilities</h3>
      <p>Create utility functions using references to swap variables, calculate multiple return values (like quotient and remainder), and modify strings in-place.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 3: Safe Array Operations</h3>
      <p>Implement safe array operations using pointers with proper bounds checking and null pointer validation.</p>
    </div>
  </section>

  <div class="navigation">
    <a href="/l1-syntax-basics/classes" class="nav-button prev">← Classes & Objects</a>
    <a href="/l1-syntax-basics/memory" class="nav-button next">Memory Management →</a>
  </div>
</Layout>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    color: #64748b;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: #667eea;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .overview {
    background: #f0f9ff;
    padding: 2rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #0ea5e9;
  }

  .content-section {
    margin: 3rem 0;
  }

  .best-practices {
    display: grid;
    gap: 1rem;
    margin: 2rem 0;
  }

  .practice {
    background: #f0fdf4;
    padding: 1.5rem;
    border-radius: 8px;
    border-left: 4px solid #22c55e;
  }

  .practice h4 {
    margin: 0 0 0.5rem 0;
    color: #166534;
  }

  .practice p {
    margin: 0;
    color: #166534;
  }

  .exercise {
    background: #fff7ed;
    padding: 2rem;
    border-radius: 8px;
    border-left: 4px solid #f59e0b;
    margin: 2rem 0;
  }

  .exercise h3 {
    margin: 0 0 1rem 0;
    color: #92400e;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    margin: 4rem 0 2rem 0;
    padding: 2rem 0;
    border-top: 1px solid #e2e8f0;
  }

  .nav-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .nav-button:hover {
    background: #5a67d8;
  }

  .nav-button.prev {
    background: #64748b;
  }

  .nav-button.prev:hover {
    background: #475569;
  }

  @media (max-width: 768px) {
    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      text-align: center;
    }
  }
</style> 