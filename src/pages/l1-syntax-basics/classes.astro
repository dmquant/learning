---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Classes & Objects - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l1-syntax-basics">Syntax Basics</a> &gt; Classes & Objects
  </div>

  <h1>Classes & Objects</h1>
  
  <div class="overview">
    <p>
      Classes are user-defined data types that group related data (attributes) and functions (methods) together. 
      Objects are instances of classes that represent real-world entities. Object-Oriented Programming (OOP) 
      with classes allows you to create modular, reusable, and maintainable code.
    </p>
    
    <p>
      Understanding classes and objects is fundamental to modern C++ programming and enables you to model 
      complex systems by breaking them down into manageable, self-contained components.
    </p>
  </div>

  <section class="content-section">
    <h2>Basic Class Structure</h2>

    <CodeExample 
      client:load
      title="Simple Class Definition"
      code={`#include <iostream>
#include <string>
using namespace std;

// Class definition
class Rectangle {
private:
    // Private member variables (data)
    double width;
    double height;
    
public:
    // Constructor
    Rectangle(double w, double h) {
        width = w;
        height = h;
        cout << "Rectangle created with width " << width 
             << " and height " << height << endl;
    }
    
    // Member functions (methods)
    double getArea() {
        return width * height;
    }
    
    double getPerimeter() {
        return 2 * (width + height);
    }
    
    // Getter functions
    double getWidth() { return width; }
    double getHeight() { return height; }
    
    // Setter functions
    void setWidth(double w) {
        if (w > 0) width = w;
    }
    
    void setHeight(double h) {
        if (h > 0) height = h;
    }
    
    // Display function
    void display() {
        cout << "Rectangle: " << width << "x" << height 
             << ", Area: " << getArea() 
             << ", Perimeter: " << getPerimeter() << endl;
    }
};

int main() {
    // Creating objects (instances of the class)
    Rectangle rect1(5.0, 3.0);
    Rectangle rect2(4.5, 2.8);
    
    // Calling member functions
    rect1.display();
    rect2.display();
    
    // Using getter and setter functions
    cout << "\\nOriginal rect1 width: " << rect1.getWidth() << endl;
    rect1.setWidth(6.0);
    cout << "Updated rect1 width: " << rect1.getWidth() << endl;
    rect1.display();
    
    return 0;
}`}
      explanation="A class defines a blueprint for objects. It contains private data members (encapsulation) and public member functions. Objects are created using the class constructor and can call member functions to interact with the data."
      output={`Rectangle created with width 5 and height 3
Rectangle created with width 4.5 and height 2.8
Rectangle: 5x3, Area: 15, Perimeter: 16
Rectangle: 4.5x2.8, Area: 12.6, Perimeter: 14.6

Original rect1 width: 5
Updated rect1 width: 6
Rectangle: 6x3, Area: 18, Perimeter: 18`}
    />
  </section>

  <section class="content-section">
    <h2>Constructors and Destructors</h2>

    <CodeExample 
      client:load
      title="Different Types of Constructors"
      code={`#include <iostream>
#include <string>
using namespace std;

class Student {
private:
    string name;
    int age;
    double gpa;
    
public:
    // Default constructor
    Student() {
        name = "Unknown";
        age = 18;
        gpa = 0.0;
        cout << "Default constructor called" << endl;
    }
    
    // Parameterized constructor
    Student(string n, int a, double g) {
        name = n;
        age = a;
        gpa = g;
        cout << "Parameterized constructor called for " << name << endl;
    }
    
    // Constructor with default parameters
    Student(string n, int a = 18) {
        name = n;
        age = a;
        gpa = 0.0;
        cout << "Constructor with defaults called for " << name << endl;
    }
    
    // Copy constructor
    Student(const Student& other) {
        name = other.name;
        age = other.age;
        gpa = other.gpa;
        cout << "Copy constructor called for " << name << endl;
    }
    
    // Destructor
    ~Student() {
        cout << "Destructor called for " << name << endl;
    }
    
    // Member functions
    void display() {
        cout << "Student: " << name << ", Age: " << age 
             << ", GPA: " << gpa << endl;
    }
    
    void setGPA(double g) {
        if (g >= 0.0 && g <= 4.0) {
            gpa = g;
        }
    }
    
    string getName() { return name; }
};

int main() {
    cout << "Creating students:" << endl;
    
    // Using different constructors
    Student student1;                          // Default constructor
    Student student2("Alice", 20, 3.8);       // Parameterized constructor
    Student student3("Bob");                   // Constructor with defaults
    Student student4 = student2;               // Copy constructor
    
    cout << "\\nStudent information:" << endl;
    student1.display();
    student2.display();
    student3.display();
    student4.display();
    
    cout << "\\nUpdating GPAs:" << endl;
    student1.setGPA(3.2);
    student3.setGPA(3.5);
    
    student1.display();
    student3.display();
    
    cout << "\\nEnd of main - destructors will be called:" << endl;
    return 0;
}`}
      explanation="Constructors initialize objects when they're created. C++ provides default, parameterized, and copy constructors. Destructors clean up when objects are destroyed. They're called automatically in reverse order of construction."
      output={`Creating students:
Default constructor called
Parameterized constructor called for Alice
Constructor with defaults called for Bob
Copy constructor called for Alice

Student information:
Student: Unknown, Age: 18, GPA: 0
Student: Alice, Age: 20, GPA: 3.8
Student: Bob, Age: 18, GPA: 0
Student: Alice, Age: 20, GPA: 3.8

Updating GPAs:
Student: Unknown, Age: 18, GPA: 3.2
Student: Bob, Age: 18, GPA: 3.5

End of main - destructors will be called:
Destructor called for Alice
Destructor called for Bob
Destructor called for Alice
Destructor called for Unknown`}
    />
  </section>

  <section class="content-section">
    <h2>Access Specifiers and Encapsulation</h2>

    <CodeExample 
      client:load
      title="Public, Private, and Protected Access"
      code={`#include <iostream>
#include <string>
using namespace std;

class BankAccount {
private:
    // Private members - only accessible within the class
    string accountNumber;
    double balance;
    string pin;
    
protected:
    // Protected members - accessible in derived classes
    string accountType;
    
public:
    // Public members - accessible from anywhere
    string holderName;
    
    // Constructor
    BankAccount(string name, string accNum, string p, double initialBalance = 0.0) {
        holderName = name;
        accountNumber = accNum;
        pin = p;
        balance = initialBalance;
        accountType = "Savings";
        cout << "Account created for " << holderName << endl;
    }
    
    // Public methods to access private data
    bool authenticate(string inputPin) {
        return pin == inputPin;
    }
    
    void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            cout << "Deposited $" << amount << ". New balance: $" << balance << endl;
        } else {
            cout << "Invalid deposit amount!" << endl;
        }
    }
    
    bool withdraw(double amount, string inputPin) {
        if (!authenticate(inputPin)) {
            cout << "Invalid PIN!" << endl;
            return false;
        }
        
        if (amount > balance) {
            cout << "Insufficient funds!" << endl;
            return false;
        }
        
        if (amount <= 0) {
            cout << "Invalid withdrawal amount!" << endl;
            return false;
        }
        
        balance -= amount;
        cout << "Withdrew $" << amount << ". New balance: $" << balance << endl;
        return true;
    }
    
    double getBalance(string inputPin) {
        if (authenticate(inputPin)) {
            return balance;
        } else {
            cout << "Invalid PIN!" << endl;
            return -1;
        }
    }
    
    // Public method to display safe information
    void displayInfo() {
        cout << "Account Holder: " << holderName << endl;
        cout << "Account Type: " << accountType << endl;
        cout << "Account Number: " << accountNumber.substr(0, 4) << "****" << endl;
        // Note: balance and PIN are not shown for security
    }
};

int main() {
    // Creating a bank account
    BankAccount account("John Doe", "12345678", "1234", 1000.0);
    
    cout << "\\nAccount Information:" << endl;
    account.displayInfo();
    
    // Accessing public member directly
    cout << "\\nHolder name (direct access): " << account.holderName << endl;
    
    // Cannot access private members directly (this would cause an error):
    // cout << account.balance;     // Error!
    // cout << account.pin;         // Error!
    
    cout << "\\nBank operations:" << endl;
    account.deposit(500.0);
    
    // Checking balance with correct PIN
    double balance = account.getBalance("1234");
    if (balance >= 0) {
        cout << "Current balance: $" << balance << endl;
    }
    
    // Trying to withdraw with wrong PIN
    account.withdraw(200.0, "0000");
    
    // Withdrawing with correct PIN
    account.withdraw(200.0, "1234");
    
    return 0;
}`}
      explanation="Access specifiers control data access: private (class only), protected (class + derived classes), public (everywhere). Encapsulation hides internal details and provides controlled access through public methods, ensuring data integrity and security."
      output={`Account created for John Doe

Account Information:
Account Holder: John Doe
Account Type: Savings
Account Number: 1234****

Holder name (direct access): John Doe

Bank operations:
Deposited $500. New balance: $1500

Current balance: $1500
Invalid PIN!
Withdrew $200. New balance: $1300`}
    />
  </section>

  <section class="content-section">
    <h2>Static Members</h2>

    <CodeExample 
      client:load
      title="Static Variables and Functions"
      code={`#include <iostream>
#include <string>
using namespace std;

class Car {
private:
    string brand;
    string model;
    int year;
    
    // Static variable - shared by all objects of this class
    static int totalCars;
    
public:
    // Constructor
    Car(string b, string m, int y) {
        brand = b;
        model = m;
        year = y;
        totalCars++;  // Increment the static counter
        cout << "Car created: " << brand << " " << model << " (" << year << ")" << endl;
    }
    
    // Destructor
    ~Car() {
        totalCars--;  // Decrement when object is destroyed
        cout << "Car destroyed: " << brand << " " << model << endl;
    }
    
    // Regular member function
    void displayInfo() {
        cout << year << " " << brand << " " << model << endl;
    }
    
    // Static member function - can only access static members
    static int getTotalCars() {
        return totalCars;
        // Cannot access non-static members here:
        // return year;  // Error!
    }
    
    // Static function to display statistics
    static void displayStatistics() {
        cout << "Total cars created: " << totalCars << endl;
    }
    
    // Another static function
    static void displayCompanyInfo() {
        cout << "Car Manufacturing Company - Since 1900" << endl;
        cout << "Total vehicles in system: " << totalCars << endl;
    }
};

// Static variable must be defined outside the class
int Car::totalCars = 0;

int main() {
    // Call static function before creating any objects
    cout << "Initial statistics:" << endl;
    Car::displayStatistics();
    Car::displayCompanyInfo();
    
    cout << "\\nCreating cars:" << endl;
    
    // Creating car objects
    Car car1("Toyota", "Camry", 2022);
    Car car2("Honda", "Civic", 2021);
    
    cout << "\\nAfter creating 2 cars:" << endl;
    Car::displayStatistics();
    cout << "Total cars (via static function): " << Car::getTotalCars() << endl;
    
    // Creating more cars in a block scope
    {
        Car car3("Ford", "Mustang", 2023);
        Car car4("BMW", "X5", 2022);
        
        cout << "\\nAfter creating 4 cars:" << endl;
        Car::displayStatistics();
        
        cout << "\\nCar details:" << endl;
        car1.displayInfo();
        car2.displayInfo();
        car3.displayInfo();
        car4.displayInfo();
        
        cout << "\\nEnd of block - cars 3 and 4 will be destroyed:" << endl;
    }
    
    cout << "\\nAfter block (cars 3 and 4 destroyed):" << endl;
    Car::displayStatistics();
    
    cout << "\\nEnd of main - remaining cars will be destroyed:" << endl;
    return 0;
}`}
      explanation="Static members belong to the class, not individual objects. Static variables are shared among all instances, and static functions can only access static members. They can be called using the class name without creating objects."
      output={`Initial statistics:
Total cars created: 0
Car Manufacturing Company - Since 1900
Total vehicles in system: 0

Creating cars:
Car created: Toyota Camry (2022)
Car created: Honda Civic (2021)

After creating 2 cars:
Total cars created: 2
Total cars (via static function): 2

Car created: Ford Mustang (2023)
Car created: BMW X5 (2022)

After creating 4 cars:
Total cars created: 4

Car details:
2022 Toyota Camry
2021 Honda Civic
2023 Ford Mustang
2022 BMW X5

End of block - cars 3 and 4 will be destroyed:
Car destroyed: BMW X5
Car destroyed: Ford Mustang

After block (cars 3 and 4 destroyed):
Total cars created: 2

End of main - remaining cars will be destroyed:
Car destroyed: Honda Civic
Car destroyed: Toyota Camry`}
    />
  </section>

  <section class="content-section">
    <h2>Friend Functions and Classes</h2>

    <CodeExample 
      client:load
      title="Friend Functions for Controlled Access"
      code={`#include <iostream>
#include <string>
using namespace std;

// Forward declaration
class Rectangle;

// Friend function declaration
void compareAreas(Rectangle& r1, Rectangle& r2);

class Rectangle {
private:
    double width;
    double height;
    
public:
    Rectangle(double w, double h) : width(w), height(h) {}
    
    // Declare friend function
    friend void compareAreas(Rectangle& r1, Rectangle& r2);
    
    // Declare friend class
    friend class RectangleAnalyzer;
    
    // Regular public methods
    double getArea() { return width * height; }
    
    void display() {
        cout << "Rectangle: " << width << "x" << height 
             << " (Area: " << getArea() << ")" << endl;
    }
};

// Friend function implementation - can access private members
void compareAreas(Rectangle& r1, Rectangle& r2) {
    cout << "\\nComparing rectangles:" << endl;
    cout << "Rectangle 1: " << r1.width << "x" << r1.height 
         << " (Area: " << r1.width * r1.height << ")" << endl;
    cout << "Rectangle 2: " << r2.width << "x" << r2.height 
         << " (Area: " << r2.width * r2.height << ")" << endl;
    
    double area1 = r1.width * r1.height;
    double area2 = r2.width * r2.height;
    
    if (area1 > area2) {
        cout << "Rectangle 1 has larger area" << endl;
    } else if (area2 > area1) {
        cout << "Rectangle 2 has larger area" << endl;
    } else {
        cout << "Both rectangles have equal area" << endl;
    }
}

// Friend class - can access all private members of Rectangle
class RectangleAnalyzer {
public:
    void analyzeRectangle(Rectangle& rect) {
        cout << "\\nDetailed Analysis:" << endl;
        cout << "Width: " << rect.width << endl;      // Accessing private member
        cout << "Height: " << rect.height << endl;    // Accessing private member
        cout << "Area: " << rect.width * rect.height << endl;
        cout << "Perimeter: " << 2 * (rect.width + rect.height) << endl;
        
        // Determine shape type
        if (rect.width == rect.height) {
            cout << "Shape type: Square" << endl;
        } else {
            cout << "Shape type: Rectangle" << endl;
        }
        
        // Determine orientation
        if (rect.width > rect.height) {
            cout << "Orientation: Landscape" << endl;
        } else if (rect.height > rect.width) {
            cout << "Orientation: Portrait" << endl;
        } else {
            cout << "Orientation: Square" << endl;
        }
    }
    
    void comparePerimeters(Rectangle& r1, Rectangle& r2) {
        double perimeter1 = 2 * (r1.width + r1.height);
        double perimeter2 = 2 * (r2.width + r2.height);
        
        cout << "\\nPerimeter comparison:" << endl;
        cout << "Rectangle 1 perimeter: " << perimeter1 << endl;
        cout << "Rectangle 2 perimeter: " << perimeter2 << endl;
        
        if (perimeter1 > perimeter2) {
            cout << "Rectangle 1 has larger perimeter" << endl;
        } else if (perimeter2 > perimeter1) {
            cout << "Rectangle 2 has larger perimeter" << endl;
        } else {
            cout << "Both rectangles have equal perimeter" << endl;
        }
    }
};

int main() {
    Rectangle rect1(5.0, 3.0);
    Rectangle rect2(4.0, 4.0);
    
    cout << "Created rectangles:" << endl;
    rect1.display();
    rect2.display();
    
    // Using friend function
    compareAreas(rect1, rect2);
    
    // Using friend class
    RectangleAnalyzer analyzer;
    analyzer.analyzeRectangle(rect1);
    analyzer.analyzeRectangle(rect2);
    analyzer.comparePerimeters(rect1, rect2);
    
    return 0;
}`}
      explanation="Friend functions and classes can access private members of a class. Use them sparingly when you need external functions to work closely with class internals. They break encapsulation but provide flexibility for specific operations."
      output={`Created rectangles:
Rectangle: 5x3 (Area: 15)
Rectangle: 4x4 (Area: 16)

Comparing rectangles:
Rectangle 1: 5x3 (Area: 15)
Rectangle 2: 4x4 (Area: 16)
Rectangle 2 has larger area

Detailed Analysis:
Width: 5
Height: 3
Area: 15
Perimeter: 16
Shape type: Rectangle
Orientation: Landscape

Detailed Analysis:
Width: 4
Height: 4
Area: 16
Perimeter: 16
Shape type: Square
Orientation: Square

Perimeter comparison:
Rectangle 1 perimeter: 16
Rectangle 2 perimeter: 16
Both rectangles have equal perimeter`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Use Encapsulation</h4>
        <p>Keep data members private and provide public methods for controlled access. This protects data integrity and allows for validation.</p>
      </div>
      
      <div class="practice">
        <h4>2. Initialize in Constructor</h4>
        <p>Always initialize all member variables in constructors. Use initialization lists for better performance and const members.</p>
      </div>
      
      <div class="practice">
        <h4>3. Provide Copy Constructor and Destructor</h4>
        <p>If your class manages resources (memory, files), implement proper copy constructor and destructor to avoid resource leaks.</p>
      </div>
      
      <div class="practice">
        <h4>4. Use const Correctness</h4>
        <p>Mark member functions as const if they don't modify the object's state. This enables const objects to call these functions.</p>
      </div>
      
      <div class="practice">
        <h4>5. Keep Classes Focused</h4>
        <p>Each class should have a single, well-defined responsibility. Avoid creating classes that try to do too many things.</p>
      </div>
    </div>
  </section>

  <section class="content-section">
    <h2>Practice Exercises</h2>
    
    <div class="exercise">
      <h3>Exercise 1: Library Book System</h3>
      <p>Create a Book class with title, author, ISBN, and availability status. Include methods to check out and return books.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 2: Employee Management</h3>
      <p>Design an Employee class with private data and public methods. Include static members to track total employees and payroll.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 3: Gaming Character</h3>
      <p>Create a GameCharacter class with health, level, experience points, and skills. Implement methods for leveling up and combat.</p>
    </div>
  </section>

  <div class="navigation">
    <a href="/l1-syntax-basics/functions" class="nav-button prev">← Functions</a>
    <a href="/l1-syntax-basics/pointers" class="nav-button next">Pointers & References →</a>
  </div>
</Layout>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    color: #64748b;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: #667eea;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .overview {
    background: #f0f9ff;
    padding: 2rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #0ea5e9;
  }

  .content-section {
    margin: 3rem 0;
  }

  .best-practices {
    display: grid;
    gap: 1rem;
    margin: 2rem 0;
  }

  .practice {
    background: #f0fdf4;
    padding: 1.5rem;
    border-radius: 8px;
    border-left: 4px solid #22c55e;
  }

  .practice h4 {
    margin: 0 0 0.5rem 0;
    color: #166534;
  }

  .practice p {
    margin: 0;
    color: #166534;
  }

  .exercise {
    background: #fff7ed;
    padding: 2rem;
    border-radius: 8px;
    border-left: 4px solid #f59e0b;
    margin: 2rem 0;
  }

  .exercise h3 {
    margin: 0 0 1rem 0;
    color: #92400e;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    margin: 4rem 0 2rem 0;
    padding: 2rem 0;
    border-top: 1px solid #e2e8f0;
  }

  .nav-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .nav-button:hover {
    background: #5a67d8;
  }

  .nav-button.prev {
    background: #64748b;
  }

  .nav-button.prev:hover {
    background: #475569;
  }

  @media (max-width: 768px) {
    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      text-align: center;
    }
  }
</style> 