---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Recursion - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l2-algorithm-basics">Algorithm Basics</a> &gt; Recursion
  </div>

  <h1>Recursion</h1>
  
  <div class="overview">
    <p>
      Recursion is a programming technique where a function calls itself to solve smaller 
      instances of the same problem. It's a powerful tool for solving problems that can be 
      broken down into similar subproblems, such as tree traversals, mathematical calculations, 
      and divide-and-conquer algorithms.
    </p>
    
    <p>
      We'll explore basic recursion concepts, optimization techniques like tail recursion, 
      and advanced applications including backtracking algorithms for constraint satisfaction problems.
    </p>
  </div>

  <section class="content-section">
    <h2>Basic Recursion Concepts</h2>

    <CodeExample 
      client:load
      title="Factorial, Fibonacci, and GCD"
      code={`#include <iostream>
#include <vector>
#include <map>
using namespace std;

class BasicRecursion {
public:
    // Simple factorial function
    static long long factorial(int n) {
        // Base case
        if (n <= 1) {
            return 1;
        }
        // Recursive case
        return n * factorial(n - 1);
    }
    
    // Fibonacci with naive recursion (inefficient)
    static long long fibonacciNaive(int n) {
        if (n <= 1) {
            return n;
        }
        return fibonacciNaive(n - 1) + fibonacciNaive(n - 2);
    }
    
    // Fibonacci with memoization (dynamic programming)
    static map<int, long long> fibMemo;
    static long long fibonacciMemo(int n) {
        if (n <= 1) {
            return n;
        }
        
        if (fibMemo.find(n) != fibMemo.end()) {
            return fibMemo[n];
        }
        
        fibMemo[n] = fibonacciMemo(n - 1) + fibonacciMemo(n - 2);
        return fibMemo[n];
    }
    
    // Greatest Common Divisor using Euclidean algorithm
    static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
    
    // Power function using recursion
    static long long power(int base, int exp) {
        if (exp == 0) {
            return 1;
        }
        if (exp == 1) {
            return base;
        }
        
        if (exp % 2 == 0) {
            // Even exponent: base^exp = (base^(exp/2))^2
            long long half = power(base, exp / 2);
            return half * half;
        } else {
            // Odd exponent: base^exp = base * base^(exp-1)
            return base * power(base, exp - 1);
        }
    }
    
    // Demonstrate recursion with call stack visualization
    static int factorialWithTrace(int n, int depth = 0) {
        string indent(depth * 2, ' ');
        cout << indent << "factorial(" << n << ") called" << endl;
        
        if (n <= 1) {
            cout << indent << "Base case reached: return 1" << endl;
            return 1;
        }
        
        cout << indent << "Recursive call: " << n << " * factorial(" << (n-1) << ")" << endl;
        int result = n * factorialWithTrace(n - 1, depth + 1);
        
        cout << indent << "factorial(" << n << ") returns " << result << endl;
        return result;
    }
    
    // Binary search using recursion
    static int binarySearchRecursive(const vector<int>& arr, int target, int left, int right) {
        if (left > right) {
            return -1; // Not found
        }
        
        int mid = left + (right - left) / 2;
        
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            return binarySearchRecursive(arr, target, mid + 1, right);
        } else {
            return binarySearchRecursive(arr, target, left, mid - 1);
        }
    }
};

// Initialize static member
map<int, long long> BasicRecursion::fibMemo;

int main() {
    cout << "=== Basic Recursion Examples ===" << endl;
    
    // Factorial demonstration
    cout << "\\n1. Factorial with call stack trace:" << endl;
    cout << "factorial(5) = " << BasicRecursion::factorialWithTrace(5) << endl;
    
    // Performance comparison: naive vs memoized Fibonacci
    cout << "\\n2. Fibonacci comparison:" << endl;
    
    int n = 10;
    cout << "Fibonacci(" << n << "):" << endl;
    
    auto start = chrono::high_resolution_clock::now();
    long long naiveResult = BasicRecursion::fibonacciNaive(n);
    auto end = chrono::high_resolution_clock::now();
    auto naiveTime = chrono::duration_cast<chrono::microseconds>(end - start);
    
    start = chrono::high_resolution_clock::now();
    long long memoResult = BasicRecursion::fibonacciMemo(n);
    end = chrono::high_resolution_clock::now();
    auto memoTime = chrono::duration_cast<chrono::microseconds>(end - start);
    
    cout << "Naive recursion: " << naiveResult << " (Time: " << naiveTime.count() << " μs)" << endl;
    cout << "With memoization: " << memoResult << " (Time: " << memoTime.count() << " μs)" << endl;
    
    // GCD examples
    cout << "\\n3. Greatest Common Divisor:" << endl;
    cout << "GCD(48, 18) = " << BasicRecursion::gcd(48, 18) << endl;
    cout << "GCD(100, 25) = " << BasicRecursion::gcd(100, 25) << endl;
    
    // Power function
    cout << "\\n4. Power function:" << endl;
    cout << "2^10 = " << BasicRecursion::power(2, 10) << endl;
    cout << "3^5 = " << BasicRecursion::power(3, 5) << endl;
    
    // Binary search
    cout << "\\n5. Recursive binary search:" << endl;
    vector<int> sortedArray = {1, 3, 5, 7, 9, 11, 13, 15};
    
    cout << "Array: ";
    for (int x : sortedArray) cout << x << " ";
    cout << endl;
    
    int target = 7;
    int result = BasicRecursion::binarySearchRecursive(sortedArray, target, 0, sortedArray.size() - 1);
    cout << "Search for " << target << ": " << (result != -1 ? "Found at index " + to_string(result) : "Not found") << endl;
    
    cout << "\\n=== Recursion Analysis ===" << endl;
    cout << "Components of recursion:" << endl;
    cout << "1. Base case: Condition to stop recursion" << endl;
    cout << "2. Recursive case: Function calls itself with modified parameters" << endl;
    cout << "3. Progress: Each call moves closer to base case" << endl;
    
    cout << "\\nCommon issues:" << endl;
    cout << "- Stack overflow: Too many recursive calls" << endl;
    cout << "- Infinite recursion: Missing or incorrect base case" << endl;
    cout << "- Exponential time complexity: Repeated subproblems (use memoization)" << endl;
    
    return 0;
}`}
      explanation="Basic recursion breaks problems into smaller instances. Key components are base cases (stopping conditions) and recursive calls that progress toward the base case. Memoization can optimize recursive solutions by avoiding repeated calculations."
      output={`=== Basic Recursion Examples ===

1. Factorial with call stack trace:
factorial(5) called
  Recursive call: 5 * factorial(4)
  factorial(4) called
    Recursive call: 4 * factorial(3)
    factorial(3) called
      Recursive call: 3 * factorial(2)
      factorial(2) called
        Recursive call: 2 * factorial(1)
        factorial(1) called
        Base case reached: return 1
        factorial(1) returns 1
      factorial(2) returns 2
    factorial(3) returns 6
  factorial(4) returns 24
factorial(5) returns 120
factorial(5) = 120

2. Fibonacci comparison:
Fibonacci(10):
Naive recursion: 55 (Time: 12 μs)
With memoization: 55 (Time: 1 μs)

3. Greatest Common Divisor:
GCD(48, 18) = 6
GCD(100, 25) = 25

4. Power function:
2^10 = 1024
3^5 = 243

5. Recursive binary search:
Array: 1 3 5 7 9 11 13 15 
Search for 7: Found at index 3

=== Recursion Analysis ===
Components of recursion:
1. Base case: Condition to stop recursion
2. Recursive case: Function calls itself with modified parameters
3. Progress: Each call moves closer to base case

Common issues:
- Stack overflow: Too many recursive calls
- Infinite recursion: Missing or incorrect base case
- Exponential time complexity: Repeated subproblems (use memoization)`}
    />
  </section>

  <section class="content-section">
    <h2>Tree and Graph Recursion</h2>

    <CodeExample 
      client:load
      title="Binary Tree Operations and Path Finding"
      code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class TreeRecursion {
public:
    // Tree height calculation
    static int height(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        return 1 + max(height(root->left), height(root->right));
    }
    
    // Count total nodes in tree
    static int countNodes(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        return 1 + countNodes(root->left) + countNodes(root->right);
    }
    
    // Check if tree is balanced
    static bool isBalanced(TreeNode* root) {
        return checkBalance(root) != -1;
    }
    
    static int checkBalance(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        
        int leftHeight = checkBalance(root->left);
        if (leftHeight == -1) return -1;
        
        int rightHeight = checkBalance(root->right);
        if (rightHeight == -1) return -1;
        
        if (abs(leftHeight - rightHeight) > 1) {
            return -1; // Not balanced
        }
        
        return 1 + max(leftHeight, rightHeight);
    }
    
    // Find path from root to target value
    static bool findPath(TreeNode* root, int target, vector<int>& path) {
        if (root == nullptr) {
            return false;
        }
        
        path.push_back(root->val);
        
        if (root->val == target) {
            return true;
        }
        
        if (findPath(root->left, target, path) || findPath(root->right, target, path)) {
            return true;
        }
        
        path.pop_back(); // Backtrack
        return false;
    }
    
    // Tree traversals
    static void inorderTraversal(TreeNode* root) {
        if (root != nullptr) {
            inorderTraversal(root->left);
            cout << root->val << " ";
            inorderTraversal(root->right);
        }
    }
    
    static void preorderTraversal(TreeNode* root) {
        if (root != nullptr) {
            cout << root->val << " ";
            preorderTraversal(root->left);
            preorderTraversal(root->right);
        }
    }
    
    static void postorderTraversal(TreeNode* root) {
        if (root != nullptr) {
            postorderTraversal(root->left);
            postorderTraversal(root->right);
            cout << root->val << " ";
        }
    }
    
    // Maximum path sum in binary tree
    static int maxPathSum(TreeNode* root) {
        int maxSum = INT_MIN;
        maxPathSumHelper(root, maxSum);
        return maxSum;
    }
    
    static int maxPathSumHelper(TreeNode* root, int& maxSum) {
        if (root == nullptr) {
            return 0;
        }
        
        int leftSum = max(0, maxPathSumHelper(root->left, maxSum));
        int rightSum = max(0, maxPathSumHelper(root->right, maxSum));
        
        int currentMax = root->val + leftSum + rightSum;
        maxSum = max(maxSum, currentMax);
        
        return root->val + max(leftSum, rightSum);
    }
    
    // Print tree structure
    static void printTree(TreeNode* root, string prefix = "", bool isLast = true) {
        if (root != nullptr) {
            cout << prefix << (isLast ? "└── " : "├── ") << root->val << endl;
            
            if (root->left || root->right) {
                if (root->right) {
                    printTree(root->right, prefix + (isLast ? "    " : "│   "), !root->left);
                }
                if (root->left) {
                    printTree(root->left, prefix + (isLast ? "    " : "│   "), true);
                }
            }
        }
    }
};

// Graph DFS using recursion
class GraphRecursion {
private:
    vector<vector<int>> adj;
    vector<bool> visited;
    
public:
    GraphRecursion(int vertices) : adj(vertices), visited(vertices, false) {}
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // For undirected graph
    }
    
    void dfs(int vertex) {
        visited[vertex] = true;
        cout << vertex << " ";
        
        for (int neighbor : adj[vertex]) {
            if (!visited[neighbor]) {
                dfs(neighbor);
            }
        }
    }
    
    void resetVisited() {
        fill(visited.begin(), visited.end(), false);
    }
    
    // Check if path exists between two vertices
    bool hasPath(int start, int end) {
        resetVisited();
        return hasPathHelper(start, end);
    }
    
    bool hasPathHelper(int current, int target) {
        if (current == target) {
            return true;
        }
        
        visited[current] = true;
        
        for (int neighbor : adj[current]) {
            if (!visited[neighbor] && hasPathHelper(neighbor, target)) {
                return true;
            }
        }
        
        return false;
    }
};

int main() {
    cout << "=== Tree Recursion Examples ===" << endl;
    
    // Create a sample binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    
    cout << "\\nTree structure:" << endl;
    TreeRecursion::printTree(root);
    
    cout << "\\n1. Tree Properties:" << endl;
    cout << "Height: " << TreeRecursion::height(root) << endl;
    cout << "Total nodes: " << TreeRecursion::countNodes(root) << endl;
    cout << "Is balanced: " << (TreeRecursion::isBalanced(root) ? "Yes" : "No") << endl;
    
    cout << "\\n2. Tree Traversals:" << endl;
    cout << "Inorder:   ";
    TreeRecursion::inorderTraversal(root);
    cout << endl;
    
    cout << "Preorder:  ";
    TreeRecursion::preorderTraversal(root);
    cout << endl;
    
    cout << "Postorder: ";
    TreeRecursion::postorderTraversal(root);
    cout << endl;
    
    // Find path to a target
    cout << "\\n3. Path Finding:" << endl;
    vector<int> path;
    int target = 5;
    if (TreeRecursion::findPath(root, target, path)) {
        cout << "Path to " << target << ": ";
        for (int i = 0; i < path.size(); i++) {
            cout << path[i];
            if (i < path.size() - 1) cout << " -> ";
        }
        cout << endl;
    }
    
    // Maximum path sum
    cout << "\\n4. Maximum Path Sum: " << TreeRecursion::maxPathSum(root) << endl;
    
    // Graph DFS example
    cout << "\\n=== Graph Recursion Examples ===" << endl;
    
    GraphRecursion graph(6);
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);
    graph.addEdge(3, 5);
    
    cout << "\\nGraph DFS traversal starting from vertex 0: ";
    graph.dfs(0);
    cout << endl;
    
    cout << "Path exists from 0 to 5: " << (graph.hasPath(0, 5) ? "Yes" : "No") << endl;
    cout << "Path exists from 1 to 4: " << (graph.hasPath(1, 4) ? "Yes" : "No") << endl;
    
    // Cleanup
    delete root->left->left;
    delete root->left->right;
    delete root->left;
    delete root->right->left;
    delete root->right->right;
    delete root->right;
    delete root;
    
    return 0;
}`}
      explanation="Tree and graph problems naturally fit recursive solutions. Tree operations like traversal, height calculation, and path finding use recursion to process subtrees. Graph DFS uses recursion to explore connected components systematically."
      output={`=== Tree Recursion Examples ===

Tree structure:
└── 1
    ├── 3
    │   ├── 7
    │   └── 6
    └── 2
        ├── 5
        └── 4

1. Tree Properties:
Height: 3
Total nodes: 7
Is balanced: Yes

2. Tree Traversals:
Inorder:   4 2 5 1 6 3 7 
Preorder:  1 2 4 5 3 6 7 
Postorder: 4 5 2 6 7 3 1 

3. Path Finding:
Path to 5: 1 -> 2 -> 5

4. Maximum Path Sum: 28

=== Graph Recursion Examples ===

Graph DFS traversal starting from vertex 0: 0 1 3 5 2 4 
Path exists from 0 to 5: Yes
Path exists from 1 to 4: Yes`}
    />
  </section>

  <section class="content-section">
    <h2>Backtracking Algorithms</h2>

    <CodeExample 
      client:load
      title="N-Queens, Sudoku Solver, and Permutations"
      code={`#include <iostream>
#include <vector>
#include <string>
using namespace std;

class BacktrackingAlgorithms {
public:
    // N-Queens Problem
    static vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> solutions;
        vector<string> board(n, string(n, '.'));
        solveNQueensHelper(board, 0, solutions);
        return solutions;
    }
    
    static void solveNQueensHelper(vector<string>& board, int row, vector<vector<string>>& solutions) {
        if (row == board.size()) {
            solutions.push_back(board);
            return;
        }
        
        for (int col = 0; col < board.size(); col++) {
            if (isQueenSafe(board, row, col)) {
                board[row][col] = 'Q'; // Place queen
                solveNQueensHelper(board, row + 1, solutions); // Recurse
                board[row][col] = '.'; // Backtrack
            }
        }
    }
    
    static bool isQueenSafe(const vector<string>& board, int row, int col) {
        int n = board.size();
        
        // Check column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') return false;
        }
        
        // Check diagonal (top-left to bottom-right)
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }
        
        // Check diagonal (top-right to bottom-left)
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }
        
        return true;
    }
    
    // Generate all permutations
    static vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        permuteHelper(nums, 0, result);
        return result;
    }
    
    static void permuteHelper(vector<int>& nums, int start, vector<vector<int>>& result) {
        if (start == nums.size()) {
            result.push_back(nums);
            return;
        }
        
        for (int i = start; i < nums.size(); i++) {
            swap(nums[start], nums[i]); // Choose
            permuteHelper(nums, start + 1, result); // Recurse
            swap(nums[start], nums[i]); // Backtrack
        }
    }
    
    // Sudoku Solver
    static bool solveSudoku(vector<vector<char>>& board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    for (char digit = '1'; digit <= '9'; digit++) {
                        if (isValidSudoku(board, i, j, digit)) {
                            board[i][j] = digit; // Place digit
                            
                            if (solveSudoku(board)) {
                                return true; // Solution found
                            }
                            
                            board[i][j] = '.'; // Backtrack
                        }
                    }
                    return false; // No valid digit found
                }
            }
        }
        return true; // Board is complete
    }
    
    static bool isValidSudoku(const vector<vector<char>>& board, int row, int col, char digit) {
        // Check row
        for (int j = 0; j < 9; j++) {
            if (board[row][j] == digit) return false;
        }
        
        // Check column
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == digit) return false;
        }
        
        // Check 3x3 box
        int boxRow = (row / 3) * 3;
        int boxCol = (col / 3) * 3;
        for (int i = boxRow; i < boxRow + 3; i++) {
            for (int j = boxCol; j < boxCol + 3; j++) {
                if (board[i][j] == digit) return false;
            }
        }
        
        return true;
    }
    
    // Subset generation
    static vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> current;
        subsetsHelper(nums, 0, current, result);
        return result;
    }
    
    static void subsetsHelper(const vector<int>& nums, int index, vector<int>& current, vector<vector<int>>& result) {
        result.push_back(current); // Add current subset
        
        for (int i = index; i < nums.size(); i++) {
            current.push_back(nums[i]); // Include current element
            subsetsHelper(nums, i + 1, current, result); // Recurse
            current.pop_back(); // Backtrack
        }
    }
    
    // Word search in grid
    static bool wordSearch(vector<vector<char>>& board, string word) {
        int m = board.size(), n = board[0].size();
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (wordSearchHelper(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    static bool wordSearchHelper(vector<vector<char>>& board, const string& word, int i, int j, int index) {
        if (index == word.length()) {
            return true; // Found complete word
        }
        
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || 
            board[i][j] != word[index] || board[i][j] == '#') {
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '#'; // Mark as visited
        
        // Try all four directions
        bool found = wordSearchHelper(board, word, i + 1, j, index + 1) ||
                    wordSearchHelper(board, word, i - 1, j, index + 1) ||
                    wordSearchHelper(board, word, i, j + 1, index + 1) ||
                    wordSearchHelper(board, word, i, j - 1, index + 1);
        
        board[i][j] = temp; // Backtrack
        return found;
    }
    
    static void printBoard(const vector<string>& board) {
        for (const string& row : board) {
            cout << row << endl;
        }
    }
    
    static void printSudoku(const vector<vector<char>>& board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << board[i][j] << " ";
                if (j == 2 || j == 5) cout << "| ";
            }
            cout << endl;
            if (i == 2 || i == 5) {
                cout << "------+-------+------" << endl;
            }
        }
    }
};

int main() {
    cout << "=== Backtracking Algorithms ===" << endl;
    
    // N-Queens problem
    cout << "\\n1. N-Queens Problem (n=4):" << endl;
    auto queensSolutions = BacktrackingAlgorithms::solveNQueens(4);
    cout << "Number of solutions: " << queensSolutions.size() << endl;
    cout << "First solution:" << endl;
    if (!queensSolutions.empty()) {
        BacktrackingAlgorithms::printBoard(queensSolutions[0]);
    }
    
    // Permutations
    cout << "\\n2. Generate Permutations:" << endl;
    vector<int> nums = {1, 2, 3};
    auto perms = BacktrackingAlgorithms::permute(nums);
    cout << "Permutations of {1, 2, 3}:" << endl;
    for (const auto& perm : perms) {
        cout << "{";
        for (int i = 0; i < perm.size(); i++) {
            cout << perm[i];
            if (i < perm.size() - 1) cout << ", ";
        }
        cout << "}" << endl;
    }
    
    // Subsets
    cout << "\\n3. Generate Subsets:" << endl;
    vector<int> setNums = {1, 2, 3};
    auto subs = BacktrackingAlgorithms::subsets(setNums);
    cout << "Subsets of {1, 2, 3}:" << endl;
    for (const auto& subset : subs) {
        cout << "{";
        for (int i = 0; i < subset.size(); i++) {
            cout << subset[i];
            if (i < subset.size() - 1) cout << ", ";
        }
        cout << "}" << endl;
    }
    
    // Sudoku solver
    cout << "\\n4. Sudoku Solver:" << endl;
    vector<vector<char>> sudoku = {
        {'5','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };
    
    cout << "Original puzzle:" << endl;
    BacktrackingAlgorithms::printSudoku(sudoku);
    
    if (BacktrackingAlgorithms::solveSudoku(sudoku)) {
        cout << "\\nSolved puzzle:" << endl;
        BacktrackingAlgorithms::printSudoku(sudoku);
    } else {
        cout << "No solution exists!" << endl;
    }
    
    // Word search
    cout << "\\n5. Word Search:" << endl;
    vector<vector<char>> grid = {
        {'A','B','C','E'},
        {'S','F','C','S'},
        {'A','D','E','E'}
    };
    
    string word = "ABCCED";
    bool found = BacktrackingAlgorithms::wordSearch(grid, word);
    cout << "Search for '" << word << "': " << (found ? "Found" : "Not found") << endl;
    
    cout << "\\n=== Backtracking Template ===" << endl;
    cout << "function backtrack(path, choices):" << endl;
    cout << "    if (base_case_met):" << endl;
    cout << "        add path to result" << endl;
    cout << "        return" << endl;
    cout << "    " << endl;
    cout << "    for choice in choices:" << endl;
    cout << "        if (is_valid_choice):" << endl;
    cout << "            make_choice()      // Add to path" << endl;
    cout << "            backtrack()       // Recurse" << endl;
    cout << "            undo_choice()     // Remove from path" << endl;
    
    return 0;
}`}
      explanation="Backtracking systematically explores solution spaces by making choices, recursing, and undoing choices when they lead to dead ends. The template involves: choose → explore → unchoose. This approach works for constraint satisfaction problems like N-Queens, Sudoku, and combinatorial generation."
      output={`=== Backtracking Algorithms ===

1. N-Queens Problem (n=4):
Number of solutions: 2
First solution:
.Q..
...Q
Q...
..Q.

2. Generate Permutations:
Permutations of {1, 2, 3}:
{1, 2, 3}
{1, 3, 2}
{2, 1, 3}
{2, 3, 1}
{3, 2, 1}
{3, 1, 2}

3. Generate Subsets:
Subsets of {1, 2, 3}:
{}
{1}
{1, 2}
{1, 2, 3}
{1, 3}
{2}
{2, 3}
{3}

4. Sudoku Solver:
Original puzzle:
5 3 . | . 7 . | . . . 
6 . . | 1 9 5 | . . . 
. 9 8 | . . . | . 6 . 
------+-------+------
8 . . | . 6 . | . . 3 
4 . . | 8 . 3 | . . 1 
7 . . | . 2 . | . . 6 
------+-------+------
. 6 . | . . . | 2 8 . 
. . . | 4 1 9 | . . 5 
. . . | . 8 . | . 7 9 

Solved puzzle:
5 3 4 | 6 7 8 | 9 1 2 
6 7 2 | 1 9 5 | 3 4 8 
1 9 8 | 3 4 2 | 5 6 7 
------+-------+------
8 5 9 | 7 6 1 | 4 2 3 
4 2 6 | 8 5 3 | 7 9 1 
7 1 3 | 9 2 4 | 8 5 6 
------+-------+------
9 6 1 | 5 3 7 | 2 8 4 
2 8 7 | 4 1 9 | 6 3 5 
3 4 5 | 2 8 6 | 1 7 9 

5. Word Search:
Search for 'ABCCED': Found

=== Backtracking Template ===
function backtrack(path, choices):
    if (base_case_met):
        add path to result
        return
    
    for choice in choices:
        if (is_valid_choice):
            make_choice()      // Add to path
            backtrack()       // Recurse
            undo_choice()     // Remove from path`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Define Clear Base Cases</h4>
        <p>Always ensure your recursive function has well-defined base cases that will eventually be reached to prevent infinite recursion.</p>
      </div>
      
      <div class="practice">
        <h4>2. Use Memoization</h4>
        <p>For problems with overlapping subproblems (like Fibonacci), use memoization to avoid redundant calculations and improve performance.</p>
      </div>
      
      <div class="practice">
        <h4>3. Consider Stack Limitations</h4>
        <p>Deep recursion can cause stack overflow. For very deep calls, consider iterative solutions or tail recursion optimization.</p>
      </div>
      
      <div class="practice">
        <h4>4. Backtracking Pattern</h4>
        <p>Follow the choose-explore-unchoose pattern for backtracking problems. Always undo changes when backtracking to maintain state consistency.</p>
      </div>
    </div>
  </section>

  <div class="navigation">
    <a href="/l2-algorithm-basics/searching" class="nav-button prev">← Searching</a>
    <a href="/l2-algorithm-basics/dynamic-programming" class="nav-button next">Dynamic Programming →</a>
  </div>
</Layout> 