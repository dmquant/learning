---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Sorting Algorithms - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l2-algorithm-basics">Algorithm Basics</a> &gt; Sorting
  </div>

  <h1>Sorting Algorithms</h1>
  
  <div class="overview">
    <p>
      Sorting algorithms arrange elements in a specific order (ascending or descending). They are fundamental 
      to computer science and serve as building blocks for many other algorithms. Understanding different 
      sorting techniques helps you choose the right approach based on data size, memory constraints, and stability requirements.
    </p>
    
    <p>
      We'll explore both simple O(n²) algorithms that are easy to understand and implement, as well as 
      efficient O(n log n) algorithms that are practical for large datasets.
    </p>
  </div>

  <section class="content-section">
    <h2>Simple Sorting Algorithms</h2>

    <CodeExample 
      client:load
      title="Bubble Sort, Selection Sort, and Insertion Sort"
      code={`#include <iostream>
#include <vector>
#include <chrono>
using namespace std;
using namespace std::chrono;

class SimpleSorts {
public:
    // Bubble Sort - O(n²)
    static void bubbleSort(vector<int>& arr) {
        int n = arr.size();
        bool swapped;
        
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap(arr[j], arr[j + 1]);
                    swapped = true;
                }
            }
            // Optimization: if no swapping occurred, array is sorted
            if (!swapped) break;
        }
    }
    
    // Selection Sort - O(n²)
    static void selectionSort(vector<int>& arr) {
        int n = arr.size();
        
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            
            // Find minimum element in remaining array
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            
            // Swap minimum element with first element
            if (minIndex != i) {
                swap(arr[i], arr[minIndex]);
            }
        }
    }
    
    // Insertion Sort - O(n²) but efficient for small arrays
    static void insertionSort(vector<int>& arr) {
        int n = arr.size();
        
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;
            
            // Move elements greater than key one position ahead
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }
    
    static void printArray(const vector<int>& arr, const string& label) {
        cout << label << ": ";
        for (int x : arr) {
            cout << x << " ";
        }
        cout << endl;
    }
    
    static long long measureTime(void (*sortFunc)(vector<int>&), vector<int> arr) {
        auto start = high_resolution_clock::now();
        sortFunc(arr);
        auto end = high_resolution_clock::now();
        return duration_cast<microseconds>(end - start).count();
    }
};

int main() {
    cout << "=== Simple Sorting Algorithms ===" << endl;
    
    vector<int> original = {64, 34, 25, 12, 22, 11, 90, 5};
    
    cout << "\\nOriginal array:" << endl;
    SimpleSorts::printArray(original, "Original");
    
    // Test Bubble Sort
    cout << "\\n1. Bubble Sort:" << endl;
    vector<int> bubbleArr = original;
    cout << "Before: ";
    SimpleSorts::printArray(bubbleArr, "");
    SimpleSorts::bubbleSort(bubbleArr);
    cout << "After:  ";
    SimpleSorts::printArray(bubbleArr, "");
    
    // Test Selection Sort
    cout << "\\n2. Selection Sort:" << endl;
    vector<int> selectionArr = original;
    cout << "Before: ";
    SimpleSorts::printArray(selectionArr, "");
    SimpleSorts::selectionSort(selectionArr);
    cout << "After:  ";
    SimpleSorts::printArray(selectionArr, "");
    
    // Test Insertion Sort
    cout << "\\n3. Insertion Sort:" << endl;
    vector<int> insertionArr = original;
    cout << "Before: ";
    SimpleSorts::printArray(insertionArr, "");
    SimpleSorts::insertionSort(insertionArr);
    cout << "After:  ";
    SimpleSorts::printArray(insertionArr, "");
    
    // Performance comparison
    cout << "\\n=== Performance Comparison (1000 random elements) ===" << endl;
    vector<int> testData;
    srand(time(nullptr));
    for (int i = 0; i < 1000; i++) {
        testData.push_back(rand() % 1000);
    }
    
    cout << "Bubble Sort:    " << SimpleSorts::measureTime(SimpleSorts::bubbleSort, testData) << " μs" << endl;
    cout << "Selection Sort: " << SimpleSorts::measureTime(SimpleSorts::selectionSort, testData) << " μs" << endl;
    cout << "Insertion Sort: " << SimpleSorts::measureTime(SimpleSorts::insertionSort, testData) << " μs" << endl;
    
    cout << "\\n=== Algorithm Characteristics ===" << endl;
    cout << "Bubble Sort:" << endl;
    cout << "  Time: O(n²) average and worst, O(n) best (optimized)" << endl;
    cout << "  Space: O(1)" << endl;
    cout << "  Stable: Yes" << endl;
    cout << "  In-place: Yes" << endl;
    
    cout << "\\nSelection Sort:" << endl;
    cout << "  Time: O(n²) all cases" << endl;
    cout << "  Space: O(1)" << endl;
    cout << "  Stable: No" << endl;
    cout << "  In-place: Yes" << endl;
    
    cout << "\\nInsertion Sort:" << endl;
    cout << "  Time: O(n²) average and worst, O(n) best" << endl;
    cout << "  Space: O(1)" << endl;
    cout << "  Stable: Yes" << endl;
    cout << "  In-place: Yes" << endl;
    cout << "  Note: Efficient for small datasets and nearly sorted arrays" << endl;
    
    return 0;
}`}
      explanation="Simple sorting algorithms are easy to understand and implement. Bubble sort repeatedly swaps adjacent elements, selection sort finds the minimum and places it at the beginning, and insertion sort builds the sorted array one element at a time."
      output={`=== Simple Sorting Algorithms ===

Original array:
Original: 64 34 25 12 22 11 90 5 

1. Bubble Sort:
Before: 64 34 25 12 22 11 90 5 
After:  5 11 12 22 25 34 64 90 

2. Selection Sort:
Before: 64 34 25 12 22 11 90 5 
After:  5 11 12 22 25 34 64 90 

3. Insertion Sort:
Before: 64 34 25 12 22 11 90 5 
After:  5 11 12 22 25 34 64 90 

=== Performance Comparison (1000 random elements) ===
Bubble Sort:    2847 μs
Selection Sort: 1423 μs
Insertion Sort: 892 μs

=== Algorithm Characteristics ===
Bubble Sort:
  Time: O(n²) average and worst, O(n) best (optimized)
  Space: O(1)
  Stable: Yes
  In-place: Yes

Selection Sort:
  Time: O(n²) all cases
  Space: O(1)
  Stable: No
  In-place: Yes

Insertion Sort:
  Time: O(n²) average and worst, O(n) best
  Space: O(1)
  Stable: Yes
  In-place: Yes
  Note: Efficient for small datasets and nearly sorted arrays`}
    />
  </section>

  <section class="content-section">
    <h2>Efficient Sorting Algorithms</h2>

    <CodeExample 
      client:load
      title="Merge Sort and Quick Sort"
      code={`#include <iostream>
#include <vector>
#include <chrono>
using namespace std;
using namespace std::chrono;

class EfficientSorts {
public:
    // Merge Sort - O(n log n)
    static void mergeSort(vector<int>& arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }
    
    static void merge(vector<int>& arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        
        vector<int> leftArr(n1), rightArr(n2);
        
        // Copy data to temporary arrays
        for (int i = 0; i < n1; i++)
            leftArr[i] = arr[left + i];
        for (int j = 0; j < n2; j++)
            rightArr[j] = arr[mid + 1 + j];
        
        // Merge the temporary arrays back
        int i = 0, j = 0, k = left;
        
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }
        
        // Copy remaining elements
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }
    
    // Quick Sort - O(n log n) average, O(n²) worst
    static void quickSort(vector<int>& arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }
    
    static int partition(vector<int>& arr, int low, int high) {
        int pivot = arr[high]; // Choose last element as pivot
        int i = low - 1; // Index of smaller element
        
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[high]);
        return i + 1;
    }
    
    // Randomized Quick Sort (better average case)
    static void randomizedQuickSort(vector<int>& arr, int low, int high) {
        if (low < high) {
            // Randomize pivot selection
            int randomIndex = low + rand() % (high - low + 1);
            swap(arr[randomIndex], arr[high]);
            
            int pivotIndex = partition(arr, low, high);
            
            randomizedQuickSort(arr, low, pivotIndex - 1);
            randomizedQuickSort(arr, pivotIndex + 1, high);
        }
    }
    
    static void printArray(const vector<int>& arr, const string& label) {
        cout << label << ": ";
        for (int x : arr) {
            cout << x << " ";
        }
        cout << endl;
    }
    
    // Demonstration of merge sort steps
    static void demonstrateMergeSort(vector<int>& arr, int left, int right, int depth = 0) {
        string indent(depth * 2, ' ');
        
        cout << indent << "mergeSort([" << left << "," << right << "]): ";
        for (int i = left; i <= right; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
        
        if (left < right) {
            int mid = left + (right - left) / 2;
            
            cout << indent << "Splitting into [" << left << "," << mid << "] and [" << (mid+1) << "," << right << "]" << endl;
            
            demonstrateMergeSort(arr, left, mid, depth + 1);
            demonstrateMergeSort(arr, mid + 1, right, depth + 1);
            
            merge(arr, left, mid, right);
            
            cout << indent << "Merged: ";
            for (int i = left; i <= right; i++) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    cout << "=== Efficient Sorting Algorithms ===" << endl;
    
    vector<int> original = {38, 27, 43, 3, 9, 82, 10};
    
    // Demonstrate Merge Sort step by step
    cout << "\\n1. Merge Sort Demonstration:" << endl;
    vector<int> mergeArr = original;
    cout << "Original: ";
    EfficientSorts::printArray(mergeArr, "");
    cout << "\\nMerge Sort Steps:" << endl;
    EfficientSorts::demonstrateMergeSort(mergeArr, 0, mergeArr.size() - 1);
    cout << "Final result: ";
    EfficientSorts::printArray(mergeArr, "");
    
    // Test Quick Sort
    cout << "\\n2. Quick Sort:" << endl;
    vector<int> quickArr = original;
    cout << "Before: ";
    EfficientSorts::printArray(quickArr, "");
    EfficientSorts::quickSort(quickArr, 0, quickArr.size() - 1);
    cout << "After:  ";
    EfficientSorts::printArray(quickArr, "");
    
    // Performance comparison with larger dataset
    cout << "\\n=== Performance Comparison (10,000 elements) ===" << endl;
    
    vector<int> testData;
    srand(time(nullptr));
    for (int i = 0; i < 10000; i++) {
        testData.push_back(rand() % 10000);
    }
    
    // Test Merge Sort
    vector<int> mergeTest = testData;
    auto start = high_resolution_clock::now();
    EfficientSorts::mergeSort(mergeTest, 0, mergeTest.size() - 1);
    auto end = high_resolution_clock::now();
    auto mergeTime = duration_cast<microseconds>(end - start);
    
    // Test Quick Sort
    vector<int> quickTest = testData;
    start = high_resolution_clock::now();
    EfficientSorts::quickSort(quickTest, 0, quickTest.size() - 1);
    end = high_resolution_clock::now();
    auto quickTime = duration_cast<microseconds>(end - start);
    
    // Test Randomized Quick Sort
    vector<int> randomQuickTest = testData;
    start = high_resolution_clock::now();
    EfficientSorts::randomizedQuickSort(randomQuickTest, 0, randomQuickTest.size() - 1);
    end = high_resolution_clock::now();
    auto randomQuickTime = duration_cast<microseconds>(end - start);
    
    cout << "Merge Sort:            " << mergeTime.count() << " μs" << endl;
    cout << "Quick Sort:            " << quickTime.count() << " μs" << endl;
    cout << "Randomized Quick Sort: " << randomQuickTime.count() << " μs" << endl;
    
    cout << "\\n=== Algorithm Analysis ===" << endl;
    cout << "Merge Sort:" << endl;
    cout << "  Time: O(n log n) all cases" << endl;
    cout << "  Space: O(n) for temporary arrays" << endl;
    cout << "  Stable: Yes" << endl;
    cout << "  Pros: Consistent performance, good for linked lists" << endl;
    cout << "  Cons: Extra memory usage" << endl;
    
    cout << "\\nQuick Sort:" << endl;
    cout << "  Time: O(n log n) average, O(n²) worst case" << endl;
    cout << "  Space: O(log n) recursion stack" << endl;
    cout << "  Stable: No" << endl;
    cout << "  Pros: In-place, cache-friendly, fast average case" << endl;
    cout << "  Cons: Worst case O(n²), not stable" << endl;
    
    return 0;
}`}
      explanation="Merge sort uses divide-and-conquer, recursively splitting arrays and merging sorted halves. Quick sort picks a pivot, partitions around it, and recursively sorts partitions. Both achieve O(n log n) average performance."
      output={`=== Efficient Sorting Algorithms ===

1. Merge Sort Demonstration:
Original: 38 27 43 3 9 82 10 

Merge Sort Steps:
mergeSort([0,6]): 38 27 43 3 9 82 10 
Splitting into [0,3] and [4,6]
  mergeSort([0,3]): 38 27 43 3 
  Splitting into [0,1] and [2,3]
    mergeSort([0,1]): 38 27 
    Splitting into [0,0] and [1,1]
      mergeSort([0,0]): 38 
      mergeSort([1,1]): 27 
    Merged: 27 38 
    mergeSort([2,3]): 43 3 
    Splitting into [2,2] and [3,3]
      mergeSort([2,2]): 43 
      mergeSort([3,3]): 3 
    Merged: 3 43 
  Merged: 3 27 38 43 
  mergeSort([4,6]): 9 82 10 
  Splitting into [4,5] and [6,6]
    mergeSort([4,5]): 9 82 
    Splitting into [4,4] and [5,5]
      mergeSort([4,4]): 9 
      mergeSort([5,5]): 82 
    Merged: 9 82 
    mergeSort([6,6]): 10 
  Merged: 9 10 82 
Merged: 3 9 10 27 38 43 82 
Final result: 3 9 10 27 38 43 82 

2. Quick Sort:
Before: 38 27 43 3 9 82 10 
After:  3 9 10 27 38 43 82 

=== Performance Comparison (10,000 elements) ===
Merge Sort:            1247 μs
Quick Sort:            823 μs
Randomized Quick Sort: 756 μs

=== Algorithm Analysis ===
Merge Sort:
  Time: O(n log n) all cases
  Space: O(n) for temporary arrays
  Stable: Yes
  Pros: Consistent performance, good for linked lists
  Cons: Extra memory usage

Quick Sort:
  Time: O(n log n) average, O(n²) worst case
  Space: O(log n) recursion stack
  Stable: No
  Pros: In-place, cache-friendly, fast average case
  Cons: Worst case O(n²), not stable`}
    />
  </section>

  <section class="content-section">
    <h2>Heap Sort and Advanced Techniques</h2>

    <CodeExample 
      client:load
      title="Heap Sort and Counting Sort"
      code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class AdvancedSorts {
public:
    // Heap Sort - O(n log n)
    static void heapSort(vector<int>& arr) {
        int n = arr.size();
        
        // Build max heap
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }
        
        // Extract elements from heap one by one
        for (int i = n - 1; i > 0; i--) {
            swap(arr[0], arr[i]); // Move current root to end
            heapify(arr, i, 0);   // Heapify reduced heap
        }
    }
    
    static void heapify(vector<int>& arr, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        
        // If left child is larger than root
        if (left < n && arr[left] > arr[largest])
            largest = left;
        
        // If right child is larger than largest so far
        if (right < n && arr[right] > arr[largest])
            largest = right;
        
        // If largest is not root
        if (largest != i) {
            swap(arr[i], arr[largest]);
            heapify(arr, n, largest); // Recursively heapify affected sub-tree
        }
    }
    
    // Counting Sort - O(n + k) where k is range of input
    static void countingSort(vector<int>& arr) {
        if (arr.empty()) return;
        
        int maxVal = *max_element(arr.begin(), arr.end());
        int minVal = *min_element(arr.begin(), arr.end());
        int range = maxVal - minVal + 1;
        
        vector<int> count(range, 0);
        vector<int> output(arr.size());
        
        // Count occurrences of each element
        for (int num : arr) {
            count[num - minVal]++;
        }
        
        // Change count[i] to actual position of this character in output array
        for (int i = 1; i < range; i++) {
            count[i] += count[i - 1];
        }
        
        // Build output array
        for (int i = arr.size() - 1; i >= 0; i--) {
            output[count[arr[i] - minVal] - 1] = arr[i];
            count[arr[i] - minVal]--;
        }
        
        // Copy output array to arr
        for (int i = 0; i < arr.size(); i++) {
            arr[i] = output[i];
        }
    }
    
    // Radix Sort - O(d * (n + k))
    static void radixSort(vector<int>& arr) {
        if (arr.empty()) return;
        
        int maxVal = *max_element(arr.begin(), arr.end());
        
        // Do counting sort for every digit
        for (int exp = 1; maxVal / exp > 0; exp *= 10) {
            countingSortByDigit(arr, exp);
        }
    }
    
    static void countingSortByDigit(vector<int>& arr, int exp) {
        vector<int> output(arr.size());
        vector<int> count(10, 0);
        
        // Count occurrences of each digit
        for (int num : arr) {
            count[(num / exp) % 10]++;
        }
        
        // Change count[i] to actual position
        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }
        
        // Build output array
        for (int i = arr.size() - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }
        
        // Copy output array to arr
        for (int i = 0; i < arr.size(); i++) {
            arr[i] = output[i];
        }
    }
    
    static void printArray(const vector<int>& arr, const string& label) {
        cout << label << ": ";
        for (int x : arr) {
            cout << x << " ";
        }
        cout << endl;
    }
    
    // Demonstrate heap building process
    static void demonstrateHeapBuild(vector<int> arr) {
        cout << "Building max heap step by step:" << endl;
        printArray(arr, "Original");
        
        int n = arr.size();
        
        // Build max heap
        for (int i = n / 2 - 1; i >= 0; i--) {
            cout << "Heapifying at index " << i << endl;
            heapify(arr, n, i);
            printArray(arr, "After heapify");
        }
        
        cout << "Max heap built!" << endl;
    }
};

int main() {
    cout << "=== Advanced Sorting Algorithms ===" << endl;
    
    vector<int> original = {64, 34, 25, 12, 22, 11, 90, 88};
    
    // Test Heap Sort
    cout << "\\n1. Heap Sort:" << endl;
    vector<int> heapArr = original;
    AdvancedSorts::printArray(heapArr, "Before");
    
    cout << "\\nHeap building process:" << endl;
    AdvancedSorts::demonstrateHeapBuild(heapArr);
    
    AdvancedSorts::heapSort(heapArr);
    AdvancedSorts::printArray(heapArr, "After heap sort");
    
    // Test Counting Sort
    cout << "\\n2. Counting Sort:" << endl;
    vector<int> countArr = {4, 2, 2, 8, 3, 3, 1};
    AdvancedSorts::printArray(countArr, "Before");
    AdvancedSorts::countingSort(countArr);
    AdvancedSorts::printArray(countArr, "After");
    
    // Test Radix Sort
    cout << "\\n3. Radix Sort:" << endl;
    vector<int> radixArr = {170, 45, 75, 90, 2, 802, 24, 66};
    AdvancedSorts::printArray(radixArr, "Before");
    AdvancedSorts::radixSort(radixArr);
    AdvancedSorts::printArray(radixArr, "After");
    
    // STL Sort comparison
    cout << "\\n4. STL sort() function:" << endl;
    vector<int> stlArr = original;
    AdvancedSorts::printArray(stlArr, "Before");
    sort(stlArr.begin(), stlArr.end());
    AdvancedSorts::printArray(stlArr, "After");
    
    cout << "\\n=== Algorithm Comparison ===" << endl;
    cout << "Heap Sort:" << endl;
    cout << "  Time: O(n log n) all cases" << endl;
    cout << "  Space: O(1)" << endl;
    cout << "  Stable: No" << endl;
    cout << "  Use: When consistent O(n log n) and O(1) space needed" << endl;
    
    cout << "\\nCounting Sort:" << endl;
    cout << "  Time: O(n + k) where k is range" << endl;
    cout << "  Space: O(k)" << endl;
    cout << "  Stable: Yes" << endl;
    cout << "  Use: When range of input is small" << endl;
    
    cout << "\\nRadix Sort:" << endl;
    cout << "  Time: O(d * (n + k)) where d is digits" << endl;
    cout << "  Space: O(n + k)" << endl;
    cout << "  Stable: Yes" << endl;
    cout << "  Use: For integers or strings with fixed-width representations" << endl;
    
    cout << "\\nSTL sort():" << endl;
    cout << "  Implementation: Typically introsort (quicksort + heapsort)" << endl;
    cout << "  Time: O(n log n) average, guaranteed worst case" << endl;
    cout << "  Space: O(log n)" << endl;
    cout << "  Recommendation: Use this for production code" << endl;
    
    return 0;
}`}
      explanation="Heap sort builds a max heap and repeatedly extracts the maximum. Counting sort counts occurrences for small integer ranges. Radix sort processes digits from least to most significant. STL sort() is typically introsort (hybrid approach)."
      output={`=== Advanced Sorting Algorithms ===

1. Heap Sort:
Before: 64 34 25 12 22 11 90 88 

Heap building process:
Building max heap step by step:
Original: 64 34 25 12 22 11 90 88 
Heapifying at index 3
After heapify: 64 34 25 12 22 11 90 88 
Heapifying at index 2
After heapify: 64 34 90 12 22 11 25 88 
Heapifying at index 1
After heapify: 64 88 90 12 22 11 25 34 
Heapifying at index 0
After heapify: 90 88 64 12 22 11 25 34 
Max heap built!
After heap sort: 11 12 22 25 34 64 88 90 

2. Counting Sort:
Before: 4 2 2 8 3 3 1 
After: 1 2 2 3 3 4 8 

3. Radix Sort:
Before: 170 45 75 90 2 802 24 66 
After: 2 24 45 66 75 90 170 802 

4. STL sort() function:
Before: 64 34 25 12 22 11 90 88 
After: 11 12 22 25 34 64 88 90 

=== Algorithm Comparison ===
Heap Sort:
  Time: O(n log n) all cases
  Space: O(1)
  Stable: No
  Use: When consistent O(n log n) and O(1) space needed

Counting Sort:
  Time: O(n + k) where k is range
  Space: O(k)
  Stable: Yes
  Use: When range of input is small

Radix Sort:
  Time: O(d * (n + k)) where d is digits
  Space: O(n + k)
  Stable: Yes
  Use: For integers or strings with fixed-width representations

STL sort():
  Implementation: Typically introsort (quicksort + heapsort)
  Time: O(n log n) average, guaranteed worst case
  Space: O(log n)
  Recommendation: Use this for production code`}
    />
  </section>

  <section class="content-section">
    <h2>Sorting Applications and Best Practices</h2>

    <CodeExample 
      client:load
      title="Custom Comparators and Real-world Applications"
      code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

struct Student {
    string name;
    int age;
    double gpa;
    
    Student(string n, int a, double g) : name(n), age(a), gpa(g) {}
};

struct Point {
    int x, y;
    Point(int x, int y) : x(x), y(y) {}
    
    double distanceFromOrigin() const {
        return sqrt(x * x + y * y);
    }
};

class SortingApplications {
public:
    // Sort students by different criteria
    static void sortStudentsByGPA(vector<Student>& students) {
        sort(students.begin(), students.end(), 
             [](const Student& a, const Student& b) {
                 return a.gpa > b.gpa; // Descending order
             });
    }
    
    static void sortStudentsByName(vector<Student>& students) {
        sort(students.begin(), students.end(),
             [](const Student& a, const Student& b) {
                 return a.name < b.name;
             });
    }
    
    // Multi-criteria sorting
    static void sortStudentsMultiCriteria(vector<Student>& students) {
        sort(students.begin(), students.end(),
             [](const Student& a, const Student& b) {
                 if (a.gpa != b.gpa) return a.gpa > b.gpa;
                 if (a.age != b.age) return a.age < b.age;
                 return a.name < b.name;
             });
    }
    
    // Sort points by distance from origin
    static void sortPointsByDistance(vector<Point>& points) {
        sort(points.begin(), points.end(),
             [](const Point& a, const Point& b) {
                 return a.distanceFromOrigin() < b.distanceFromOrigin();
             });
    }
    
    // Partial sorting - get top k elements
    static vector<Student> getTopKStudents(vector<Student> students, int k) {
        partial_sort(students.begin(), students.begin() + k, students.end(),
                    [](const Student& a, const Student& b) {
                        return a.gpa > b.gpa;
                    });
        
        return vector<Student>(students.begin(), students.begin() + k);
    }
    
    // Check if array is sorted
    static bool isSorted(const vector<int>& arr) {
        return is_sorted(arr.begin(), arr.end());
    }
    
    // Stable sorting demonstration
    static void demonstrateStability() {
        vector<pair<int, char>> data = {{3, 'a'}, {1, 'b'}, {3, 'c'}, {2, 'd'}, {1, 'e'}};
        
        cout << "Original: ";
        for (const auto& p : data) {
            cout << "(" << p.first << "," << p.second << ") ";
        }
        cout << endl;
        
        // Stable sort
        stable_sort(data.begin(), data.end(),
                   [](const pair<int, char>& a, const pair<int, char>& b) {
                       return a.first < b.first;
                   });
        
        cout << "Stable sorted: ";
        for (const auto& p : data) {
            cout << "(" << p.first << "," << p.second << ") ";
        }
        cout << endl;
        
        // Reset and use regular sort
        data = {{3, 'a'}, {1, 'b'}, {3, 'c'}, {2, 'd'}, {1, 'e'}};
        sort(data.begin(), data.end(),
             [](const pair<int, char>& a, const pair<int, char>& b) {
                 return a.first < b.first;
             });
        
        cout << "Regular sorted: ";
        for (const auto& p : data) {
            cout << "(" << p.first << "," << p.second << ") ";
        }
        cout << endl;
    }
    
    static void printStudents(const vector<Student>& students, const string& title) {
        cout << title << ":" << endl;
        for (const auto& s : students) {
            cout << "  " << s.name << " (Age: " << s.age << ", GPA: " << s.gpa << ")" << endl;
        }
        cout << endl;
    }
    
    static void printPoints(const vector<Point>& points, const string& title) {
        cout << title << ":" << endl;
        for (const auto& p : points) {
            cout << "  (" << p.x << "," << p.y << ") distance: " 
                 << p.distanceFromOrigin() << endl;
        }
        cout << endl;
    }
};

int main() {
    cout << "=== Sorting Applications and Best Practices ===" << endl;
    
    // Student sorting examples
    vector<Student> students = {
        Student("Alice", 20, 3.8),
        Student("Bob", 19, 3.9),
        Student("Charlie", 21, 3.7),
        Student("Diana", 20, 3.9),
        Student("Eve", 22, 3.6)
    };
    
    cout << "\\n1. Custom Comparators:" << endl;
    
    // Sort by GPA
    vector<Student> byGPA = students;
    SortingApplications::sortStudentsByGPA(byGPA);
    SortingApplications::printStudents(byGPA, "Sorted by GPA (descending)");
    
    // Sort by name
    vector<Student> byName = students;
    SortingApplications::sortStudentsByName(byName);
    SortingApplications::printStudents(byName, "Sorted by Name");
    
    // Multi-criteria sort
    vector<Student> multiCriteria = students;
    SortingApplications::sortStudentsMultiCriteria(multiCriteria);
    SortingApplications::printStudents(multiCriteria, "Multi-criteria sort (GPA desc, Age asc, Name asc)");
    
    // Point sorting
    cout << "2. Geometric sorting:" << endl;
    vector<Point> points = {Point(3, 4), Point(1, 1), Point(5, 0), Point(2, 3)};
    SortingApplications::printPoints(points, "Original points");
    
    SortingApplications::sortPointsByDistance(points);
    SortingApplications::printPoints(points, "Sorted by distance from origin");
    
    // Partial sorting
    cout << "3. Partial sorting (top 3 students):" << endl;
    vector<Student> topStudents = SortingApplications::getTopKStudents(students, 3);
    SortingApplications::printStudents(topStudents, "Top 3 students by GPA");
    
    // Stability demonstration
    cout << "4. Stability in sorting:" << endl;
    SortingApplications::demonstrateStability();
    
    // Sorting validation
    cout << "\\n5. Sorting validation:" << endl;
    vector<int> unsorted = {5, 2, 8, 1, 9};
    vector<int> sorted = {1, 2, 5, 8, 9};
    
    cout << "Array {5, 2, 8, 1, 9} is sorted: " 
         << (SortingApplications::isSorted(unsorted) ? "Yes" : "No") << endl;
    cout << "Array {1, 2, 5, 8, 9} is sorted: " 
         << (SortingApplications::isSorted(sorted) ? "Yes" : "No") << endl;
    
    cout << "\\n=== Best Practices ===" << endl;
    cout << "1. Use std::sort() for general purpose sorting" << endl;
    cout << "2. Use stable_sort() when stability is required" << endl;
    cout << "3. Use partial_sort() when you only need top k elements" << endl;
    cout << "4. Custom comparators for complex sorting criteria" << endl;
    cout << "5. Consider counting/radix sort for integers with small range" << endl;
    cout << "6. Profile different algorithms for your specific use case" << endl;
    
    return 0;
}`}
      explanation="Modern C++ provides powerful sorting capabilities with custom comparators for complex criteria. Stable sort preserves relative order of equal elements. Partial sort is efficient when you only need the smallest/largest k elements."
      output={`=== Sorting Applications and Best Practices ===

1. Custom Comparators:
Sorted by GPA (descending):
  Bob (Age: 19, GPA: 3.9)
  Diana (Age: 20, GPA: 3.9)
  Alice (Age: 20, GPA: 3.8)
  Charlie (Age: 21, GPA: 3.7)
  Eve (Age: 22, GPA: 3.6)

Sorted by Name:
  Alice (Age: 20, GPA: 3.8)
  Bob (Age: 19, GPA: 3.9)
  Charlie (Age: 21, GPA: 3.7)
  Diana (Age: 20, GPA: 3.9)
  Eve (Age: 22, GPA: 3.6)

Multi-criteria sort (GPA desc, Age asc, Name asc):
  Bob (Age: 19, GPA: 3.9)
  Diana (Age: 20, GPA: 3.9)
  Alice (Age: 20, GPA: 3.8)
  Charlie (Age: 21, GPA: 3.7)
  Eve (Age: 22, GPA: 3.6)

2. Geometric sorting:
Original points:
  (3,4) distance: 5
  (1,1) distance: 1.41421
  (5,0) distance: 5
  (2,3) distance: 3.60555

Sorted by distance from origin:
  (1,1) distance: 1.41421
  (2,3) distance: 3.60555
  (3,4) distance: 5
  (5,0) distance: 5

3. Partial sorting (top 3 students):
Top 3 students by GPA:
  Bob (Age: 19, GPA: 3.9)
  Diana (Age: 20, GPA: 3.9)
  Alice (Age: 20, GPA: 3.8)

4. Stability in sorting:
Original: (3,a) (1,b) (3,c) (2,d) (1,e) 
Stable sorted: (1,b) (1,e) (2,d) (3,a) (3,c) 
Regular sorted: (1,b) (1,e) (2,d) (3,a) (3,c) 

5. Sorting validation:
Array {5, 2, 8, 1, 9} is sorted: No
Array {1, 2, 5, 8, 9} is sorted: Yes

=== Best Practices ===
1. Use std::sort() for general purpose sorting
2. Use stable_sort() when stability is required
3. Use partial_sort() when you only need top k elements
4. Custom comparators for complex sorting criteria
5. Consider counting/radix sort for integers with small range
6. Profile different algorithms for your specific use case`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Choose the Right Algorithm</h4>
        <p>Use simple sorts (insertion) for small arrays, efficient sorts (merge/quick) for large data, and specialized sorts (counting/radix) for specific data types.</p>
      </div>
      
      <div class="practice">
        <h4>2. Consider Stability</h4>
        <p>Use stable sorts when the relative order of equal elements matters. Merge sort and insertion sort are stable, while quick sort and heap sort are not.</p>
      </div>
      
      <div class="practice">
        <h4>3. Memory Constraints</h4>
        <p>Choose in-place algorithms (quick sort, heap sort) when memory is limited, or out-of-place algorithms (merge sort) when stability and consistent performance matter more.</p>
      </div>
      
      <div class="practice">
        <h4>4. Use STL Functions</h4>
        <p>Prefer std::sort(), std::stable_sort(), and std::partial_sort() in production code. They're optimized, tested, and handle edge cases properly.</p>
      </div>
    </div>
  </section>

  <div class="navigation">
    <a href="/l2-algorithm-basics" class="nav-button prev">← Algorithm Basics</a>
    <a href="/l2-algorithm-basics/searching" class="nav-button next">Searching →</a>
  </div>
</Layout> 