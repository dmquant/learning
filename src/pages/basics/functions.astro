---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Functions - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/basics">Basics</a> &gt; Functions
  </div>

  <h1>Functions</h1>
  
  <div class="overview">
    <p>
      Functions are reusable blocks of code that perform specific tasks. They help organize code, 
      avoid repetition, and make programs more modular and maintainable. Functions can take input 
      (parameters), process it, and return output.
    </p>
    
    <p>
      Understanding functions is crucial for writing clean, efficient C++ code. They enable you to 
      break down complex problems into smaller, manageable pieces.
    </p>
  </div>

  <section class="content-section">
    <h2>Function Basics</h2>
    
    <h3>Function Declaration and Definition</h3>

    <CodeExample 
      client:load
      title="Basic Function Structure"
      code={`#include <iostream>
using namespace std;

// Function declaration (prototype)
void greet();
int add(int a, int b);
double calculateArea(double radius);

int main() {
    // Function calls
    greet();
    
    int sum = add(5, 3);
    cout << "Sum: " << sum << endl;
    
    double area = calculateArea(2.5);
    cout << "Area: " << area << endl;
    
    return 0;
}

// Function definitions
void greet() {
    cout << "Hello, World!" << endl;
}

int add(int a, int b) {
    return a + b;
}

double calculateArea(double radius) {
    const double PI = 3.14159;
    return PI * radius * radius;
}`}
      explanation="Functions have three parts: declaration (prototype), call, and definition. The declaration tells the compiler about the function's interface, while the definition provides the implementation."
      output={`Hello, World!
Sum: 8
Area: 19.635`}
    />

    <h3>Function Parameters and Arguments</h3>

    <CodeExample 
      client:load
      title="Parameters and Arguments"
      code={`#include <iostream>
#include <string>
using namespace std;

// Function with multiple parameters
void displayInfo(string name, int age, double salary) {
    cout << "Name: " << name << endl;
    cout << "Age: " << age << endl;
    cout << "Salary: $" << salary << endl;
    cout << "---" << endl;
}

// Function with default parameters
void printMessage(string message, int times = 1, char separator = '-') {
    for (int i = 0; i < times; i++) {
        cout << message << endl;
    }
    for (int i = 0; i < message.length(); i++) {
        cout << separator;
    }
    cout << endl;
}

// Function overloading - same name, different parameters
int multiply(int a, int b) {
    return a * b;
}

double multiply(double a, double b) {
    return a * b;
}

int multiply(int a, int b, int c) {
    return a * b * c;
}

int main() {
    // Calling function with all arguments
    displayInfo("Alice", 30, 75000.50);
    displayInfo("Bob", 25, 65000.00);
    
    // Using default parameters
    cout << "\\nUsing default parameters:" << endl;
    printMessage("Hello");           // Uses defaults: times=1, separator='-'
    printMessage("Welcome", 2);      // Uses default separator='-'
    printMessage("Goodbye", 3, '*'); // All parameters specified
    
    // Function overloading
    cout << "\\nFunction overloading:" << endl;
    cout << "multiply(4, 5) = " << multiply(4, 5) << endl;
    cout << "multiply(2.5, 3.0) = " << multiply(2.5, 3.0) << endl;
    cout << "multiply(2, 3, 4) = " << multiply(2, 3, 4) << endl;
    
    return 0;
}`}
      explanation="Functions can have multiple parameters with default values. Function overloading allows multiple functions with the same name but different parameter lists. The compiler chooses the right version based on arguments."
      output={`Name: Alice
Age: 30
Salary: $75000.5
---
Name: Bob
Age: 25
Salary: $65000
---

Using default parameters:
Hello
-----
Welcome
Welcome
-------
Goodbye
Goodbye
Goodbye
*******

Function overloading:
multiply(4, 5) = 20
multiply(2.5, 3.0) = 7.5
multiply(2, 3, 4) = 24`}
    />
  </section>

  <section class="content-section">
    <h2>Return Values and Types</h2>

    <CodeExample 
      client:load
      title="Return Types and Values"
      code={`#include <iostream>
#include <string>
#include <cmath>
using namespace std;

// Function returning int
int factorial(int n) {
    if (n <= 1) return 1;
    int result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

// Function returning bool
bool isPrime(int n) {
    if (n < 2) return false;
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) return false;
    }
    return true;
}

// Function returning string
string getGrade(int score) {
    if (score >= 90) return "A";
    else if (score >= 80) return "B";
    else if (score >= 70) return "C";
    else if (score >= 60) return "D";
    else return "F";
}

// Function with early return
double divide(double a, double b) {
    if (b == 0) {
        cout << "Error: Division by zero!" << endl;
        return 0;  // Early return on error
    }
    return a / b;
}

// Void function (no return value)
void printArray(int arr[], int size) {
    cout << "Array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    // Using functions with different return types
    cout << "5! = " << factorial(5) << endl;
    
    int num = 17;
    cout << num << " is " << (isPrime(num) ? "prime" : "not prime") << endl;
    
    int score = 85;
    cout << "Score " << score << " gets grade: " << getGrade(score) << endl;
    
    cout << "10 / 3 = " << divide(10, 3) << endl;
    cout << "10 / 0 = " << divide(10, 0) << endl;
    
    int numbers[] = {1, 2, 3, 4, 5};
    printArray(numbers, 5);
    
    return 0;
}`}
      explanation="Functions can return different types: int, bool, string, double, etc. Use early returns for error conditions. Void functions don't return values but perform actions."
      output={`5! = 120
17 is prime
Score 85 gets grade: B
10 / 3 = 3.33333
Error: Division by zero!
10 / 0 = 0
Array: 1 2 3 4 5`}
    />
  </section>

  <section class="content-section">
    <h2>Pass by Value vs Pass by Reference</h2>

    <CodeExample 
      client:load
      title="Parameter Passing Methods"
      code={`#include <iostream>
using namespace std;

// Pass by value - creates a copy
void passByValue(int x) {
    x = x * 2;
    cout << "Inside passByValue: x = " << x << endl;
}

// Pass by reference - uses the original variable
void passByReference(int& x) {
    x = x * 2;
    cout << "Inside passByReference: x = " << x << endl;
}

// Pass by pointer - uses memory address
void passByPointer(int* x) {
    *x = *x * 2;
    cout << "Inside passByPointer: *x = " << *x << endl;
}

// Function to swap two values (pass by reference)
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function to modify array (arrays are passed by reference automatically)
void doubleArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] *= 2;
    }
}

// Const reference - efficient but read-only
void printLargeData(const string& data) {
    cout << "Data length: " << data.length() << endl;
    // data[0] = 'X';  // Error! Cannot modify const reference
}

int main() {
    // Demonstrating pass by value
    int num1 = 10;
    cout << "Before passByValue: num1 = " << num1 << endl;
    passByValue(num1);
    cout << "After passByValue: num1 = " << num1 << endl;
    
    cout << endl;
    
    // Demonstrating pass by reference
    int num2 = 10;
    cout << "Before passByReference: num2 = " << num2 << endl;
    passByReference(num2);
    cout << "After passByReference: num2 = " << num2 << endl;
    
    cout << endl;
    
    // Demonstrating pass by pointer
    int num3 = 10;
    cout << "Before passByPointer: num3 = " << num3 << endl;
    passByPointer(&num3);
    cout << "After passByPointer: num3 = " << num3 << endl;
    
    cout << endl;
    
    // Using swap function
    int a = 5, b = 15;
    cout << "Before swap: a = " << a << ", b = " << b << endl;
    swap(a, b);
    cout << "After swap: a = " << a << ", b = " << b << endl;
    
    cout << endl;
    
    // Array modification
    int numbers[] = {1, 2, 3, 4, 5};
    cout << "Before doubling: ";
    for (int i = 0; i < 5; i++) cout << numbers[i] << " ";
    cout << endl;
    
    doubleArray(numbers, 5);
    cout << "After doubling: ";
    for (int i = 0; i < 5; i++) cout << numbers[i] << " ";
    cout << endl;
    
    // Const reference example
    string largeString = "This is a very long string that we don't want to copy";
    printLargeData(largeString);
    
    return 0;
}`}
      explanation="Pass by value creates copies (safe but potentially slow), pass by reference modifies originals (efficient but requires care), and pass by pointer provides explicit memory access. Use const references for large read-only data."
      output={`Before passByValue: num1 = 10
Inside passByValue: x = 20
After passByValue: num1 = 10

Before passByReference: num2 = 10
Inside passByReference: x = 20
After passByReference: num2 = 20

Before passByPointer: num3 = 10
Inside passByPointer: *x = 20
After passByPointer: num3 = 20

Before swap: a = 5, b = 15
After swap: a = 15, b = 5

Before doubling: 1 2 3 4 5 
After doubling: 2 4 6 8 10 

Data length: 54`}
    />
  </section>

  <section class="content-section">
    <h2>Scope and Lifetime</h2>

    <CodeExample 
      client:load
      title="Variable Scope and Lifetime"
      code={`#include <iostream>
using namespace std;

// Global variable
int globalVar = 100;

void scopeDemo() {
    // Local variable shadows global variable
    int globalVar = 200;
    cout << "Local globalVar in scopeDemo: " << globalVar << endl;
    cout << "Global globalVar (using ::): " << ::globalVar << endl;
    
    // Block scope
    {
        int blockVar = 300;
        cout << "Inside block: blockVar = " << blockVar << endl;
        
        // This shadows the function-level variable
        int globalVar = 400;
        cout << "Inside block: globalVar = " << globalVar << endl;
    }
    // blockVar is not accessible here
    // cout << blockVar;  // Error!
    
    cout << "Back in function: globalVar = " << globalVar << endl;
}

// Static variable example
void countCalls() {
    static int callCount = 0;  // Initialized only once
    callCount++;
    cout << "Function called " << callCount << " times" << endl;
}

// Function with local static variable
int getNextId() {
    static int id = 1000;
    return ++id;
}

int main() {
    cout << "Global variable: " << globalVar << endl;
    
    scopeDemo();
    
    cout << "\\nStatic variable demo:" << endl;
    countCalls();
    countCalls();
    countCalls();
    
    cout << "\\nID generator:" << endl;
    cout << "ID 1: " << getNextId() << endl;
    cout << "ID 2: " << getNextId() << endl;
    cout << "ID 3: " << getNextId() << endl;
    
    // Local variable in main
    int localVar = 50;
    cout << "\\nLocal variable in main: " << localVar << endl;
    
    // Block scope in main
    {
        int x = 10;
        cout << "Block variable x: " << x << endl;
        localVar = 75;  // Can access main's local variable
    }
    cout << "After block, localVar: " << localVar << endl;
    
    return 0;
}`}
      explanation="Variables have different scopes: global (accessible everywhere), function-level (within function), and block-level (within {}). Static variables retain their values between function calls. Use :: to access global variables when shadowed."
      output={`Global variable: 100
Local globalVar in scopeDemo: 200
Global globalVar (using ::): 100
Inside block: blockVar = 300
Inside block: globalVar = 400
Back in function: globalVar = 200

Static variable demo:
Function called 1 times
Function called 2 times
Function called 3 times

ID generator:
ID 1: 1001
ID 2: 1002
ID 3: 1003

Local variable in main: 50
Block variable x: 10
After block, localVar: 75`}
    />
  </section>

  <section class="content-section">
    <h2>Recursive Functions</h2>

    <CodeExample 
      client:load
      title="Recursion Examples"
      code={`#include <iostream>
using namespace std;

// Simple recursion - factorial
int factorial(int n) {
    // Base case
    if (n <= 1) {
        return 1;
    }
    // Recursive case
    return n * factorial(n - 1);
}

// Fibonacci sequence
int fibonacci(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// Sum of digits
int sumOfDigits(int n) {
    if (n == 0) {
        return 0;
    }
    return (n % 10) + sumOfDigits(n / 10);
}

// Power function
double power(double base, int exponent) {
    if (exponent == 0) {
        return 1;
    }
    if (exponent < 0) {
        return 1.0 / power(base, -exponent);
    }
    return base * power(base, exponent - 1);
}

// Binary search (recursive)
int binarySearch(int arr[], int left, int right, int target) {
    if (left > right) {
        return -1;  // Not found
    }
    
    int mid = left + (right - left) / 2;
    
    if (arr[mid] == target) {
        return mid;
    }
    else if (arr[mid] > target) {
        return binarySearch(arr, left, mid - 1, target);
    }
    else {
        return binarySearch(arr, mid + 1, right, target);
    }
}

int main() {
    // Factorial examples
    cout << "Factorial examples:" << endl;
    for (int i = 1; i <= 6; i++) {
        cout << i << "! = " << factorial(i) << endl;
    }
    
    // Fibonacci sequence
    cout << "\\nFibonacci sequence (first 10 terms):" << endl;
    for (int i = 0; i < 10; i++) {
        cout << fibonacci(i) << " ";
    }
    cout << endl;
    
    // Sum of digits
    int number = 12345;
    cout << "\\nSum of digits of " << number << " = " << sumOfDigits(number) << endl;
    
    // Power function
    cout << "\\nPower examples:" << endl;
    cout << "2^5 = " << power(2, 5) << endl;
    cout << "3^4 = " << power(3, 4) << endl;
    cout << "2^(-3) = " << power(2, -3) << endl;
    
    // Binary search
    int sortedArray[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
    int size = sizeof(sortedArray) / sizeof(sortedArray[0]);
    int target = 7;
    
    cout << "\\nBinary search for " << target << " in sorted array:" << endl;
    cout << "Array: ";
    for (int i = 0; i < size; i++) {
        cout << sortedArray[i] << " ";
    }
    cout << endl;
    
    int result = binarySearch(sortedArray, 0, size - 1, target);
    if (result != -1) {
        cout << "Found " << target << " at index " << result << endl;
    } else {
        cout << target << " not found in array" << endl;
    }
    
    return 0;
}`}
      explanation="Recursive functions call themselves with modified parameters. Every recursive function needs a base case to stop recursion and a recursive case that moves toward the base case. Recursion is elegant for problems with self-similar subproblems."
      output={`Factorial examples:
1! = 1
2! = 2
3! = 6
4! = 24
5! = 120
6! = 720

Fibonacci sequence (first 10 terms):
0 1 1 2 3 5 8 13 21 34 

Sum of digits of 12345 = 15

Power examples:
2^5 = 32
3^4 = 81
2^(-3) = 0.125

Binary search for 7 in sorted array:
Array: 1 3 5 7 9 11 13 15 17 19 
Found 7 at index 3`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Single Responsibility</h4>
        <p>Each function should have one clear purpose. Keep functions focused and avoid doing too many things in one function.</p>
      </div>
      
      <div class="practice">
        <h4>2. Meaningful Names</h4>
        <p>Use descriptive function names that clearly indicate what the function does. Avoid abbreviations and use verbs for actions.</p>
      </div>
      
      <div class="practice">
        <h4>3. Keep Functions Small</h4>
        <p>Aim for functions that fit on one screen. If a function is too long, consider breaking it into smaller functions.</p>
      </div>
      
      <div class="practice">
        <h4>4. Use const for Read-only Parameters</h4>
        <p>Use const references for large objects that won't be modified to avoid unnecessary copying and indicate intent.</p>
      </div>
      
      <div class="practice">
        <h4>5. Validate Input Parameters</h4>
        <p>Check for valid input ranges and handle edge cases gracefully. Document any assumptions about parameters.</p>
      </div>
    </div>
  </section>

  <section class="content-section">
    <h2>Practice Exercises</h2>
    
    <div class="exercise">
      <h3>Exercise 1: Calculator Functions</h3>
      <p>Create a calculator with separate functions for addition, subtraction, multiplication, division, and power operations. Include proper error handling.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 2: String Utilities</h3>
      <p>Write functions to reverse a string, count vowels, convert case, and check if a string is a palindrome.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 3: Array Processing</h3>
      <p>Create functions to find the maximum, minimum, average, and standard deviation of an array of numbers.</p>
    </div>
  </section>

  <div class="navigation">
    <a href="/basics/control-structures" class="nav-button prev">← Control Structures</a>
    <a href="/basics/classes" class="nav-button next">Classes & Objects →</a>
  </div>
</Layout>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    color: #64748b;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: #667eea;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .overview {
    background: #f0f9ff;
    padding: 2rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #0ea5e9;
  }

  .content-section {
    margin: 3rem 0;
  }

  .best-practices {
    display: grid;
    gap: 1rem;
    margin: 2rem 0;
  }

  .practice {
    background: #f0fdf4;
    padding: 1.5rem;
    border-radius: 8px;
    border-left: 4px solid #22c55e;
  }

  .practice h4 {
    margin: 0 0 0.5rem 0;
    color: #166534;
  }

  .practice p {
    margin: 0;
    color: #166534;
  }

  .exercise {
    background: #fff7ed;
    padding: 2rem;
    border-radius: 8px;
    border-left: 4px solid #f59e0b;
    margin: 2rem 0;
  }

  .exercise h3 {
    margin: 0 0 1rem 0;
    color: #92400e;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    margin: 4rem 0 2rem 0;
    padding: 2rem 0;
    border-top: 1px solid #e2e8f0;
  }

  .nav-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .nav-button:hover {
    background: #5a67d8;
  }

  .nav-button.prev {
    background: #64748b;
  }

  .nav-button.prev:hover {
    background: #475569;
  }

  @media (max-width: 768px) {
    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      text-align: center;
    }
  }
</style> 