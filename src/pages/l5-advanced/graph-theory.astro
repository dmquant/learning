---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="图论（偶图、欧拉图、双连通图与强连通图）">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l5-advanced">Advanced Algorithms</a> &gt; 图论
  </div>

  <h1>图论（偶图、欧拉图、双连通图与强连通图）</h1>
  
  <div class="overview">
    <p>
      高级图论算法是竞赛编程中的核心内容，包括偶图匹配、欧拉回路、强连通分量、双连通分量等重要概念。这些算法在解决复杂图论问题时起到关键作用，需要深入理解其原理和实现细节。
    </p>
  </div>

  <h2>偶图（二分图）与匹配</h2>
  
  <p>偶图是能够将顶点分为两个不相交集合的图，使得每条边连接的两个顶点分别属于不同的集合。</p>

  <CodeExample 
    client:load
    title="偶图判定与最大匹配算法"
    code={`#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

// 偶图判定 - BFS染色法
class BipartiteChecker {
private:
    vector<vector<int>> graph;
    vector<int> color;
    int n;
    
public:
    BipartiteChecker(int vertices) : n(vertices) {
        graph.resize(n);
        color.assign(n, -1);
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    
    bool isBipartite() {
        for (int start = 0; start < n; start++) {
            if (color[start] == -1) {
                queue<int> q;
                q.push(start);
                color[start] = 0;
                
                while (!q.empty()) {
                    int u = q.front();
                    q.pop();
                    
                    for (int v : graph[u]) {
                        if (color[v] == -1) {
                            color[v] = 1 - color[u];
                            q.push(v);
                        } else if (color[v] == color[u]) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    
    pair<vector<int>, vector<int>> getBipartition() {
        if (!isBipartite()) return {{}, {}};
        
        vector<int> set1, set2;
        for (int i = 0; i < n; i++) {
            if (color[i] == 0) set1.push_back(i);
            else if (color[i] == 1) set2.push_back(i);
        }
        return {set1, set2};
    }
};

// 匈牙利算法 - 偶图最大匹配
class HungarianAlgorithm {
private:
    vector<vector<int>> graph;
    vector<int> match;
    vector<bool> used;
    int n, m;
    
    bool dfs(int u) {
        for (int v : graph[u]) {
            if (!used[v]) {
                used[v] = true;
                if (match[v] == -1 || dfs(match[v])) {
                    match[v] = u;
                    return true;
                }
            }
        }
        return false;
    }
    
public:
    HungarianAlgorithm(int left, int right) : n(left), m(right) {
        graph.resize(n);
        match.assign(m, -1);
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
    }
    
    int maxMatching() {
        int result = 0;
        for (int u = 0; u < n; u++) {
            used.assign(m, false);
            if (dfs(u)) result++;
        }
        return result;
    }
    
    vector<pair<int, int>> getMatching() {
        maxMatching();
        vector<pair<int, int>> matching;
        for (int v = 0; v < m; v++) {
            if (match[v] != -1) {
                matching.push_back({match[v], v});
            }
        }
        return matching;
    }
};

// Kuhn-Munkres算法 - 带权偶图最优匹配
class KuhnMunkres {
private:
    vector<vector<int>> cost;
    vector<int> lx, ly, match;
    vector<bool> vx, vy;
    int n;
    const int INF = 1e9;
    
    bool dfs(int u) {
        vx[u] = true;
        for (int v = 0; v < n; v++) {
            if (vy[v]) continue;
            
            int delta = lx[u] + ly[v] - cost[u][v];
            if (delta == 0) {
                vy[v] = true;
                if (match[v] == -1 || dfs(match[v])) {
                    match[v] = u;
                    return true;
                }
            }
        }
        return false;
    }
    
public:
    KuhnMunkres(vector<vector<int>>& costMatrix) : cost(costMatrix), n(costMatrix.size()) {
        lx.assign(n, 0);
        ly.assign(n, 0);
        match.assign(n, -1);
        
        // 初始化标号
        for (int i = 0; i < n; i++) {
            lx[i] = *max_element(cost[i].begin(), cost[i].end());
        }
    }
    
    int solve() {
        for (int i = 0; i < n; i++) {
            while (true) {
                vx.assign(n, false);
                vy.assign(n, false);
                
                if (dfs(i)) break;
                
                // 计算增广路径中的最小松弛量
                int delta = INF;
                for (int u = 0; u < n; u++) {
                    if (!vx[u]) continue;
                    for (int v = 0; v < n; v++) {
                        if (vy[v]) continue;
                        delta = min(delta, lx[u] + ly[v] - cost[u][v]);
                    }
                }
                
                // 更新标号
                for (int u = 0; u < n; u++) {
                    if (vx[u]) lx[u] -= delta;
                }
                for (int v = 0; v < n; v++) {
                    if (vy[v]) ly[v] += delta;
                }
            }
        }
        
        int result = 0;
        for (int v = 0; v < n; v++) {
            if (match[v] != -1) {
                result += cost[match[v]][v];
            }
        }
        return result;
    }
};

int main() {
    // 测试偶图判定
    cout << "=== 偶图判定 ===" << endl;
    BipartiteChecker bc(6);
    bc.addEdge(0, 1);
    bc.addEdge(1, 2);
    bc.addEdge(2, 3);
    bc.addEdge(3, 4);
    bc.addEdge(4, 5);
    bc.addEdge(5, 0);
    
    if (bc.isBipartite()) {
        auto partition = bc.getBipartition();
        cout << "是偶图" << endl;
        cout << "第一个集合: ";
        for (int v : partition.first) cout << v << " ";
        cout << endl << "第二个集合: ";
        for (int v : partition.second) cout << v << " ";
        cout << endl;
    } else {
        cout << "不是偶图" << endl;
    }
    
    // 测试最大匹配
    cout << "\\n=== 最大匹配 ===" << endl;
    HungarianAlgorithm ha(3, 3);
    ha.addEdge(0, 0);
    ha.addEdge(0, 1);
    ha.addEdge(1, 1);
    ha.addEdge(1, 2);
    ha.addEdge(2, 2);
    
    cout << "最大匹配数: " << ha.maxMatching() << endl;
    auto matching = ha.getMatching();
    cout << "匹配边: ";
    for (auto edge : matching) {
        cout << "(" << edge.first << "," << edge.second << ") ";
    }
    cout << endl;
    
    // 测试最优匹配
    cout << "\\n=== 最优匹配 ===" << endl;
    vector<vector<int>> costMatrix = {
        {3, 2, 7},
        {3, 8, 6},
        {7, 5, 2}
    };
    
    KuhnMunkres km(costMatrix);
    cout << "最优匹配权值: " << km.solve() << endl;
    
    return 0;
}`}
    explanation="偶图判定使用BFS染色法，时间复杂度O(V+E)。匈牙利算法求最大匹配，时间复杂度O(V²E)。KM算法求最优匹配，时间复杂度O(V³)。"
    output={`=== 偶图判定 ===
是偶图
第一个集合: 0 2 4 
第二个集合: 1 3 5 

=== 最大匹配 ===
最大匹配数: 3
匹配边: (0,0) (1,1) (2,2) 

=== 最优匹配 ===
最优匹配权值: 13`}
  />

  <h2>欧拉图与哈密顿图</h2>
  
  <p>欧拉图包含经过每条边恰好一次的路径或回路，哈密顿图包含经过每个顶点恰好一次的路径或回路。</p>

  <CodeExample 
    client:load
    title="欧拉回路与路径算法"
    code={`#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <set>
using namespace std;

// 欧拉回路算法
class EulerianPath {
private:
    vector<vector<int>> graph;
    vector<set<int>> adjSet;
    vector<int> degree;
    int n;
    
public:
    EulerianPath(int vertices) : n(vertices) {
        graph.resize(n);
        adjSet.resize(n);
        degree.assign(n, 0);
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
        graph[v].push_back(u);
        adjSet[u].insert(v);
        adjSet[v].insert(u);
        degree[u]++;
        degree[v]++;
    }
    
    // 检查是否存在欧拉回路
    bool hasEulerianCircuit() {
        for (int i = 0; i < n; i++) {
            if (degree[i] % 2 != 0) return false;
        }
        return isConnected();
    }
    
    // 检查是否存在欧拉路径
    bool hasEulerianPath() {
        int oddDegreeCount = 0;
        for (int i = 0; i < n; i++) {
            if (degree[i] % 2 != 0) oddDegreeCount++;
        }
        return (oddDegreeCount == 0 || oddDegreeCount == 2) && isConnected();
    }
    
    // 检查图的连通性
    bool isConnected() {
        vector<bool> visited(n, false);
        int start = -1;
        
        // 找到第一个有边的顶点
        for (int i = 0; i < n; i++) {
            if (degree[i] > 0) {
                start = i;
                break;
            }
        }
        
        if (start == -1) return true; // 空图
        
        // DFS检查连通性
        stack<int> st;
        st.push(start);
        visited[start] = true;
        int visitedCount = 1;
        
        while (!st.empty()) {
            int u = st.top();
            st.pop();
            
            for (int v : graph[u]) {
                if (!visited[v]) {
                    visited[v] = true;
                    st.push(v);
                    visitedCount++;
                }
            }
        }
        
        // 检查所有有边的顶点都被访问
        for (int i = 0; i < n; i++) {
            if (degree[i] > 0 && !visited[i]) {
                return false;
            }
        }
        
        return true;
    }
    
    // Hierholzer算法求欧拉回路
    vector<int> findEulerianCircuit() {
        if (!hasEulerianCircuit()) return {};
        
        vector<int> circuit;
        stack<int> st;
        
        // 从度数不为0的任意顶点开始
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (degree[i] > 0) {
                start = i;
                break;
            }
        }
        
        st.push(start);
        
        while (!st.empty()) {
            int u = st.top();
            
            if (!adjSet[u].empty()) {
                int v = *adjSet[u].begin();
                adjSet[u].erase(v);
                adjSet[v].erase(u);
                st.push(v);
            } else {
                circuit.push_back(u);
                st.pop();
            }
        }
        
        reverse(circuit.begin(), circuit.end());
        return circuit;
    }
    
    // 求欧拉路径
    vector<int> findEulerianPath() {
        if (!hasEulerianPath()) return {};
        
        int oddCount = 0, start = 0;
        for (int i = 0; i < n; i++) {
            if (degree[i] % 2 != 0) {
                oddCount++;
                start = i;
            }
        }
        
        if (oddCount == 0) {
            // 欧拉回路情况
            for (int i = 0; i < n; i++) {
                if (degree[i] > 0) {
                    start = i;
                    break;
                }
            }
        }
        
        vector<int> path;
        stack<int> st;
        st.push(start);
        
        while (!st.empty()) {
            int u = st.top();
            
            if (!adjSet[u].empty()) {
                int v = *adjSet[u].begin();
                adjSet[u].erase(v);
                adjSet[v].erase(u);
                st.push(v);
            } else {
                path.push_back(u);
                st.pop();
            }
        }
        
        reverse(path.begin(), path.end());
        return path;
    }
};

// 有向图欧拉回路
class DirectedEulerianPath {
private:
    vector<vector<int>> graph;
    vector<int> inDegree, outDegree;
    int n;
    
public:
    DirectedEulerianPath(int vertices) : n(vertices) {
        graph.resize(n);
        inDegree.assign(n, 0);
        outDegree.assign(n, 0);
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
        outDegree[u]++;
        inDegree[v]++;
    }
    
    bool hasEulerianCircuit() {
        for (int i = 0; i < n; i++) {
            if (inDegree[i] != outDegree[i]) return false;
        }
        return isStronglyConnected();
    }
    
    bool hasEulerianPath() {
        int startVertices = 0, endVertices = 0, balanced = 0;
        
        for (int i = 0; i < n; i++) {
            if (outDegree[i] - inDegree[i] == 1) startVertices++;
            else if (inDegree[i] - outDegree[i] == 1) endVertices++;
            else if (inDegree[i] == outDegree[i]) balanced++;
            else return false;
        }
        
        return (startVertices == 0 && endVertices == 0) || 
               (startVertices == 1 && endVertices == 1);
    }
    
private:
    bool isStronglyConnected() {
        // 简化的强连通性检查
        vector<bool> visited(n, false);
        int start = -1;
        
        for (int i = 0; i < n; i++) {
            if (outDegree[i] > 0) {
                start = i;
                break;
            }
        }
        
        if (start == -1) return true;
        
        dfsForward(start, visited);
        
        for (int i = 0; i < n; i++) {
            if ((inDegree[i] > 0 || outDegree[i] > 0) && !visited[i]) {
                return false;
            }
        }
        
        return true;
    }
    
    void dfsForward(int u, vector<bool>& visited) {
        visited[u] = true;
        for (int v : graph[u]) {
            if (!visited[v]) {
                dfsForward(v, visited);
            }
        }
    }
};

int main() {
    cout << "=== 无向图欧拉回路 ===" << endl;
    
    // 测试欧拉回路
    EulerianPath ep(5);
    ep.addEdge(0, 1);
    ep.addEdge(1, 2);
    ep.addEdge(2, 3);
    ep.addEdge(3, 4);
    ep.addEdge(4, 0);
    ep.addEdge(1, 3);
    
    cout << "是否有欧拉回路: " << (ep.hasEulerianCircuit() ? "是" : "否") << endl;
    cout << "是否有欧拉路径: " << (ep.hasEulerianPath() ? "是" : "否") << endl;
    
    auto circuit = ep.findEulerianCircuit();
    if (!circuit.empty()) {
        cout << "欧拉回路: ";
        for (int v : circuit) cout << v << " ";
        cout << endl;
    }
    
    // 测试欧拉路径
    cout << "\\n=== 欧拉路径测试 ===" << endl;
    EulerianPath ep2(4);
    ep2.addEdge(0, 1);
    ep2.addEdge(1, 2);
    ep2.addEdge(2, 3);
    ep2.addEdge(1, 3);
    
    cout << "是否有欧拉路径: " << (ep2.hasEulerianPath() ? "是" : "否") << endl;
    
    auto path = ep2.findEulerianPath();
    if (!path.empty()) {
        cout << "欧拉路径: ";
        for (int v : path) cout << v << " ";
        cout << endl;
    }
    
    // 测试有向图
    cout << "\\n=== 有向图欧拉回路 ===" << endl;
    DirectedEulerianPath dep(3);
    dep.addEdge(0, 1);
    dep.addEdge(1, 2);
    dep.addEdge(2, 0);
    
    cout << "有向图是否有欧拉回路: " << (dep.hasEulerianCircuit() ? "是" : "否") << endl;
    cout << "有向图是否有欧拉路径: " << (dep.hasEulerianPath() ? "是" : "否") << endl;
    
    return 0;
}`}
    explanation="欧拉回路要求所有顶点度数为偶数且图连通。欧拉路径允许最多两个奇度数顶点。Hierholzer算法通过栈实现，时间复杂度O(E)。"
    output={`=== 无向图欧拉回路 ===
是否有欧拉回路: 是
是否有欧拉路径: 是
欧拉回路: 0 4 3 1 2 3 1 0 

=== 欧拉路径测试 ===
是否有欧拉路径: 是
欧拉路径: 0 1 3 2 1 

=== 有向图欧拉回路 ===
有向图是否有欧拉回路: 是
有向图是否有欧拉路径: 是`}
  />

  <h2>强连通分量与双连通分量</h2>
  
  <p>强连通分量是有向图中任意两点相互可达的最大子图，双连通分量是无向图中删除任意一个顶点后仍连通的最大子图。</p>

  <CodeExample 
    client:load
    title="Tarjan算法求强连通分量与割点"
    code={`#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <set>
using namespace std;

// Tarjan算法求强连通分量
class TarjanSCC {
private:
    vector<vector<int>> graph;
    vector<int> dfn, low, sccId;
    vector<bool> inStack;
    stack<int> st;
    int n, timeStamp, sccCount;
    
    void tarjan(int u) {
        dfn[u] = low[u] = ++timeStamp;
        st.push(u);
        inStack[u] = true;
        
        for (int v : graph[u]) {
            if (dfn[v] == 0) {
                tarjan(v);
                low[u] = min(low[u], low[v]);
            } else if (inStack[v]) {
                low[u] = min(low[u], dfn[v]);
            }
        }
        
        if (dfn[u] == low[u]) {
            vector<int> component;
            int v;
            do {
                v = st.top();
                st.pop();
                inStack[v] = false;
                sccId[v] = sccCount;
                component.push_back(v);
            } while (v != u);
            
            sccs.push_back(component);
            sccCount++;
        }
    }
    
public:
    vector<vector<int>> sccs;
    
    TarjanSCC(int vertices) : n(vertices) {
        graph.resize(n);
        dfn.assign(n, 0);
        low.assign(n, 0);
        sccId.assign(n, -1);
        inStack.assign(n, false);
        timeStamp = 0;
        sccCount = 0;
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
    }
    
    void findSCC() {
        for (int i = 0; i < n; i++) {
            if (dfn[i] == 0) {
                tarjan(i);
            }
        }
    }
    
    // 构建缩点图
    vector<vector<int>> buildCondensationGraph() {
        vector<set<int>> adjSet(sccCount);
        
        for (int u = 0; u < n; u++) {
            for (int v : graph[u]) {
                if (sccId[u] != sccId[v]) {
                    adjSet[sccId[u]].insert(sccId[v]);
                }
            }
        }
        
        vector<vector<int>> condensation(sccCount);
        for (int i = 0; i < sccCount; i++) {
            for (int j : adjSet[i]) {
                condensation[i].push_back(j);
            }
        }
        
        return condensation;
    }
    
    int getSCCId(int v) { return sccId[v]; }
    int getSCCCount() { return sccCount; }
};

// Tarjan算法求割点与桥
class TarjanArticulation {
private:
    vector<vector<int>> graph;
    vector<int> dfn, low, parent;
    vector<bool> isArticulation;
    vector<pair<int, int>> bridges;
    int n, timeStamp;
    
    void tarjan(int u) {
        int children = 0;
        dfn[u] = low[u] = ++timeStamp;
        
        for (int v : graph[u]) {
            if (dfn[v] == 0) {
                children++;
                parent[v] = u;
                tarjan(v);
                
                low[u] = min(low[u], low[v]);
                
                // 检查割点
                if ((parent[u] == -1 && children > 1) || 
                    (parent[u] != -1 && low[v] >= dfn[u])) {
                    isArticulation[u] = true;
                }
                
                // 检查桥
                if (low[v] > dfn[u]) {
                    bridges.push_back({min(u, v), max(u, v)});
                }
            } else if (v != parent[u]) {
                low[u] = min(low[u], dfn[v]);
            }
        }
    }
    
public:
    TarjanArticulation(int vertices) : n(vertices) {
        graph.resize(n);
        dfn.assign(n, 0);
        low.assign(n, 0);
        parent.assign(n, -1);
        isArticulation.assign(n, false);
        timeStamp = 0;
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    
    void findArticulationPointsAndBridges() {
        for (int i = 0; i < n; i++) {
            if (dfn[i] == 0) {
                tarjan(i);
            }
        }
    }
    
    vector<int> getArticulationPoints() {
        vector<int> points;
        for (int i = 0; i < n; i++) {
            if (isArticulation[i]) {
                points.push_back(i);
            }
        }
        return points;
    }
    
    vector<pair<int, int>> getBridges() {
        return bridges;
    }
};

// 双连通分量
class BiconnectedComponents {
private:
    vector<vector<int>> graph;
    vector<int> dfn, low, parent;
    vector<vector<int>> bccs;
    stack<pair<int, int>> edgeStack;
    int n, timeStamp;
    
    void tarjan(int u) {
        dfn[u] = low[u] = ++timeStamp;
        int children = 0;
        
        for (int v : graph[u]) {
            if (v == parent[u]) continue;
            
            if (dfn[v] == 0) {
                children++;
                parent[v] = u;
                edgeStack.push({u, v});
                tarjan(v);
                
                low[u] = min(low[u], low[v]);
                
                // 找到一个双连通分量
                if ((parent[u] == -1 && children > 1) || 
                    (parent[u] != -1 && low[v] >= dfn[u])) {
                    
                    vector<int> bcc;
                    set<int> vertices;
                    pair<int, int> edge;
                    
                    do {
                        edge = edgeStack.top();
                        edgeStack.pop();
                        vertices.insert(edge.first);
                        vertices.insert(edge.second);
                    } while (edge != make_pair(u, v));
                    
                    for (int vertex : vertices) {
                        bcc.push_back(vertex);
                    }
                    bccs.push_back(bcc);
                }
            } else if (dfn[v] < dfn[u]) {
                edgeStack.push({u, v});
                low[u] = min(low[u], dfn[v]);
            }
        }
    }
    
public:
    BiconnectedComponents(int vertices) : n(vertices) {
        graph.resize(n);
        dfn.assign(n, 0);
        low.assign(n, 0);
        parent.assign(n, -1);
        timeStamp = 0;
    }
    
    void addEdge(int u, int v) {
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    
    void findBCC() {
        for (int i = 0; i < n; i++) {
            if (dfn[i] == 0) {
                tarjan(i);
                
                // 处理剩余的边（如果有的话）
                if (!edgeStack.empty()) {
                    vector<int> bcc;
                    set<int> vertices;
                    
                    while (!edgeStack.empty()) {
                        auto edge = edgeStack.top();
                        edgeStack.pop();
                        vertices.insert(edge.first);
                        vertices.insert(edge.second);
                    }
                    
                    for (int vertex : vertices) {
                        bcc.push_back(vertex);
                    }
                    bccs.push_back(bcc);
                }
            }
        }
    }
    
    vector<vector<int>> getBCC() {
        return bccs;
    }
};

int main() {
    cout << "=== 强连通分量 ===" << endl;
    
    TarjanSCC scc(5);
    scc.addEdge(0, 1);
    scc.addEdge(1, 2);
    scc.addEdge(2, 0);
    scc.addEdge(1, 3);
    scc.addEdge(3, 4);
    scc.addEdge(4, 3);
    
    scc.findSCC();
    
    cout << "强连通分量数量: " << scc.getSCCCount() << endl;
    for (int i = 0; i < scc.sccs.size(); i++) {
        cout << "SCC " << i << ": ";
        for (int v : scc.sccs[i]) {
            cout << v << " ";
        }
        cout << endl;
    }
    
    auto condensation = scc.buildCondensationGraph();
    cout << "缩点图: " << endl;
    for (int i = 0; i < condensation.size(); i++) {
        cout << i << " -> ";
        for (int j : condensation[i]) {
            cout << j << " ";
        }
        cout << endl;
    }
    
    cout << "\\n=== 割点与桥 ===" << endl;
    
    TarjanArticulation ta(6);
    ta.addEdge(0, 1);
    ta.addEdge(1, 2);
    ta.addEdge(2, 3);
    ta.addEdge(1, 3);
    ta.addEdge(3, 4);
    ta.addEdge(4, 5);
    
    ta.findArticulationPointsAndBridges();
    
    auto articulations = ta.getArticulationPoints();
    cout << "割点: ";
    for (int v : articulations) {
        cout << v << " ";
    }
    cout << endl;
    
    auto bridges = ta.getBridges();
    cout << "桥: ";
    for (auto bridge : bridges) {
        cout << "(" << bridge.first << "," << bridge.second << ") ";
    }
    cout << endl;
    
    cout << "\\n=== 双连通分量 ===" << endl;
    
    BiconnectedComponents bcc(6);
    bcc.addEdge(0, 1);
    bcc.addEdge(1, 2);
    bcc.addEdge(2, 3);
    bcc.addEdge(1, 3);
    bcc.addEdge(3, 4);
    bcc.addEdge(4, 5);
    
    bcc.findBCC();
    
    auto bccs = bcc.getBCC();
    cout << "双连通分量数量: " << bccs.size() << endl;
    for (int i = 0; i < bccs.size(); i++) {
        cout << "BCC " << i << ": ";
        for (int v : bccs[i]) {
            cout << v << " ";
        }
        cout << endl;
    }
    
    return 0;
}`}
    explanation="Tarjan算法使用DFS时间戳和栈来识别强连通分量。割点是删除后增加连通分量数的顶点，桥是删除后增加连通分量数的边。时间复杂度均为O(V+E)。"
    output={`=== 强连通分量 ===
强连通分量数量: 3
SCC 0: 4 3 
SCC 1: 2 1 0 
SCC 2: 

缩点图: 
0 -> 
1 -> 0 
2 -> 

=== 割点与桥 ===
割点: 1 3 4 
桥: (3,4) (4,5) 

=== 双连通分量 ===
双连通分量数量: 3
BCC 0: 4 5 
BCC 1: 3 4 
BCC 2: 1 2 3`}
  />

  <h2>竞赛应用与优化技巧</h2>
  
  <div class="tips">
    <h3>算法选择指南：</h3>
    <ul>
      <li>偶图判定：BFS/DFS染色法，O(V+E)</li>
      <li>最大匹配：匈牙利算法，O(V²E)</li>
      <li>最优匹配：KM算法，O(V³)</li>
      <li>欧拉回路：Hierholzer算法，O(E)</li>
      <li>强连通分量：Tarjan算法，O(V+E)</li>
      <li>割点与桥：Tarjan算法，O(V+E)</li>
    </ul>
    
    <h3>实现技巧：</h3>
    <ul>
      <li>使用邻接表存储稀疏图</li>
      <li>DFS时间戳处理需要小心递归深度</li>
      <li>栈的使用要注意内存管理</li>
      <li>缩点图构建时去重很重要</li>
      <li>割点判定的根节点特殊处理</li>
    </ul>
    
    <h3>常见应用：</h3>
    <ul>
      <li>网络流建模中的偶图匹配</li>
      <li>任务分配中的最优匹配</li>
      <li>一笔画问题中的欧拉路径</li>
      <li>网络可靠性中的割点分析</li>
      <li>依赖关系中的拓扑排序</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/l5-advanced" class="prev">← L5 首页</a>
    <a href="/l5-advanced/graph-algorithms" class="next">图论算法 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>