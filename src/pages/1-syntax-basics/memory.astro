---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Memory Management - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/1-syntax-basics">Syntax Basics</a> &gt; Memory Management
  </div>

  <h1>Memory Management</h1>
  
  <div class="overview">
    <p>
      Memory management is crucial in C++ as it gives you direct control over how your program uses system memory. 
      Unlike garbage-collected languages, C++ requires explicit memory management for dynamic allocation. 
      Understanding stack vs heap, dynamic allocation with new/delete, and modern smart pointers is essential for writing efficient, leak-free programs.
    </p>
    
    <p>
      Poor memory management can lead to memory leaks, dangling pointers, and crashes. Modern C++ provides 
      smart pointers and RAII (Resource Acquisition Is Initialization) to make memory management safer and more automatic.
    </p>
  </div>

  <section class="content-section">
    <h2>Stack vs Heap Memory</h2>

    <CodeExample 
      client:load
      title="Understanding Stack and Heap"
      code={`#include <iostream>
using namespace std;

class SimpleClass {
public:
    int value;
    
    SimpleClass(int v) : value(v) {
        cout << "Constructor called for object with value " << value << endl;
    }
    
    ~SimpleClass() {
        cout << "Destructor called for object with value " << value << endl;
    }
};

void stackExample() {
    cout << "=== Stack Example ===" << endl;
    
    // Stack allocation - automatic memory management
    int stackVariable = 42;
    SimpleClass stackObject(100);
    
    cout << "Stack variable: " << stackVariable << endl;
    cout << "Stack object value: " << stackObject.value << endl;
    cout << "Address of stack variable: " << &stackVariable << endl;
    cout << "Address of stack object: " << &stackObject << endl;
    
    // Local array on stack
    int stackArray[5] = {1, 2, 3, 4, 5};
    cout << "Stack array address: " << stackArray << endl;
    
    cout << "Leaving stackExample function..." << endl;
    // Destructor automatically called when leaving scope
}

void heapExample() {
    cout << "\\n=== Heap Example ===" << endl;
    
    // Heap allocation - manual memory management required
    int* heapVariable = new int(42);
    SimpleClass* heapObject = new SimpleClass(200);
    
    cout << "Heap variable: " << *heapVariable << endl;
    cout << "Heap object value: " << heapObject->value << endl;
    cout << "Address of heap variable: " << heapVariable << endl;
    cout << "Address of heap object: " << heapObject << endl;
    
    // Dynamic array on heap
    int* heapArray = new int[5]{1, 2, 3, 4, 5};
    cout << "Heap array address: " << heapArray << endl;
    
    // Must manually free heap memory
    delete heapVariable;      // Free single object
    delete heapObject;        // Destructor called here
    delete[] heapArray;       // Free array
    
    cout << "Heap memory freed manually" << endl;
}

void memoryComparison() {
    cout << "\\n=== Memory Comparison ===" << endl;
    
    // Stack characteristics
    cout << "Stack Memory:" << endl;
    cout << "- Fast allocation/deallocation" << endl;
    cout << "- Limited size (typically few MB)" << endl;
    cout << "- Automatic cleanup" << endl;
    cout << "- LIFO (Last In, First Out)" << endl;
    cout << "- Variables go out of scope automatically" << endl;
    
    cout << "\\nHeap Memory:" << endl;
    cout << "- Slower allocation/deallocation" << endl;
    cout << "- Large size (limited by system memory)" << endl;
    cout << "- Manual cleanup required" << endl;
    cout << "- Random access" << endl;
    cout << "- Risk of memory leaks if not freed" << endl;
}

int main() {
    stackExample();
    heapExample();
    memoryComparison();
    
    return 0;
}`}
      explanation="Stack memory is automatically managed and fast but limited in size. Heap memory is manually managed, larger, but requires explicit cleanup with delete. Stack variables are destroyed when leaving scope, while heap objects must be manually deleted."
      output={`=== Stack Example ===
Constructor called for object with value 100
Stack variable: 42
Stack object value: 100
Address of stack variable: 0x7fff5fbff6ac
Address of stack object: 0x7fff5fbff6a8
Stack array address: 0x7fff5fbff690
Leaving stackExample function...
Destructor called for object with value 100

=== Heap Example ===
Constructor called for object with value 200
Heap variable: 42
Heap object value: 200
Address of heap variable: 0x600000004010
Address of heap object: 0x600000004020
Heap array address: 0x600000004030
Destructor called for object with value 200
Heap memory freed manually

=== Memory Comparison ===
Stack Memory:
- Fast allocation/deallocation
- Limited size (typically few MB)
- Automatic cleanup
- LIFO (Last In, First Out)
- Variables go out of scope automatically

Heap Memory:
- Slower allocation/deallocation
- Large size (limited by system memory)
- Manual cleanup required
- Random access
- Risk of memory leaks if not freed`}
    />
  </section>

  <section class="content-section">
    <h2>Dynamic Memory Allocation</h2>

    <CodeExample 
      client:load
      title="new and delete Operators"
      code={`#include <iostream>
using namespace std;

class Person {
private:
    string name;
    int age;
    
public:
    Person(string n, int a) : name(n), age(a) {
        cout << "Person created: " << name << " (age " << age << ")" << endl;
    }
    
    ~Person() {
        cout << "Person destroyed: " << name << endl;
    }
    
    void display() {
        cout << "Person: " << name << ", Age: " << age << endl;
    }
    
    void setAge(int newAge) { age = newAge; }
    string getName() { return name; }
};

void basicDynamicAllocation() {
    cout << "=== Basic Dynamic Allocation ===" << endl;
    
    // Single object allocation
    Person* person1 = new Person("Alice", 25);
    person1->display();
    person1->setAge(26);
    person1->display();
    
    // Don't forget to delete!
    delete person1;
    person1 = nullptr;  // Good practice to avoid dangling pointer
    
    // Single variable allocation
    int* number = new int(42);
    cout << "Dynamic integer: " << *number << endl;
    delete number;
    number = nullptr;
    
    cout << "Basic allocation completed" << endl;
}

void arrayDynamicAllocation() {
    cout << "\\n=== Dynamic Array Allocation ===" << endl;
    
    int size = 5;
    
    // Dynamic array of primitive types
    int* numbers = new int[size];
    for (int i = 0; i < size; i++) {
        numbers[i] = i * 10;
    }
    
    cout << "Dynamic array: ";
    for (int i = 0; i < size; i++) {
        cout << numbers[i] << " ";
    }
    cout << endl;
    
    delete[] numbers;  // Use delete[] for arrays
    numbers = nullptr;
    
    // Dynamic array of objects
    Person* people = new Person[3]{
        Person("Bob", 30),
        Person("Carol", 28),
        Person("Dave", 35)
    };
    
    cout << "\\nDynamic array of objects:" << endl;
    for (int i = 0; i < 3; i++) {
        people[i].display();
    }
    
    delete[] people;  // Calls destructor for each object
    people = nullptr;
    
    cout << "Array allocation completed" << endl;
}

void errorProneCode() {
    cout << "\\n=== Common Memory Errors ===" << endl;
    
    // 1. Memory leak example (DON'T DO THIS!)
    cout << "Creating memory leak (intentional for demo):" << endl;
    Person* leakyPerson = new Person("Leaky", 99);
    // Forgot to delete leakyPerson - MEMORY LEAK!
    // delete leakyPerson;  // This line is commented out intentionally
    
    // 2. Double delete (dangerous!)
    Person* person = new Person("Temporary", 25);
    delete person;
    // delete person;  // DON'T DO THIS - double delete is undefined behavior!
    person = nullptr;  // Set to null after delete
    
    // 3. Using deleted memory (dangling pointer)
    Person* anotherPerson = new Person("Another", 30);
    delete anotherPerson;
    // anotherPerson->display();  // DON'T DO THIS - using deleted memory!
    anotherPerson = nullptr;
    
    cout << "Error examples completed (some errors intentionally left for demo)" << endl;
}

void safeAllocationPatterns() {
    cout << "\\n=== Safe Allocation Patterns ===" << endl;
    
    // Pattern 1: Immediate null check
    Person* person = new(nothrow) Person("Safe", 40);
    if (person == nullptr) {
        cout << "Failed to allocate memory!" << endl;
        return;
    }
    
    person->display();
    delete person;
    person = nullptr;
    
    // Pattern 2: RAII with scope
    {
        Person* scopedPerson = new Person("Scoped", 35);
        scopedPerson->display();
        delete scopedPerson;  // Always paired with new
    }  // Clear scope makes it obvious
    
    // Pattern 3: Exception-safe allocation
    try {
        Person* persons = new Person[2]{
            Person("First", 20),
            Person("Second", 22)
        };
        
        // Use the array...
        for (int i = 0; i < 2; i++) {
            persons[i].display();
        }
        
        delete[] persons;
    } catch (bad_alloc& e) {
        cout << "Memory allocation failed: " << e.what() << endl;
    }
    
    cout << "Safe allocation patterns completed" << endl;
}

int main() {
    basicDynamicAllocation();
    arrayDynamicAllocation();
    errorProneCode();
    safeAllocationPatterns();
    
    cout << "\\nMemory Management Rules:" << endl;
    cout << "1. Every 'new' must have a corresponding 'delete'" << endl;
    cout << "2. Use 'delete[]' for arrays allocated with 'new[]'" << endl;
    cout << "3. Set pointers to nullptr after deleting" << endl;
    cout << "4. Never delete the same pointer twice" << endl;
    cout << "5. Never use a pointer after deleting it" << endl;
    
    return 0;
}`}
      explanation="Dynamic allocation uses 'new' to allocate and 'delete' to free memory. Every 'new' must have a matching 'delete', and arrays need 'delete[]'. Common errors include memory leaks (forgetting delete), double deletion, and using deleted memory."
      output={`=== Basic Dynamic Allocation ===
Person created: Alice (age 25)
Person: Alice, Age: 25
Person: Alice, Age: 26
Person destroyed: Alice
Basic allocation completed

=== Dynamic Array Allocation ===
Dynamic array: 0 10 20 30 40 

Dynamic array of objects:
Person created: Bob (age 30)
Person created: Carol (age 28)
Person created: Dave (age 35)
Person: Bob, Age: 30
Person: Carol, Age: 28
Person: Dave, Age: 35
Person destroyed: Dave
Person destroyed: Carol
Person destroyed: Bob
Array allocation completed

=== Common Memory Errors ===
Creating memory leak (intentional for demo):
Person created: Leaky (age 99)
Person created: Temporary (age 25)
Person destroyed: Temporary
Error examples completed (some errors intentionally left for demo)

=== Safe Allocation Patterns ===
Person created: Safe (age 40)
Person: Safe, Age: 40
Person destroyed: Safe
Person created: Scoped (age 35)
Person: Scoped, Age: 35
Person destroyed: Scoped
Person created: First (age 20)
Person created: Second (age 22)
Person: First, Age: 20
Person: Second, Age: 22
Person destroyed: Second
Person destroyed: First
Safe allocation patterns completed

Memory Management Rules:
1. Every 'new' must have a corresponding 'delete'
2. Use 'delete[]' for arrays allocated with 'new[]'
3. Set pointers to nullptr after deleting
4. Never delete the same pointer twice
5. Never use a pointer after deleting it`}
    />
  </section>

  <section class="content-section">
    <h2>Smart Pointers (C++11 and later)</h2>

    <CodeExample 
      client:load
      title="Modern Memory Management with Smart Pointers"
      code={`#include <iostream>
#include <memory>
#include <vector>
using namespace std;

class Resource {
private:
    string name;
    int id;
    
public:
    Resource(string n, int i) : name(n), id(i) {
        cout << "Resource created: " << name << " (ID: " << id << ")" << endl;
    }
    
    ~Resource() {
        cout << "Resource destroyed: " << name << " (ID: " << id << ")" << endl;
    }
    
    void use() {
        cout << "Using resource: " << name << " (ID: " << id << ")" << endl;
    }
    
    string getName() { return name; }
    int getId() { return id; }
};

void uniquePtrExample() {
    cout << "=== unique_ptr Example ===" << endl;
    
    // unique_ptr automatically manages memory
    unique_ptr<Resource> resource1 = make_unique<Resource>("Database", 1);
    resource1->use();
    
    // Automatic cleanup when going out of scope
    {
        unique_ptr<Resource> resource2 = make_unique<Resource>("File", 2);
        resource2->use();
        cout << "Leaving inner scope..." << endl;
    }  // resource2 automatically destroyed here
    
    // Transfer ownership with move
    unique_ptr<Resource> resource3 = make_unique<Resource>("Network", 3);
    unique_ptr<Resource> resource4 = move(resource3);  // Transfer ownership
    
    if (resource3 == nullptr) {
        cout << "resource3 is now null after move" << endl;
    }
    
    resource4->use();
    
    // Array with unique_ptr
    unique_ptr<int[]> numbers = make_unique<int[]>(5);
    for (int i = 0; i < 5; i++) {
        numbers[i] = i * 10;
    }
    
    cout << "Array values: ";
    for (int i = 0; i < 5; i++) {
        cout << numbers[i] << " ";
    }
    cout << endl;
    
    cout << "Leaving uniquePtrExample..." << endl;
    // All unique_ptrs automatically cleaned up
}

void sharedPtrExample() {
    cout << "\\n=== shared_ptr Example ===" << endl;
    
    // shared_ptr allows multiple owners
    shared_ptr<Resource> shared1 = make_shared<Resource>("Shared Resource", 10);
    cout << "Reference count: " << shared1.use_count() << endl;
    
    {
        shared_ptr<Resource> shared2 = shared1;  // Copy, increases ref count
        cout << "Reference count after copy: " << shared1.use_count() << endl;
        
        shared_ptr<Resource> shared3 = shared1;  // Another copy
        cout << "Reference count with 3 owners: " << shared1.use_count() << endl;
        
        shared2->use();
        shared3->use();
        
        cout << "Leaving inner scope..." << endl;
    }  // shared2 and shared3 destroyed, ref count decreases
    
    cout << "Reference count after inner scope: " << shared1.use_count() << endl;
    shared1->use();
    
    cout << "Leaving sharedPtrExample..." << endl;
    // shared1 destroyed, resource automatically cleaned up when ref count reaches 0
}

void weakPtrExample() {
    cout << "\\n=== weak_ptr Example ===" << endl;
    
    weak_ptr<Resource> weak;
    
    {
        shared_ptr<Resource> shared = make_shared<Resource>("Weak Example", 20);
        weak = shared;  // weak_ptr doesn't affect reference count
        
        cout << "shared_ptr ref count: " << shared.use_count() << endl;
        cout << "weak_ptr expired? " << weak.expired() << endl;
        
        // Use weak_ptr safely
        if (auto locked = weak.lock()) {  // Convert to shared_ptr
            locked->use();
        }
        
        cout << "Leaving scope with shared_ptr..." << endl;
    }  // shared_ptr destroyed, resource cleaned up
    
    cout << "After shared_ptr destroyed:" << endl;
    cout << "weak_ptr expired? " << weak.expired() << endl;
    
    if (auto locked = weak.lock()) {
        locked->use();
    } else {
        cout << "Resource no longer available through weak_ptr" << endl;
    }
}

void smartPointerComparison() {
    cout << "\\n=== Smart Pointer Comparison ===" << endl;
    
    cout << "unique_ptr:" << endl;
    cout << "- Exclusive ownership" << endl;
    cout << "- Cannot be copied, only moved" << endl;
    cout << "- Zero overhead compared to raw pointer" << endl;
    cout << "- Use when you need single ownership" << endl;
    
    cout << "\\nshared_ptr:" << endl;
    cout << "- Shared ownership (reference counting)" << endl;
    cout << "- Can be copied" << endl;
    cout << "- Small overhead for reference counting" << endl;
    cout << "- Use when multiple objects need to share resource" << endl;
    
    cout << "\\nweak_ptr:" << endl;
    cout << "- Non-owning observer" << endl;
    cout << "- Doesn't affect reference count" << endl;
    cout << "- Can detect if resource is still valid" << endl;
    cout << "- Use to break circular references" << endl;
}

int main() {
    uniquePtrExample();
    sharedPtrExample();
    weakPtrExample();
    smartPointerComparison();
    
    cout << "\\nSmart Pointer Best Practices:" << endl;
    cout << "1. Prefer make_unique and make_shared" << endl;
    cout << "2. Use unique_ptr by default" << endl;
    cout << "3. Use shared_ptr only when sharing is needed" << endl;
    cout << "4. Use weak_ptr to break cycles" << endl;
    cout << "5. Avoid mixing smart pointers with raw pointers" << endl;
    
    return 0;
}`}
      explanation="Smart pointers provide automatic memory management. unique_ptr offers exclusive ownership with zero overhead. shared_ptr enables shared ownership with reference counting. weak_ptr provides non-owning observation to break cycles."
      output={`=== unique_ptr Example ===
Resource created: Database (ID: 1)
Using resource: Database (ID: 1)
Resource created: File (ID: 2)
Using resource: File (ID: 2)
Leaving inner scope...
Resource destroyed: File (ID: 2)
Resource created: Network (ID: 3)
resource3 is now null after move
Using resource: Network (ID: 3)
Array values: 0 10 20 30 40 
Leaving uniquePtrExample...
Resource destroyed: Network (ID: 3)
Resource destroyed: Database (ID: 1)

=== shared_ptr Example ===
Resource created: Shared Resource (ID: 10)
Reference count: 1
Reference count after copy: 2
Reference count with 3 owners: 3
Using resource: Shared Resource (ID: 10)
Using resource: Shared Resource (ID: 10)
Leaving inner scope...
Reference count after inner scope: 1
Using resource: Shared Resource (ID: 10)
Leaving sharedPtrExample...
Resource destroyed: Shared Resource (ID: 10)

=== weak_ptr Example ===
Resource created: Weak Example (ID: 20)
shared_ptr ref count: 1
weak_ptr expired? false
Using resource: Weak Example (ID: 20)
Leaving scope with shared_ptr...
Resource destroyed: Weak Example (ID: 20)
After shared_ptr destroyed:
weak_ptr expired? true
Resource no longer available through weak_ptr

=== Smart Pointer Comparison ===
unique_ptr:
- Exclusive ownership
- Cannot be copied, only moved
- Zero overhead compared to raw pointer
- Use when you need single ownership

shared_ptr:
- Shared ownership (reference counting)
- Can be copied
- Small overhead for reference counting
- Use when multiple objects need to share resource

weak_ptr:
- Non-owning observer
- Doesn't affect reference count
- Can detect if resource is still valid
- Use to break circular references

Smart Pointer Best Practices:
1. Prefer make_unique and make_shared
2. Use unique_ptr by default
3. Use shared_ptr only when sharing is needed
4. Use weak_ptr to break cycles
5. Avoid mixing smart pointers with raw pointers`}
    />
  </section>

  <section class="content-section">
    <h2>RAII and Resource Management</h2>

    <CodeExample 
      client:load
      title="RAII (Resource Acquisition Is Initialization)"
      code={`#include <iostream>
#include <fstream>
#include <memory>
#include <vector>
using namespace std;

// RAII wrapper for file handling
class FileManager {
private:
    ofstream file;
    string filename;
    
public:
    FileManager(const string& fname) : filename(fname) {
        file.open(filename);
        if (file.is_open()) {
            cout << "File opened: " << filename << endl;
        } else {
            cout << "Failed to open file: " << filename << endl;
        }
    }
    
    ~FileManager() {
        if (file.is_open()) {
            file.close();
            cout << "File closed: " << filename << endl;
        }
    }
    
    bool isOpen() { return file.is_open(); }
    
    void writeLine(const string& text) {
        if (file.is_open()) {
            file << text << endl;
        }
    }
};

// RAII wrapper for array management
template<typename T>
class SafeArray {
private:
    unique_ptr<T[]> data;
    size_t size;
    
public:
    SafeArray(size_t s) : size(s), data(make_unique<T[]>(s)) {
        cout << "SafeArray created with size " << size << endl;
    }
    
    ~SafeArray() {
        cout << "SafeArray destroyed" << endl;
        // unique_ptr automatically handles cleanup
    }
    
    T& operator[](size_t index) {
        if (index >= size) {
            throw out_of_range("Index out of bounds");
        }
        return data[index];
    }
    
    size_t getSize() const { return size; }
};

// RAII for multiple resources
class DatabaseConnection {
private:
    string connectionString;
    bool connected;
    
public:
    DatabaseConnection(const string& connStr) : connectionString(connStr), connected(false) {
        // Simulate connection
        connected = true;
        cout << "Database connected: " << connectionString << endl;
    }
    
    ~DatabaseConnection() {
        if (connected) {
            connected = false;
            cout << "Database disconnected: " << connectionString << endl;
        }
    }
    
    void executeQuery(const string& query) {
        if (connected) {
            cout << "Executing query: " << query << endl;
        }
    }
    
    bool isConnected() const { return connected; }
};

void raiiBenefits() {
    cout << "=== RAII Benefits Demonstration ===" << endl;
    
    // Resources automatically managed
    {
        FileManager file("example.txt");
        if (file.isOpen()) {
            file.writeLine("Hello RAII!");
            file.writeLine("Automatic cleanup!");
        }
        
        SafeArray<int> numbers(5);
        for (size_t i = 0; i < numbers.getSize(); i++) {
            numbers[i] = i * 10;
            cout << "numbers[" << i << "] = " << numbers[i] << endl;
        }
        
        DatabaseConnection db("localhost:3306");
        db.executeQuery("SELECT * FROM users");
        
        cout << "Leaving scope..." << endl;
    }  // All resources automatically cleaned up here
    
    cout << "After scope - all resources cleaned up automatically" << endl;
}

void exceptionSafety() {
    cout << "\\n=== Exception Safety with RAII ===" << endl;
    
    try {
        FileManager file("exception_test.txt");
        SafeArray<double> values(3);
        DatabaseConnection db("test_server:5432");
        
        // Fill array
        values[0] = 1.1;
        values[1] = 2.2;
        values[2] = 3.3;
        
        // This might throw an exception
        cout << "Accessing valid index: " << values[1] << endl;
        
        // This will throw an exception
        cout << "Accessing invalid index: " << values[10] << endl;  // Out of bounds!
        
    } catch (const exception& e) {
        cout << "Exception caught: " << e.what() << endl;
        cout << "RAII ensures resources are still cleaned up!" << endl;
    }
    
    cout << "Exception handling completed" << endl;
}

class ResourceManager {
private:
    vector<unique_ptr<DatabaseConnection>> connections;
    unique_ptr<FileManager> logFile;
    
public:
    ResourceManager() {
        logFile = make_unique<FileManager>("system.log");
        cout << "ResourceManager created" << endl;
    }
    
    ~ResourceManager() {
        cout << "ResourceManager destroyed" << endl;
        // unique_ptr and vector automatically clean up
    }
    
    void addConnection(const string& connStr) {
        connections.push_back(make_unique<DatabaseConnection>(connStr));
        if (logFile && logFile->isOpen()) {
            logFile->writeLine("Connection added: " + connStr);
        }
    }
    
    void executeOnAll(const string& query) {
        for (auto& conn : connections) {
            if (conn && conn->isConnected()) {
                conn->executeQuery(query);
            }
        }
    }
    
    size_t getConnectionCount() const { return connections.size(); }
};

void complexRAII() {
    cout << "\\n=== Complex RAII Example ===" << endl;
    
    {
        ResourceManager manager;
        manager.addConnection("server1:3306");
        manager.addConnection("server2:3306");
        manager.addConnection("server3:3306");
        
        cout << "Managing " << manager.getConnectionCount() << " connections" << endl;
        manager.executeOnAll("SELECT COUNT(*) FROM products");
        
        cout << "Leaving complex RAII scope..." << endl;
    }  // All resources automatically cleaned up in correct order
    
    cout << "Complex RAII completed" << endl;
}

int main() {
    raiiBenefits();
    exceptionSafety();
    complexRAII();
    
    cout << "\\nRAII Principles:" << endl;
    cout << "1. Acquire resources in constructor" << endl;
    cout << "2. Release resources in destructor" << endl;
    cout << "3. Make copying/assignment safe or disable them" << endl;
    cout << "4. Resources are automatically managed" << endl;
    cout << "5. Exception-safe by design" << endl;
    cout << "6. No manual cleanup needed" << endl;
    
    return 0;
}`}
      explanation="RAII (Resource Acquisition Is Initialization) ties resource management to object lifetime. Resources are acquired in constructors and released in destructors. This provides automatic cleanup, exception safety, and prevents resource leaks."
      output={`=== RAII Benefits Demonstration ===
File opened: example.txt
SafeArray created with size 5
numbers[0] = 0
numbers[1] = 10
numbers[2] = 20
numbers[3] = 30
numbers[4] = 40
Database connected: localhost:3306
Executing query: SELECT * FROM users
Leaving scope...
Database disconnected: localhost:3306
SafeArray destroyed
File closed: example.txt
After scope - all resources cleaned up automatically

=== Exception Safety with RAII ===
File opened: exception_test.txt
SafeArray created with size 3
Database connected: test_server:5432
Accessing valid index: 2.2
Exception caught: Index out of bounds
RAII ensures resources are still cleaned up!
Database disconnected: test_server:5432
SafeArray destroyed
File closed: exception_test.txt
Exception handling completed

=== Complex RAII Example ===
File opened: system.log
ResourceManager created
Database connected: server1:3306
Database connected: server2:3306
Database connected: server3:3306
Managing 3 connections
Executing query: SELECT COUNT(*) FROM products
Executing query: SELECT COUNT(*) FROM products
Executing query: SELECT COUNT(*) FROM products
Leaving complex RAII scope...
ResourceManager destroyed
Database disconnected: server3:3306
Database disconnected: server2:3306
Database disconnected: server1:3306
File closed: system.log
Complex RAII completed

RAII Principles:
1. Acquire resources in constructor
2. Release resources in destructor
3. Make copying/assignment safe or disable them
4. Resources are automatically managed
5. Exception-safe by design
6. No manual cleanup needed`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Prefer Stack Allocation</h4>
        <p>Use stack allocation when possible - it's faster and automatically managed. Only use heap allocation when you need dynamic sizing or lifetime beyond scope.</p>
      </div>
      
      <div class="practice">
        <h4>2. Use Smart Pointers</h4>
        <p>Prefer smart pointers over raw pointers for dynamic allocation. They provide automatic cleanup and exception safety.</p>
      </div>
      
      <div class="practice">
        <h4>3. Follow RAII Principles</h4>
        <p>Design classes that acquire resources in constructors and release them in destructors. This ensures automatic resource management.</p>
      </div>
      
      <div class="practice">
        <h4>4. Avoid Memory Leaks</h4>
        <p>Every 'new' must have a corresponding 'delete'. Better yet, avoid raw new/delete by using smart pointers and containers.</p>
      </div>
      
      <div class="practice">
        <h4>5. Be Exception Safe</h4>
        <p>Use RAII and smart pointers to ensure resources are properly cleaned up even when exceptions occur.</p>
      </div>
    </div>
  </section>

  <section class="content-section">
    <h2>Practice Exercises</h2>
    
    <div class="exercise">
      <h3>Exercise 1: Dynamic Array Manager</h3>
      <p>Create a class that manages a dynamic array with automatic resizing, proper copy semantics, and exception safety.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 2: Resource Pool</h3>
      <p>Implement a resource pool using smart pointers that can lend and reclaim resources automatically.</p>
    </div>
    
    <div class="exercise">
      <h3>Exercise 3: Memory Leak Detector</h3>
      <p>Create a simple memory tracking system that can detect memory leaks in a program using new/delete.</p>
    </div>
  </section>

  <div class="navigation">
    <a href="/1-syntax-basics/pointers" class="nav-button prev">← Pointers & References</a>
    <a href="/3-data-structures" class="nav-button next">Data Structures →</a>
  </div>
</Layout>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
    color: #64748b;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: #667eea;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .overview {
    background: #f0f9ff;
    padding: 2rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #0ea5e9;
  }

  .content-section {
    margin: 3rem 0;
  }

  .best-practices {
    display: grid;
    gap: 1rem;
    margin: 2rem 0;
  }

  .practice {
    background: #f0fdf4;
    padding: 1.5rem;
    border-radius: 8px;
    border-left: 4px solid #22c55e;
  }

  .practice h4 {
    margin: 0 0 0.5rem 0;
    color: #166534;
  }

  .practice p {
    margin: 0;
    color: #166534;
  }

  .exercise {
    background: #fff7ed;
    padding: 2rem;
    border-radius: 8px;
    border-left: 4px solid #f59e0b;
    margin: 2rem 0;
  }

  .exercise h3 {
    margin: 0 0 1rem 0;
    color: #92400e;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    margin: 4rem 0 2rem 0;
    padding: 2rem 0;
    border-top: 1px solid #e2e8f0;
  }

  .nav-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .nav-button:hover {
    background: #5a67d8;
  }

  .nav-button.prev {
    background: #64748b;
  }

  .nav-button.prev:hover {
    background: #475569;
  }

  @media (max-width: 768px) {
    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      text-align: center;
    }
  }
</style> 