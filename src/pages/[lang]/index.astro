---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'zh' } },
  ];
}
---

<Layout title={t('site.title')}>
	<main>
		<h1>{t('site.title')}</h1>
		<p class="intro">{t('site.description')}</p>
		
		<div class="level-grid">
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üöÄ</div>
					<div class="level-meta">
						<span class="difficulty beginner">{t('level.beginner')}</span>
						<span class="lessons">7 {t('level.lessons')}</span>
					</div>
				</div>
				<h2><a href={`/${lang}/1-syntax-basics/`}>{t('syntax.title')}</a></h2>
				<p>{t('syntax.description')}</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">{t('topic.variables')}</span>
						<span class="topic">{t('topic.functions')}</span>
						<span class="topic">{t('topic.classes')}</span>
						<span class="topic">{t('topic.pointers')}</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üß†</div>
					<div class="level-meta">
						<span class="difficulty intermediate">{t('level.intermediate')}</span>
						<span class="lessons">7 {t('level.lessons')}</span>
					</div>
				</div>
				<h2><a href={`/${lang}/2-algorithm-basics/`}>{t('algo.title')}</a></h2>
				<p>{t('algo.description')}</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">{t('topic.sorting')}</span>
						<span class="topic">{t('topic.searching')}</span>
						<span class="topic">{t('topic.recursion')}</span>
						<span class="topic">{t('topic.dynamic-programming')}</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üèóÔ∏è</div>
					<div class="level-meta">
						<span class="difficulty intermediate">{t('level.intermediate')}</span>
						<span class="lessons">8 {t('level.lessons')}</span>
					</div>
				</div>
				<h2><a href={`/${lang}/3-data-structures/`}>{t('ds.title')}</a></h2>
				<p>{t('ds.description')}</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">{t('topic.arrays')}</span>
						<span class="topic">{t('topic.linked-lists')}</span>
						<span class="topic">{t('topic.trees')}</span>
						<span class="topic">{t('topic.hash-tables')}</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üèÜ</div>
					<div class="level-meta">
						<span class="difficulty advanced">{t('level.advanced')}</span>
						<span class="lessons">14 {t('level.lessons')}</span>
					</div>
				</div>
				<h2><a href={`/${lang}/4-competitive/`}>{t('comp.title')}</a></h2>
				<p>{t('comp.description')}</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">{t('topic.stl')}</span>
						<span class="topic">{t('topic.segment-trees')}</span>
						<span class="topic">{t('topic.graph-theory')}</span>
						<span class="topic">{t('topic.number-theory')}</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üåü</div>
					<div class="level-meta">
						<span class="difficulty expert">{t('level.expert')}</span>
						<span class="lessons">7 {t('level.lessons')}</span>
					</div>
				</div>
				<h2><a href={`/${lang}/5-advanced/`}>{t('adv.title')}</a></h2>
				<p>{t('adv.description')}</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">{t('topic.advanced-graph-theory')}</span>
						<span class="topic">{t('topic.union-find')}</span>
						<span class="topic">{t('topic.sweep-line')}</span>
						<span class="topic">{t('topic.dp-optimization')}</span>
					</div>
				</div>
			</div>
			
			<div class="level-card">
				<div class="card-header">
					<div class="level-icon">üöÄ</div>
					<div class="level-meta">
						<span class="difficulty expert">{t('level.expert')}</span>
						<span class="lessons">10 {t('level.lessons')}</span>
					</div>
				</div>
				<h2><a href={`/${lang}/6-world-class/`}>{t('world.title')}</a></h2>
				<p>{t('world.description')}</p>
				<div class="card-footer">
					<div class="topics">
						<span class="topic">{t('topic.combinatorics')}</span>
						<span class="topic">{t('topic.linear-algebra')}</span>
						<span class="topic">{t('topic.advanced-dp')}</span>
						<span class="topic">{t('topic.balanced-trees')}</span>
					</div>
				</div>
			</div>
		</div>
	</main>

	<section class="featured-content">
		<h2>{t('ui.featured-examples')}</h2>
		
		<CodeExample 
			client:load
			title="Hello World - Your First C++ Program"
			code={`#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    return 0;
}`}
			explanation="This is the classic 'Hello World' program. It demonstrates the basic structure of a C++ program including headers, main function, and output."
			output="Hello, World!"
		/>

		<CodeExample 
			client:load
			title="Variables and Data Types"
			code={`#include <iostream>
using namespace std;

int main() {
    // Different data types
    int age = 25;
    double price = 99.99;
    char grade = 'A';
    string name = "Alice";
    bool isStudent = true;
    
    cout << "Name: " << name << endl;
    cout << "Age: " << age << endl;
    cout << "Grade: " << grade << endl;
    cout << "Price: $" << price << endl;
    cout << "Is Student: " << (isStudent ? "Yes" : "No") << endl;
    
    return 0;
}`}
			explanation="This example shows the fundamental data types in C++: int, double, char, string, and bool. Understanding these types is crucial for C++ programming."
			output={`Name: Alice
Age: 25
Grade: A
Price: $99.99
Is Student: Yes`}
		/>

		<CodeExample 
			client:load
			title="Simple Array Operations"
			code={`#include <iostream>
using namespace std;

int main() {
    int numbers[5] = {10, 20, 30, 40, 50};
    
    cout << "Array elements:" << endl;
    for(int i = 0; i < 5; i++) {
        cout << "numbers[" << i << "] = " << numbers[i] << endl;
    }
    
    // Calculate sum
    int sum = 0;
    for(int i = 0; i < 5; i++) {
        sum += numbers[i];
    }
    
    cout << "Sum of all elements: " << sum << endl;
    cout << "Average: " << (double)sum / 5 << endl;
    
    return 0;
}`}
			explanation="Arrays are fundamental data structures. This example demonstrates array declaration, initialization, iteration, and basic operations like calculating sum and average."
			output={`Array elements:
numbers[0] = 10
numbers[1] = 20
numbers[2] = 30
numbers[3] = 40
numbers[4] = 50
Sum of all elements: 150
Average: 30`}
		/>
	</section>
</Layout>

<style>
	main {
		margin: auto;
		padding: 2rem;
		width: 1200px;
		max-width: calc(100% - 2rem);
		color: #1e293b;
		line-height: 1.6;
	}
	
	h1 {
		font-size: 3rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1rem;
		background: linear-gradient(135deg, #4f46e5, #7c3aed);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}
	
	.intro {
		font-size: 1.25rem;
		text-align: center;
		color: #6b7280;
		margin-bottom: 3rem;
	}
	
	.level-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
		gap: 2rem;
		margin-top: 2rem;
	}
	
	.level-card {
		background: white;
		border: 1px solid #e2e8f0;
		border-radius: 12px;
		padding: 0;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		overflow: hidden;
		position: relative;
	}
	
	.level-card:hover {
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
		transform: translateY(-4px);
		border-color: #4f46e5;
	}

	.level-card:hover .level-icon {
		transform: scale(1.2) rotate(5deg);
	}

	.card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.5rem 1.5rem 1rem 1.5rem;
		background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
		border-bottom: 1px solid #e2e8f0;
	}

	.level-icon {
		font-size: 2rem;
		transition: all 0.3s ease;
	}

	.level-meta {
		display: flex;
		gap: 0.75rem;
		align-items: center;
	}

	.difficulty {
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.75rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.difficulty.beginner {
		background: #dcfce7;
		color: #166534;
	}

	.difficulty.intermediate {
		background: #fef3c7;
		color: #92400e;
	}

	.difficulty.advanced {
		background: #fecaca;
		color: #991b1b;
	}

	.difficulty.expert {
		background: #f3e8ff;
		color: #6b21a8;
	}

	.lessons {
		background: #e0e7ff;
		color: #3730a3;
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.75rem;
		font-weight: 500;
	}

	.level-card h2 {
		margin: 0 0 0.75rem 0;
		font-size: 1.5rem;
		padding: 0 1.5rem;
	}
	
	.level-card h2 a {
		color: #1e293b;
		text-decoration: none;
		font-weight: 600;
		transition: color 0.3s ease;
	}
	
	.level-card:hover h2 a {
		color: #4f46e5;
	}
	
	.level-card p {
		margin: 0 0 1.5rem 0;
		color: #6b7280;
		font-size: 0.95rem;
		line-height: 1.6;
		padding: 0 1.5rem;
	}

	.card-footer {
		padding: 1rem 1.5rem 1.5rem 1.5rem;
		background: #fafbfc;
		border-top: 1px solid #f1f5f9;
	}

	.topics {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.topic {
		background: white;
		border: 1px solid #e2e8f0;
		color: #64748b;
		padding: 0.375rem 0.75rem;
		border-radius: 6px;
		font-size: 0.8rem;
		font-weight: 500;
		transition: all 0.2s ease;
	}

	.level-card:hover .topic {
		border-color: #c7d2fe;
		background: #f0f4ff;
		color: #4338ca;
	}

	/* Progress indicator */
	.level-card::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 3px;
		background: linear-gradient(90deg, #4f46e5, #7c3aed);
		transform: scaleX(0);
		transform-origin: left;
		transition: transform 0.3s ease;
	}

	.level-card:hover::before {
		transform: scaleX(1);
	}

	@media (max-width: 768px) {
		main {
			padding: 1rem;
		}
		
		h1 {
			font-size: 2rem;
		}
		
		.level-grid {
			grid-template-columns: 1fr;
			gap: 1.5rem;
		}

		.level-meta {
			flex-direction: column;
			gap: 0.5rem;
		}
	}

	.featured-content {
		margin: 3rem 0;
	}
</style> 