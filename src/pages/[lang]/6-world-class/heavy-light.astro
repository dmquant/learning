---
import Layout from '../../../layouts/Layout.astro';
import CodeExample from '../../../components/CodeExample.tsx';
import { ui } from '../../../i18n/ui';

export function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'zh' } }
  ];
}

const { lang } = Astro.params;
const t = ui[lang as keyof typeof ui];
---

<Layout title={lang === 'zh' ? "重链剖分 - 世界级算法" : "Heavy-Light Decomposition - World Class Algorithms"}>
  <div class="container">
    <nav class="breadcrumb">
      <a href={`/${lang}`}>{t['nav.home']}</a> &gt; 
      <a href={`/${lang}/6-world-class`}>{lang === 'zh' ? '世界级算法' : 'World Class'}</a> &gt; 
      <span>{lang === 'zh' ? '重链剖分' : 'Heavy-Light Decomposition'}</span>
    </nav>

    <div class="header-section">
      <h1 class="main-title">
        {lang === 'zh' ? '重链剖分' : 'Heavy-Light Decomposition'}
      </h1>
      <p class="subtitle">
        {lang === 'zh' 
          ? '掌握树的重链剖分、路径查询和子树操作优化技术'
          : 'Master tree heavy-light decomposition, path queries, and subtree operation optimization techniques'
        }
      </p>
    </div>

    <div class="overview-section">
      <h2>{lang === 'zh' ? '概述' : 'Overview'}</h2>
      <p>
        {lang === 'zh' 
          ? '重链剖分是处理树上路径查询和修改的强大技术。通过将树分解为重链和轻边，将树上操作转化为序列操作，支持O(log²n)的路径查询、修改和LCA查询。'
          : 'Heavy-light decomposition is a powerful technique for handling tree path queries and modifications. By decomposing trees into heavy chains and light edges, it transforms tree operations into sequence operations, supporting O(log²n) path queries, modifications, and LCA queries.'
        }
      </p>
    </div>

    <div class="content-section">
      <h2>{lang === 'zh' ? '核心内容' : 'Core Content'}</h2>

      <div class="topic-section">
        <h3>{lang === 'zh' ? '1. 重链剖分基础' : '1. Heavy-Light Decomposition Basics'}</h3>
        
        <CodeExample
          client:load
          code={`${lang === 'zh' ? '// 重链剖分实现' : '// Heavy-light decomposition implementation'}
#include <iostream>
#include <vector>
using namespace std;

class HeavyLightDecomposition {
private:
    int n, timer;
    vector<vector<int>> adj;
    vector<int> parent, depth, heavy, head, pos, subtreeSize;
    
    ${lang === 'zh' ? '// 第一次DFS：计算子树大小和重儿子' : '// First DFS: calculate subtree size and heavy child'}
    void dfs1(int v, int p, int d) {
        parent[v] = p;
        depth[v] = d;
        subtreeSize[v] = 1;
        
        int maxSize = 0;
        for (int u : adj[v]) {
            if (u != p) {
                dfs1(u, v, d + 1);
                subtreeSize[v] += subtreeSize[u];
                if (subtreeSize[u] > maxSize) {
                    maxSize = subtreeSize[u];
                    heavy[v] = u;
                }
            }
        }
    }
    
    ${lang === 'zh' ? '// 第二次DFS：分配链头和位置' : '// Second DFS: assign chain heads and positions'}
    void dfs2(int v, int h) {
        head[v] = h;
        pos[v] = timer++;
        
        ${lang === 'zh' ? '// 优先遍历重儿子' : '// Traverse heavy child first'}
        if (heavy[v] != -1) {
            dfs2(heavy[v], h);
        }
        
        ${lang === 'zh' ? '// 遍历轻儿子，每个轻儿子开始新链' : '// Traverse light children, each starts new chain'}
        for (int u : adj[v]) {
            if (u != parent[v] && u != heavy[v]) {
                dfs2(u, u);
            }
        }
    }
    
public:
    HeavyLightDecomposition(int size) : n(size), timer(0) {
        adj.resize(n);
        parent.resize(n);
        depth.resize(n);
        heavy.assign(n, -1);
        head.resize(n);
        pos.resize(n);
        subtreeSize.resize(n);
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    void build(int root = 0) {
        dfs1(root, -1, 0);
        dfs2(root, root);
    }
    
    ${lang === 'zh' ? '// 查询路径上的所有区间' : '// Query all intervals on path'}
    vector<pair<int, int>> getPathIntervals(int u, int v) {
        vector<pair<int, int>> result;
        
        while (head[u] != head[v]) {
            if (depth[head[u]] > depth[head[v]]) {
                result.push_back({pos[head[u]], pos[u]});
                u = parent[head[u]];
            } else {
                result.push_back({pos[head[v]], pos[v]});
                v = parent[head[v]];
            }
        }
        
        ${lang === 'zh' ? '// 处理同一条链上的部分' : '// Handle part on same chain'}
        if (pos[u] > pos[v]) swap(u, v);
        result.push_back({pos[u], pos[v]});
        
        return result;
    }
    
    ${lang === 'zh' ? '// 查询LCA' : '// Query LCA'}
    int lca(int u, int v) {
        while (head[u] != head[v]) {
            if (depth[head[u]] > depth[head[v]]) {
                u = parent[head[u]];
            } else {
                v = parent[head[v]];
            }
        }
        return depth[u] < depth[v] ? u : v;
    }
    
    ${lang === 'zh' ? '// 获取子树区间' : '// Get subtree interval'}
    pair<int, int> getSubtreeInterval(int v) {
        return {pos[v], pos[v] + subtreeSize[v] - 1};
    }
    
    ${lang === 'zh' ? '// 获取节点在序列中的位置' : '// Get node position in sequence'}
    int getPosition(int v) {
        return pos[v];
    }
    
    ${lang === 'zh' ? '// 获取节点深度' : '// Get node depth'}
    int getDepth(int v) {
        return depth[v];
    }
};

${lang === 'zh' ? '// 配合线段树的路径查询' : '// Path queries with segment tree'}
class SegmentTree {
private:
    vector<long long> tree, lazy;
    int n;
    
    void push(int node, int start, int end) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node] * (end - start + 1);
            if (start != end) {
                lazy[2 * node] += lazy[node];
                lazy[2 * node + 1] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    
    void updateRange(int node, int start, int end, int l, int r, long long val) {
        push(node, start, end);
        if (start > r || end < l) return;
        
        if (start >= l && end <= r) {
            lazy[node] += val;
            push(node, start, end);
            return;
        }
        
        int mid = (start + end) / 2;
        updateRange(2 * node, start, mid, l, r, val);
        updateRange(2 * node + 1, mid + 1, end, l, r, val);
        
        push(2 * node, start, mid);
        push(2 * node + 1, mid + 1, end);
        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }
    
    long long queryRange(int node, int start, int end, int l, int r) {
        if (start > r || end < l) return 0;
        
        push(node, start, end);
        if (start >= l && end <= r) return tree[node];
        
        int mid = (start + end) / 2;
        return queryRange(2 * node, start, mid, l, r) + 
               queryRange(2 * node + 1, mid + 1, end, l, r);
    }
    
public:
    SegmentTree(int size) : n(size) {
        tree.resize(4 * n);
        lazy.resize(4 * n);
    }
    
    void update(int l, int r, long long val) {
        updateRange(1, 0, n - 1, l, r, val);
    }
    
    long long query(int l, int r) {
        return queryRange(1, 0, n - 1, l, r);
    }
};

${lang === 'zh' ? '// 树上路径操作' : '// Tree path operations'}
class TreePathOperations {
private:
    HeavyLightDecomposition hld;
    SegmentTree seg;
    
public:
    TreePathOperations(int n) : hld(n), seg(n) {}
    
    void addEdge(int u, int v) {
        hld.addEdge(u, v);
    }
    
    void build(int root = 0) {
        hld.build(root);
    }
    
    ${lang === 'zh' ? '// 路径更新' : '// Path update'}
    void updatePath(int u, int v, long long val) {
        vector<pair<int, int>> intervals = hld.getPathIntervals(u, v);
        for (auto [l, r] : intervals) {
            seg.update(l, r, val);
        }
    }
    
    ${lang === 'zh' ? '// 路径查询' : '// Path query'}
    long long queryPath(int u, int v) {
        long long result = 0;
        vector<pair<int, int>> intervals = hld.getPathIntervals(u, v);
        for (auto [l, r] : intervals) {
            result += seg.query(l, r);
        }
        return result;
    }
    
    ${lang === 'zh' ? '// 子树更新' : '// Subtree update'}
    void updateSubtree(int v, long long val) {
        auto [l, r] = hld.getSubtreeInterval(v);
        seg.update(l, r, val);
    }
    
    ${lang === 'zh' ? '// 子树查询' : '// Subtree query'}
    long long querySubtree(int v) {
        auto [l, r] = hld.getSubtreeInterval(v);
        return seg.query(l, r);
    }
    
    ${lang === 'zh' ? '// LCA查询' : '// LCA query'}
    int lca(int u, int v) {
        return hld.lca(u, v);
    }
};

int main() {
    ${lang === 'zh' ? '// 构建测试树' : '// Build test tree'}
    TreePathOperations tpo(7);
    
    ${lang === 'zh' ? '// 添加边' : '// Add edges'}
    tpo.addEdge(0, 1);
    tpo.addEdge(0, 2);
    tpo.addEdge(1, 3);
    tpo.addEdge(1, 4);
    tpo.addEdge(2, 5);
    tpo.addEdge(2, 6);
    
    tpo.build(0);
    
    ${lang === 'zh' ? '// 路径更新' : '// Path update'}
    tpo.updatePath(3, 5, 10);
    cout << "${lang === 'zh' ? '路径3到5的和：' : 'Sum of path 3 to 5:'} " 
         << tpo.queryPath(3, 5) << endl;
    
    ${lang === 'zh' ? '// 子树操作' : '// Subtree operations'}
    tpo.updateSubtree(1, 5);
    cout << "${lang === 'zh' ? '子树1的和：' : 'Sum of subtree 1:'} " 
         << tpo.querySubtree(1) << endl;
    
    ${lang === 'zh' ? '// LCA查询' : '// LCA query'}
    cout << "${lang === 'zh' ? '节点4和6的LCA：' : 'LCA of nodes 4 and 6:'} " 
         << tpo.lca(4, 6) << endl;
    
    return 0;
}`}
          language="cpp"
        />
      </div>
    </div>

    <div class="tips-section">
      <h2>{lang === 'zh' ? '解题技巧' : 'Problem-Solving Tips'}</h2>
      <div class="tips-grid">
        <div class="tip-card">
          <h3>🎯 {lang === 'zh' ? '剖分理解' : 'Decomposition Understanding'}</h3>
          <p>
            {lang === 'zh' 
              ? '理解重链和轻边的概念，重链连接子树最大的儿子，轻边连接其他儿子。'
              : 'Understand heavy chains and light edges: heavy chains connect to children with largest subtrees, light edges connect to others.'
            }
          </p>
        </div>
        
        <div class="tip-card">
          <h3>⚡ {lang === 'zh' ? '复杂度保证' : 'Complexity Guarantee'}</h3>
          <p>
            {lang === 'zh' 
              ? '每个节点到根路径最多经过O(log n)条轻边，保证了操作的对数复杂度。'
              : 'Each node-to-root path crosses at most O(log n) light edges, guaranteeing logarithmic complexity of operations.'
            }
          </p>
        </div>
        
        <div class="tip-card">
          <h3>🔧 {lang === 'zh' ? '实现要点' : 'Implementation Points'}</h3>
          <p>
            {lang === 'zh' 
              ? '两次DFS分别计算重儿子和分配位置，配合线段树实现高效的区间操作。'
              : 'Two DFS passes: first calculates heavy children, second assigns positions, combine with segment tree for efficient range operations.'
            }
          </p>
        </div>
        
        <div class="tip-card">
          <h3>🧮 {lang === 'zh' ? '应用场景' : 'Application Scenarios'}</h3>
          <p>
            {lang === 'zh' 
              ? '树上路径查询修改、LCA查询、子树操作，是处理树上问题的通用技术。'
              : 'Tree path queries/modifications, LCA queries, subtree operations - a universal technique for tree problems.'
            }
          </p>
        </div>
      </div>
    </div>

    <div class="navigation">
      <a href={`/${lang}/6-world-class/dp-optimization`} class="nav-button prev">
        ← {lang === 'zh' ? 'DP优化' : 'DP Optimization'}
      </a>
      <a href={`/${lang}/6-world-class`} class="nav-button index">
        📚 {lang === 'zh' ? '章节目录' : 'Chapter Index'}
      </a>
      <a href={`/${lang}/6-world-class/shortest-dag`} class="nav-button next">
        {lang === 'zh' ? '最短路DAG' : 'Shortest Path DAG'} →
      </a>
    </div>
  </div>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .breadcrumb {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 2rem;
    padding: 1rem 0;
    border-bottom: 1px solid #e5e7eb;
  }

  .breadcrumb a {
    color: #4f46e5;
    text-decoration: none;
    transition: color 0.2s;
  }

  .breadcrumb a:hover {
    color: #3730a3;
    text-decoration: underline;
  }

  .header-section {
    text-align: center;
    margin-bottom: 3rem;
  }

  .main-title {
    font-size: 3.5rem;
    font-weight: 900;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, #dc2626 0%, #ea580c 25%, #d97706 50%, #ca8a04 75%, #65a30d 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.1;
  }

  .subtitle {
    font-size: 1.25rem;
    color: #6b7280;
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .overview-section {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    border: 1px solid #f59e0b;
    border-radius: 16px;
    padding: 2.5rem;
    margin: 2rem 0 3rem 0;
    box-shadow: 0 4px 6px -1px rgba(245, 158, 11, 0.1);
  }

  .overview-section h2 {
    color: #92400e;
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .overview-section p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.8;
    color: #78350f;
  }

  .content-section {
    margin: 4rem 0;
  }

  .content-section > h2 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 3rem;
    color: #1e293b;
    text-align: center;
    position: relative;
  }

  .content-section > h2::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #dc2626, #ea580c, #d97706);
    border-radius: 2px;
  }

  .topic-section {
    margin: 3rem 0;
    padding: 2rem;
    background: #f8fafc;
    border-radius: 12px;
    border-left: 4px solid #dc2626;
  }

  .topic-section h3 {
    color: #dc2626;
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .topic-section p {
    color: #4b5563;
    line-height: 1.7;
    margin-bottom: 1.5rem;
  }

  .tips-section {
    margin: 4rem 0;
    padding: 2rem 0;
    border-top: 2px solid #e5e7eb;
  }

  .tips-section h2 {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 2rem;
    color: #1e293b;
    text-align: center;
  }

  .tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .tip-card {
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    border: 1px solid #0ea5e9;
    border-radius: 12px;
    padding: 1.5rem;
    transition: transform 0.2s ease;
  }

  .tip-card:hover {
    transform: translateY(-2px);
  }

  .tip-card h3 {
    color: #0c4a6e;
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
  }

  .tip-card p {
    color: #075985;
    line-height: 1.6;
    margin: 0;
    font-size: 0.95rem;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 4rem 0 2rem 0;
    padding: 2rem 0;
    border-top: 2px solid #e5e7eb;
    gap: 1rem;
  }

  .nav-button {
    display: inline-flex;
    align-items: center;
    padding: 0.875rem 1.75rem;
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 14px 0 rgba(220, 38, 38, 0.39);
  }

  .nav-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px 0 rgba(220, 38, 38, 0.5);
  }

  .nav-button.index {
    background: linear-gradient(135deg, #059669, #0d9488);
    box-shadow: 0 4px 14px 0 rgba(5, 150, 105, 0.39);
  }

  .nav-button.index:hover {
    box-shadow: 0 8px 25px 0 rgba(5, 150, 105, 0.5);
  }

  @media (max-width: 768px) {
    .container {
      padding: 0 0.5rem;
    }

    .main-title {
      font-size: 2.5rem;
    }

    .subtitle {
      font-size: 1.1rem;
    }

    .overview-section {
      padding: 1.5rem;
      margin: 1.5rem 0 2rem 0;
    }

    .topic-section {
      padding: 1.5rem;
    }

    .tips-grid {
      grid-template-columns: 1fr;
    }

    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      width: 100%;
      justify-content: center;
    }
  }
</style> 