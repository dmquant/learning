---
import Layout from '../../../layouts/Layout.astro';
import CodeExample from '../../../components/CodeExample.tsx';
import { ui } from '../../../i18n/ui';

export function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'zh' } }
  ];
}

const { lang } = Astro.params;
const t = ui[lang as keyof typeof ui];
---

<Layout title={lang === 'zh' ? "平衡树 - 世界级算法" : "Balanced Trees - World Class Algorithms"}>
  <div class="container">
    <nav class="breadcrumb">
      <a href={`/${lang}`}>{t['nav.home']}</a> &gt; 
      <a href={`/${lang}/6-world-class`}>{lang === 'zh' ? '世界级算法' : 'World Class'}</a> &gt; 
      <span>{lang === 'zh' ? '平衡树' : 'Balanced Trees'}</span>
    </nav>

    <div class="header-section">
      <h1 class="main-title">
        {lang === 'zh' ? '平衡树' : 'Balanced Trees'}
      </h1>
      <p class="subtitle">
        {lang === 'zh' 
          ? '掌握Treap、分裂合并操作和自平衡树技术'
          : 'Master Treap, split/merge operations, and self-balancing tree techniques'
        }
      </p>
    </div>

    <div class="overview-section">
      <h2>{lang === 'zh' ? '概述' : 'Overview'}</h2>
      <p>
        {lang === 'zh' 
          ? '平衡树是维护有序数据集合的高效数据结构。本章节深入探讨Treap的插入删除、分裂合并操作、以及各种自平衡树技术，为解决动态维护有序集合问题提供强大工具。'
          : 'Balanced trees are efficient data structures for maintaining ordered data collections. This chapter explores Treap insertion/deletion, split/merge operations, and various self-balancing tree techniques for dynamic ordered set maintenance.'
        }
      </p>
    </div>

    <div class="content-section">
      <h2>{lang === 'zh' ? '核心内容' : 'Core Content'}</h2>

      <div class="topic-section">
        <h3>{lang === 'zh' ? '1. Treap基础操作' : '1. Basic Treap Operations'}</h3>
        
        <CodeExample
          client:load
          code={`${lang === 'zh' ? '// Treap实现' : '// Treap implementation'}
#include <iostream>
#include <random>
using namespace std;

struct TreapNode {
    int key, priority, size;
    TreapNode* left;
    TreapNode* right;
    
    TreapNode(int k) : key(k), priority(rand()), size(1), left(nullptr), right(nullptr) {}
};

class Treap {
private:
    TreapNode* root;
    
    int getSize(TreapNode* node) {
        return node ? node->size : 0;
    }
    
    void updateSize(TreapNode* node) {
        if (node) {
            node->size = 1 + getSize(node->left) + getSize(node->right);
        }
    }
    
    ${lang === 'zh' ? '// 右旋' : '// Right rotation'}
    TreapNode* rotateRight(TreapNode* node) {
        TreapNode* newRoot = node->left;
        node->left = newRoot->right;
        newRoot->right = node;
        updateSize(node);
        updateSize(newRoot);
        return newRoot;
    }
    
    ${lang === 'zh' ? '// 左旋' : '// Left rotation'}
    TreapNode* rotateLeft(TreapNode* node) {
        TreapNode* newRoot = node->right;
        node->right = newRoot->left;
        newRoot->left = node;
        updateSize(node);
        updateSize(newRoot);
        return newRoot;
    }
    
    TreapNode* insert(TreapNode* node, int key) {
        if (!node) return new TreapNode(key);
        
        if (key < node->key) {
            node->left = insert(node->left, key);
            if (node->left->priority > node->priority) {
                node = rotateRight(node);
            }
        } else if (key > node->key) {
            node->right = insert(node->right, key);
            if (node->right->priority > node->priority) {
                node = rotateLeft(node);
            }
        }
        
        updateSize(node);
        return node;
    }
    
    TreapNode* remove(TreapNode* node, int key) {
        if (!node) return nullptr;
        
        if (key < node->key) {
            node->left = remove(node->left, key);
        } else if (key > node->key) {
            node->right = remove(node->right, key);
        } else {
            if (!node->left) {
                TreapNode* temp = node->right;
                delete node;
                return temp;
            } else if (!node->right) {
                TreapNode* temp = node->left;
                delete node;
                return temp;
            } else {
                if (node->left->priority > node->right->priority) {
                    node = rotateRight(node);
                    node->right = remove(node->right, key);
                } else {
                    node = rotateLeft(node);
                    node->left = remove(node->left, key);
                }
            }
        }
        
        updateSize(node);
        return node;
    }
    
    ${lang === 'zh' ? '// 查找第k小' : '// Find k-th smallest'}
    int kthSmallest(TreapNode* node, int k) {
        if (!node) return -1;
        
        int leftSize = getSize(node->left);
        if (k == leftSize + 1) {
            return node->key;
        } else if (k <= leftSize) {
            return kthSmallest(node->left, k);
        } else {
            return kthSmallest(node->right, k - leftSize - 1);
        }
    }
    
public:
    Treap() : root(nullptr) {}
    
    void insert(int key) {
        root = insert(root, key);
    }
    
    void remove(int key) {
        root = remove(root, key);
    }
    
    int kthSmallest(int k) {
        return kthSmallest(root, k);
    }
    
    int size() {
        return getSize(root);
    }
};

int main() {
    Treap treap;
    
    ${lang === 'zh' ? '// 插入元素' : '// Insert elements'}
    treap.insert(5);
    treap.insert(3);
    treap.insert(8);
    treap.insert(1);
    treap.insert(7);
    
    cout << "${lang === 'zh' ? '第3小的元素：' : '3rd smallest element:'} " << treap.kthSmallest(3) << endl;
    cout << "${lang === 'zh' ? '树的大小：' : 'Tree size:'} " << treap.size() << endl;
    
    treap.remove(3);
    cout << "${lang === 'zh' ? '删除3后第3小的元素：' : 'After removing 3, 3rd smallest:'} " << treap.kthSmallest(3) << endl;
    
    return 0;
}`}
          language="cpp"
        />
      </div>

      <div class="topic-section">
        <h3>{lang === 'zh' ? '2. 分裂与合并操作' : '2. Split and Merge Operations'}</h3>
        
        <CodeExample
          client:load
          code={`${lang === 'zh' ? '// Treap分裂合并实现' : '// Treap split/merge implementation'}
class SplitMergeTreap {
private:
    struct Node {
        int key, priority, size;
        Node* left;
        Node* right;
        
        Node(int k) : key(k), priority(rand()), size(1), left(nullptr), right(nullptr) {}
    };
    
    Node* root;
    
    void updateSize(Node* node) {
        if (node) {
            node->size = 1 + getSize(node->left) + getSize(node->right);
        }
    }
    
    int getSize(Node* node) {
        return node ? node->size : 0;
    }
    
    ${lang === 'zh' ? '// 按值分裂' : '// Split by value'}
    pair<Node*, Node*> split(Node* node, int key) {
        if (!node) return {nullptr, nullptr};
        
        if (node->key <= key) {
            auto [left, right] = split(node->right, key);
            node->right = left;
            updateSize(node);
            return {node, right};
        } else {
            auto [left, right] = split(node->left, key);
            node->left = right;
            updateSize(node);
            return {left, node};
        }
    }
    
    ${lang === 'zh' ? '// 按大小分裂' : '// Split by size'}
    pair<Node*, Node*> splitBySize(Node* node, int k) {
        if (!node) return {nullptr, nullptr};
        
        int leftSize = getSize(node->left);
        if (leftSize >= k) {
            auto [left, right] = splitBySize(node->left, k);
            node->left = right;
            updateSize(node);
            return {left, node};
        } else {
            auto [left, right] = splitBySize(node->right, k - leftSize - 1);
            node->right = left;
            updateSize(node);
            return {node, right};
        }
    }
    
    ${lang === 'zh' ? '// 合并两个treap' : '// Merge two treaps'}
    Node* merge(Node* left, Node* right) {
        if (!left) return right;
        if (!right) return left;
        
        if (left->priority > right->priority) {
            left->right = merge(left->right, right);
            updateSize(left);
            return left;
        } else {
            right->left = merge(left, right->left);
            updateSize(right);
            return right;
        }
    }
    
public:
    SplitMergeTreap() : root(nullptr) {}
    
    void insert(int key) {
        auto [left, right] = split(root, key);
        Node* newNode = new Node(key);
        root = merge(merge(left, newNode), right);
    }
    
    void remove(int key) {
        auto [left, temp] = split(root, key - 1);
        auto [mid, right] = split(temp, key);
        root = merge(left, right);
    }
    
    ${lang === 'zh' ? '// 区间操作：获取区间[l,r]' : '// Range operation: get range [l,r]'}
    vector<int> getRange(int l, int r) {
        auto [left, temp] = splitBySize(root, l - 1);
        auto [mid, right] = splitBySize(temp, r - l + 1);
        
        vector<int> result;
        inorder(mid, result);
        
        root = merge(merge(left, mid), right);
        return result;
    }
    
private:
    void inorder(Node* node, vector<int>& result) {
        if (!node) return;
        inorder(node->left, result);
        result.push_back(node->key);
        inorder(node->right, result);
    }
};

int main() {
    SplitMergeTreap treap;
    
    for (int i = 1; i <= 10; i++) {
        treap.insert(i);
    }
    
    vector<int> range = treap.getRange(3, 7);
    cout << "${lang === 'zh' ? '区间[3,7]的元素：' : 'Elements in range [3,7]:'} ";
    for (int x : range) {
        cout << x << " ";
    }
    cout << endl;
    
    return 0;
}`}
          language="cpp"
        />
      </div>
    </div>

    <div class="tips-section">
      <h2>{lang === 'zh' ? '解题技巧' : 'Problem-Solving Tips'}</h2>
      <div class="tips-grid">
        <div class="tip-card">
          <h3>🎯 {lang === 'zh' ? '操作选择' : 'Operation Selection'}</h3>
          <p>
            {lang === 'zh' 
              ? '根据问题需求选择合适操作：插入删除用基础操作，区间操作用分裂合并。'
              : 'Choose appropriate operations based on problem requirements: use basic operations for insertion/deletion, split/merge for range operations.'
            }
          </p>
        </div>
        
        <div class="tip-card">
          <h3>⚡ {lang === 'zh' ? '性能优化' : 'Performance Optimization'}</h3>
          <p>
            {lang === 'zh' 
              ? '维护子树大小信息支持第k小查询，使用随机优先级保证期望性能。'
              : 'Maintain subtree size information for k-th smallest queries, use random priorities to ensure expected performance.'
            }
          </p>
        </div>
        
        <div class="tip-card">
          <h3>🔧 {lang === 'zh' ? '实现要点' : 'Implementation Points'}</h3>
          <p>
            {lang === 'zh' 
              ? '注意更新节点信息，正确处理空指针，分裂合并操作要保持BST性质。'
              : 'Pay attention to updating node information, handle null pointers correctly, maintain BST properties in split/merge operations.'
            }
          </p>
        </div>
        
        <div class="tip-card">
          <h3>🧮 {lang === 'zh' ? '应用场景' : 'Application Scenarios'}</h3>
          <p>
            {lang === 'zh' 
              ? '动态维护有序集合，支持插入删除、第k小查询、区间操作等复杂需求。'
              : 'Dynamically maintain ordered sets, support insertion/deletion, k-th smallest queries, range operations, and other complex requirements.'
            }
          </p>
        </div>
      </div>
    </div>

    <div class="navigation">
      <a href={`/${lang}/6-world-class/segment-tree-advanced`} class="nav-button prev">
        ← {lang === 'zh' ? '高级线段树' : 'Advanced Segment Trees'}
      </a>
      <a href={`/${lang}/6-world-class`} class="nav-button index">
        📚 {lang === 'zh' ? '章节目录' : 'Chapter Index'}
      </a>
      <a href={`/${lang}/6-world-class/dp-optimization`} class="nav-button next">
        {lang === 'zh' ? 'DP优化' : 'DP Optimization'} →
      </a>
    </div>
  </div>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .breadcrumb {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 2rem;
    padding: 1rem 0;
    border-bottom: 1px solid #e5e7eb;
  }

  .breadcrumb a {
    color: #4f46e5;
    text-decoration: none;
    transition: color 0.2s;
  }

  .breadcrumb a:hover {
    color: #3730a3;
    text-decoration: underline;
  }

  .header-section {
    text-align: center;
    margin-bottom: 3rem;
  }

  .main-title {
    font-size: 3.5rem;
    font-weight: 900;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, #dc2626 0%, #ea580c 25%, #d97706 50%, #ca8a04 75%, #65a30d 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.1;
  }

  .subtitle {
    font-size: 1.25rem;
    color: #6b7280;
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .overview-section {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    border: 1px solid #f59e0b;
    border-radius: 16px;
    padding: 2.5rem;
    margin: 2rem 0 3rem 0;
    box-shadow: 0 4px 6px -1px rgba(245, 158, 11, 0.1);
  }

  .overview-section h2 {
    color: #92400e;
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .overview-section p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.8;
    color: #78350f;
  }

  .content-section {
    margin: 4rem 0;
  }

  .content-section > h2 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 3rem;
    color: #1e293b;
    text-align: center;
    position: relative;
  }

  .content-section > h2::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #dc2626, #ea580c, #d97706);
    border-radius: 2px;
  }

  .topic-section {
    margin: 3rem 0;
    padding: 2rem;
    background: #f8fafc;
    border-radius: 12px;
    border-left: 4px solid #dc2626;
  }

  .topic-section h3 {
    color: #dc2626;
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .topic-section p {
    color: #4b5563;
    line-height: 1.7;
    margin-bottom: 1.5rem;
  }

  .tips-section {
    margin: 4rem 0;
    padding: 2rem 0;
    border-top: 2px solid #e5e7eb;
  }

  .tips-section h2 {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 2rem;
    color: #1e293b;
    text-align: center;
  }

  .tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .tip-card {
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    border: 1px solid #0ea5e9;
    border-radius: 12px;
    padding: 1.5rem;
    transition: transform 0.2s ease;
  }

  .tip-card:hover {
    transform: translateY(-2px);
  }

  .tip-card h3 {
    color: #0c4a6e;
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
  }

  .tip-card p {
    color: #075985;
    line-height: 1.6;
    margin: 0;
    font-size: 0.95rem;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 4rem 0 2rem 0;
    padding: 2rem 0;
    border-top: 2px solid #e5e7eb;
    gap: 1rem;
  }

  .nav-button {
    display: inline-flex;
    align-items: center;
    padding: 0.875rem 1.75rem;
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 14px 0 rgba(220, 38, 38, 0.39);
  }

  .nav-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px 0 rgba(220, 38, 38, 0.5);
  }

  .nav-button.index {
    background: linear-gradient(135deg, #059669, #0d9488);
    box-shadow: 0 4px 14px 0 rgba(5, 150, 105, 0.39);
  }

  .nav-button.index:hover {
    box-shadow: 0 8px 25px 0 rgba(5, 150, 105, 0.5);
  }

  @media (max-width: 768px) {
    .container {
      padding: 0 0.5rem;
    }

    .main-title {
      font-size: 2.5rem;
    }

    .subtitle {
      font-size: 1.1rem;
    }

    .overview-section {
      padding: 1.5rem;
      margin: 1.5rem 0 2rem 0;
    }

    .topic-section {
      padding: 1.5rem;
    }

    .tips-grid {
      grid-template-columns: 1fr;
    }

    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      width: 100%;
      justify-content: center;
    }
  }
</style> 