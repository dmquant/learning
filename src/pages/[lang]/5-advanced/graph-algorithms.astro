---
import Layout from '../../../layouts/Layout.astro';
import CodeExample from '../../../components/CodeExample.tsx';
import { getLangFromUrl } from '../../../i18n/utils';

const lang = getLangFromUrl(Astro.url);

export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'zh' } },
  ];
}
---

<Layout title={lang === 'en' ? 'Advanced Graph Algorithms - Advanced Algorithms' : '高级图算法 - 高级算法'}>
  <div class="breadcrumb">
    <a href={`/${lang}`}>
      {lang === 'en' ? 'Home' : '首页'}
    </a> &gt; 
    <a href={`/${lang}/5-advanced`}>
      {lang === 'en' ? 'Advanced Algorithms' : '高级算法'}
    </a> &gt; 
    {lang === 'en' ? 'Advanced Graph Algorithms' : '高级图算法'}
  </div>

  <h1>
    {lang === 'en' 
      ? 'Advanced Graph Algorithms' 
      : '高级图算法'
    }
  </h1>
  
  <div class="overview">
    <p>
      {lang === 'en' 
        ? 'Advanced graph algorithms including minimum spanning trees, shortest path variations, differential constraints, and layered graph techniques used in competitive programming.'
        : '高级图算法包括最小生成树、最短路径变种、差分约束和分层图技术，在竞赛编程中广泛应用。'
      }
    </p>
  </div>

  <h2>{lang === 'en' ? 'Minimum Spanning Tree Algorithms' : '最小生成树算法'}</h2>
  
  <p>
    {lang === 'en' 
      ? 'A minimum spanning tree connects all vertices with minimum total weight using exactly n-1 edges.'
      : '最小生成树使用恰好n-1条边以最小总权重连接所有顶点。'
    }
  </p>

  <CodeExample 
    client:load
    title={lang === 'en' ? "Kruskal's and Prim's MST Algorithms" : 'Kruskal和Prim最小生成树算法'}
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

${lang === 'en' 
  ? `// Union-Find for Kruskal's Algorithm
class UnionFind {
private:
    vector<int> parent, rank;
    
public:
    UnionFind(int n) : parent(n), rank(n, 0) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }
    
    bool unite(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return false;
        
        // Union by rank
        if (rank[px] < rank[py]) swap(px, py);
        parent[py] = px;
        if (rank[px] == rank[py]) rank[px]++;
        
        return true;
    }
};

// Kruskal's Algorithm
struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

class KruskalMST {
private:
    vector<Edge> edges;
    int n;
    
public:
    KruskalMST(int vertices) : n(vertices) {}
    
    void addEdge(int u, int v, int w) {
        edges.push_back({u, v, w});
    }
    
    pair<int, vector<Edge>> findMST() {
        sort(edges.begin(), edges.end());
        UnionFind uf(n);
        
        vector<Edge> mst;
        int totalWeight = 0;
        
        for (const Edge& e : edges) {
            if (uf.unite(e.u, e.v)) {
                mst.push_back(e);
                totalWeight += e.weight;
                if (mst.size() == n - 1) break;
            }
        }
        
        return {totalWeight, mst};
    }
};`
  : `// 并查集用于Kruskal算法
class UnionFind {
private:
    vector<int> parent, rank;
    
public:
    UnionFind(int n) : parent(n), rank(n, 0) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // 路径压缩
        }
        return parent[x];
    }
    
    bool unite(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return false;
        
        // 按秩合并
        if (rank[px] < rank[py]) swap(px, py);
        parent[py] = px;
        if (rank[px] == rank[py]) rank[px]++;
        
        return true;
    }
};

// Kruskal算法
struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

class KruskalMST {
private:
    vector<Edge> edges;
    int n;
    
public:
    KruskalMST(int vertices) : n(vertices) {}
    
    void addEdge(int u, int v, int w) {
        edges.push_back({u, v, w});
    }
    
    pair<int, vector<Edge>> findMST() {
        sort(edges.begin(), edges.end()); // 按权重排序
        UnionFind uf(n);
        
        vector<Edge> mst;
        int totalWeight = 0;
        
        for (const Edge& e : edges) {
            if (uf.unite(e.u, e.v)) { // 不形成环
                mst.push_back(e);
                totalWeight += e.weight;
                if (mst.size() == n - 1) break;
            }
        }
        
        return {totalWeight, mst};
    }
};`
}

int main() {
    ${lang === 'en'
      ? `cout << "Testing Kruskal's MST Algorithm:" << endl;
    
    KruskalMST kruskal(4);
    kruskal.addEdge(0, 1, 10);
    kruskal.addEdge(0, 2, 6);
    kruskal.addEdge(0, 3, 5);
    kruskal.addEdge(1, 3, 15);
    kruskal.addEdge(2, 3, 4);
    
    auto [weight, mst] = kruskal.findMST();
    
    cout << "MST Total Weight: " << weight << endl;
    cout << "MST Edges:" << endl;
    for (const Edge& e : mst) {
        cout << e.u << " - " << e.v << " (weight: " << e.weight << ")" << endl;
    }`
      : `cout << "Kruskal最小生成树算法测试:" << endl;
    
    KruskalMST kruskal(4);
    kruskal.addEdge(0, 1, 10);
    kruskal.addEdge(0, 2, 6);
    kruskal.addEdge(0, 3, 5);
    kruskal.addEdge(1, 3, 15);
    kruskal.addEdge(2, 3, 4);
    
    auto [weight, mst] = kruskal.findMST();
    
    cout << "MST总权重: " << weight << endl;
    cout << "MST边:" << endl;
    for (const Edge& e : mst) {
        cout << e.u << " - " << e.v << " (权重: " << e.weight << ")" << endl;
    }`
    }
    
    return 0;
}`}
    explanation={lang === 'en' 
      ? "Kruskal's algorithm sorts edges by weight and uses Union-Find to detect cycles, building MST incrementally."
      : 'Kruskal算法按权重对边排序，使用并查集检测环，逐步构建最小生成树。'
    }
    output={lang === 'en'
      ? `Testing Kruskal's MST Algorithm:
MST Total Weight: 19
MST Edges:
2 - 3 (weight: 4)
0 - 3 (weight: 5)
0 - 1 (weight: 10)`
      : `Kruskal最小生成树算法测试:
MST总权重: 19
MST边:
2 - 3 (权重: 4)
0 - 3 (权重: 5)
0 - 1 (权重: 10)`
    }
  />

  <h2>{lang === 'en' ? 'Advanced Shortest Path Algorithms' : '高级最短路径算法'}</h2>
  
  <p>
    {lang === 'en' 
      ? 'Beyond basic Dijkstra and Floyd-Warshall, advanced techniques handle special constraints and optimizations.'
      : '除了基本的Dijkstra和Floyd-Warshall，高级技术处理特殊约束和优化。'
    }
  </p>

  <CodeExample 
    client:load
    title={lang === 'en' ? 'Dijkstra with Path Reconstruction' : '带路径重构的Dijkstra算法'}
    code={`#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

class DijkstraWithPath {
private:
    vector<vector<pair<int, int>>> graph;
    int n;
    
public:
    DijkstraWithPath(int vertices) : n(vertices), graph(vertices) {}
    
    void addEdge(int u, int v, int w) {
        graph[u].push_back({v, w});
    }
    
    pair<vector<int>, vector<int>> shortestPath(int start) {
        vector<int> dist(n, INT_MAX);
        vector<int> parent(n, -1);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        dist[start] = 0;
        pq.push({0, start});
        
        while (!pq.empty()) {
            int d = pq.top().first;
            int u = pq.top().second;
            pq.pop();
            
            if (d > dist[u]) continue;
            
            for (auto& edge : graph[u]) {
                int v = edge.first;
                int w = edge.second;
                
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    parent[v] = u;
                    pq.push({dist[v], v});
                }
            }
        }
        
        return {dist, parent};
    }
    
    vector<int> reconstructPath(const vector<int>& parent, int start, int end) {
        vector<int> path;
        int curr = end;
        
        while (curr != -1) {
            path.push_back(curr);
            curr = parent[curr];
        }
        
        reverse(path.begin(), path.end());
        
        ${lang === 'en' 
          ? '// Check if path exists'
          : '// 检查路径是否存在'
        }
        if (path[0] != start) {
            return {};
        }
        
        return path;
    }
};

int main() {
    ${lang === 'en'
      ? `cout << "Testing Dijkstra with Path Reconstruction:" << endl;
    
    DijkstraWithPath dijkstra(5);
    dijkstra.addEdge(0, 1, 4);
    dijkstra.addEdge(0, 2, 2);
    dijkstra.addEdge(1, 2, 1);
    dijkstra.addEdge(1, 3, 5);
    dijkstra.addEdge(2, 3, 8);
    dijkstra.addEdge(2, 4, 10);
    dijkstra.addEdge(3, 4, 2);
    
    auto [dist, parent] = dijkstra.shortestPath(0);
    
    cout << "Shortest distances from vertex 0:" << endl;
    for (int i = 0; i < dist.size(); i++) {
        cout << "To " << i << ": " << dist[i] << endl;
    }
    
    cout << "\\nPath from 0 to 4:" << endl;
    vector<int> path = dijkstra.reconstructPath(parent, 0, 4);
    for (int i = 0; i < path.size(); i++) {
        cout << path[i];
        if (i < path.size() - 1) cout << " -> ";
    }
    cout << endl;`
      : `cout << "带路径重构的Dijkstra算法测试:" << endl;
    
    DijkstraWithPath dijkstra(5);
    dijkstra.addEdge(0, 1, 4);
    dijkstra.addEdge(0, 2, 2);
    dijkstra.addEdge(1, 2, 1);
    dijkstra.addEdge(1, 3, 5);
    dijkstra.addEdge(2, 3, 8);
    dijkstra.addEdge(2, 4, 10);
    dijkstra.addEdge(3, 4, 2);
    
    auto [dist, parent] = dijkstra.shortestPath(0);
    
    cout << "从顶点0的最短距离:" << endl;
    for (int i = 0; i < dist.size(); i++) {
        cout << "到 " << i << ": " << dist[i] << endl;
    }
    
    cout << "\\n从0到4的路径:" << endl;
    vector<int> path = dijkstra.reconstructPath(parent, 0, 4);
    for (int i = 0; i < path.size(); i++) {
        cout << path[i];
        if (i < path.size() - 1) cout << " -> ";
    }
    cout << endl;`
    }
    
    return 0;
}`}
    explanation={lang === 'en' 
      ? 'Enhanced Dijkstra algorithm that not only finds shortest distances but also reconstructs the actual paths using parent pointers.'
      : '增强的Dijkstra算法不仅找到最短距离，还使用父指针重构实际路径。'
    }
    output={lang === 'en'
      ? `Testing Dijkstra with Path Reconstruction:
Shortest distances from vertex 0:
To 0: 0
To 1: 3
To 2: 2
To 3: 8
To 4: 10

Path from 0 to 4:
0 -> 2 -> 1 -> 3 -> 4`
      : `带路径重构的Dijkstra算法测试:
从顶点0的最短距离:
到 0: 0
到 1: 3
到 2: 2
到 3: 8
到 4: 10

从0到4的路径:
0 -> 2 -> 1 -> 3 -> 4`
    }
  />

  <div class="navigation">
    <a href={`/${lang}/5-advanced/graph-theory`} class="nav-button prev">
      {lang === 'en' ? '← Previous: Advanced Graph Theory' : '← 上一节：高级图论'}
    </a>
    <a href={`/${lang}/5-advanced/union-find`} class="nav-button next">
      {lang === 'en' ? 'Next: Union-Find →' : '下一节：并查集 →'}
    </a>
  </div>
</Layout>

<style>
  .breadcrumb {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 1rem;
  }

  .breadcrumb a {
    color: #4f46e5;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
  }

  .overview {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .overview p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.7;
    color: #374151;
  }

  h2 {
    font-size: 1.8rem;
    font-weight: 600;
    margin: 3rem 0 1.5rem 0;
    color: #1e293b;
    border-bottom: 2px solid #e2e8f0;
    padding-bottom: 0.5rem;
  }

  p {
    font-size: 1rem;
    line-height: 1.7;
    color: #4b5563;
    margin-bottom: 1.5rem;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid #e2e8f0;
    gap: 1rem;
  }

  .nav-button {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(79, 70, 229, 0.3);
  }

  .nav-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);
  }

  .nav-button.prev {
    margin-right: auto;
  }

  .nav-button.next {
    margin-left: auto;
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }

    .overview {
      padding: 1.5rem;
    }

    h2 {
      font-size: 1.5rem;
    }

    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      width: 100%;
      justify-content: center;
    }
  }
</style> 