---
import Layout from '../../../layouts/Layout.astro';
import CodeExample from '../../../components/CodeExample.tsx';
import { getLangFromUrl } from '../../../i18n/utils';

const lang = getLangFromUrl(Astro.url);

export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'zh' } },
  ];
}
---

<Layout title={lang === 'en' ? 'Union-Find (Disjoint Set) - Advanced Algorithms' : '并查集 - 高级算法'}>
  <div class="breadcrumb">
    <a href={`/${lang}`}>
      {lang === 'en' ? 'Home' : '首页'}
    </a> &gt; 
    <a href={`/${lang}/5-advanced`}>
      {lang === 'en' ? 'Advanced Algorithms' : '高级算法'}
    </a> &gt; 
    {lang === 'en' ? 'Union-Find (Disjoint Set)' : '并查集'}
  </div>

  <h1>
    {lang === 'en' 
      ? 'Union-Find (Disjoint Set)' 
      : '并查集（不相交集合）'
    }
  </h1>
  
  <div class="overview">
    <p>
      {lang === 'en' 
        ? 'Union-Find is a data structure that efficiently maintains a collection of disjoint sets and supports union and find operations with near-constant time complexity using path compression and union by rank optimizations.'
        : '并查集是一种数据结构，能够高效地维护一组不相交集合，通过路径压缩和按秩合并优化，支持接近常数时间复杂度的合并和查找操作。'
      }
    </p>
  </div>

  <h2>{lang === 'en' ? 'Basic Union-Find Implementation' : '基础并查集实现'}</h2>
  
  <p>
    {lang === 'en' 
      ? 'The basic Union-Find structure supports find (which set an element belongs to) and union (merge two sets) operations.'
      : '基础并查集结构支持查找（元素属于哪个集合）和合并（合并两个集合）操作。'
    }
  </p>

  <CodeExample 
    client:load
    title={lang === 'en' ? 'Union-Find with Path Compression and Union by Rank' : '带路径压缩和按秩合并的并查集'}
    code={`#include <iostream>
#include <vector>
using namespace std;

class UnionFind {
private:
    vector<int> parent, rank, size;
    int components;
    
public:
    UnionFind(int n) : parent(n), rank(n, 0), size(n, 1), components(n) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    ${lang === 'en' 
      ? `// Find with path compression
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }
    
    // Union by rank
    bool unite(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return false; // Already in same set
        
        // Union by rank: attach smaller tree under larger tree
        if (rank[px] < rank[py]) {
            parent[px] = py;
            size[py] += size[px];
        } else if (rank[px] > rank[py]) {
            parent[py] = px;
            size[px] += size[py];
        } else {
            parent[py] = px;
            size[px] += size[py];
            rank[px]++;
        }
        
        components--;
        return true;
    }
    
    // Check if two elements are in same set
    bool connected(int x, int y) {
        return find(x) == find(y);
    }
    
    // Get size of set containing x
    int getSize(int x) {
        return size[find(x)];
    }
    
    // Get number of connected components
    int getComponents() {
        return components;
    }`
      : `// 带路径压缩的查找
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // 路径压缩
        }
        return parent[x];
    }
    
    // 按秩合并
    bool unite(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return false; // 已经在同一集合中
        
        // 按秩合并：将较小的树连接到较大的树下
        if (rank[px] < rank[py]) {
            parent[px] = py;
            size[py] += size[px];
        } else if (rank[px] > rank[py]) {
            parent[py] = px;
            size[px] += size[py];
        } else {
            parent[py] = px;
            size[px] += size[py];
            rank[px]++;
        }
        
        components--;
        return true;
    }
    
    // 检查两个元素是否在同一集合中
    bool connected(int x, int y) {
        return find(x) == find(y);
    }
    
    // 获取包含x的集合大小
    int getSize(int x) {
        return size[find(x)];
    }
    
    // 获取连通分量数量
    int getComponents() {
        return components;
    }`
    }
};

int main() {
    ${lang === 'en'
      ? `cout << "Testing Union-Find Data Structure:" << endl;
    
    UnionFind uf(6);
    
    cout << "Initial components: " << uf.getComponents() << endl;
    
    // Connect some elements
    uf.unite(0, 1);
    uf.unite(1, 2);
    uf.unite(3, 4);
    
    cout << "After unions: " << uf.getComponents() << " components" << endl;
    
    // Test connectivity
    cout << "0 and 2 connected: " << (uf.connected(0, 2) ? "Yes" : "No") << endl;
    cout << "0 and 3 connected: " << (uf.connected(0, 3) ? "Yes" : "No") << endl;
    
    // Test set sizes
    cout << "Size of set containing 0: " << uf.getSize(0) << endl;
    cout << "Size of set containing 3: " << uf.getSize(3) << endl;
    cout << "Size of set containing 5: " << uf.getSize(5) << endl;`
      : `cout << "并查集数据结构测试:" << endl;
    
    UnionFind uf(6);
    
    cout << "初始连通分量: " << uf.getComponents() << endl;
    
    // 连接一些元素
    uf.unite(0, 1);
    uf.unite(1, 2);
    uf.unite(3, 4);
    
    cout << "合并后: " << uf.getComponents() << " 个连通分量" << endl;
    
    // 测试连通性
    cout << "0和2连通: " << (uf.connected(0, 2) ? "是" : "否") << endl;
    cout << "0和3连通: " << (uf.connected(0, 3) ? "是" : "否") << endl;
    
    // 测试集合大小
    cout << "包含0的集合大小: " << uf.getSize(0) << endl;
    cout << "包含3的集合大小: " << uf.getSize(3) << endl;
    cout << "包含5的集合大小: " << uf.getSize(5) << endl;`
    }
    
    return 0;
}`}
    explanation={lang === 'en' 
      ? 'Union-Find with path compression and union by rank achieves nearly O(1) amortized time complexity for both operations. Path compression flattens the tree during find, while union by rank keeps trees balanced.'
      : '带路径压缩和按秩合并的并查集在两种操作上都能达到接近O(1)的摊还时间复杂度。路径压缩在查找时扁平化树结构，按秩合并保持树的平衡。'
    }
    output={lang === 'en'
      ? `Testing Union-Find Data Structure:
Initial components: 6
After unions: 3 components
0 and 2 connected: Yes
0 and 3 connected: No
Size of set containing 0: 3
Size of set containing 3: 2
Size of set containing 5: 1`
      : `并查集数据结构测试:
初始连通分量: 6
合并后: 3 个连通分量
0和2连通: 是
0和3连通: 否
包含0的集合大小: 3
包含3的集合大小: 2
包含5的集合大小: 1`
    }
  />

  <h2>{lang === 'en' ? 'Application: Detecting Cycles in Undirected Graph' : '应用：检测无向图中的环'}</h2>
  
  <p>
    {lang === 'en' 
      ? 'Union-Find can efficiently detect cycles in undirected graphs by checking if two vertices of an edge are already connected.'
      : '并查集可以通过检查边的两个顶点是否已经连通来高效检测无向图中的环。'
    }
  </p>

  <CodeExample 
    client:load
    title={lang === 'en' ? 'Cycle Detection in Undirected Graph' : '无向图环检测'}
    code={`#include <iostream>
#include <vector>
using namespace std;

class CycleDetector {
private:
    UnionFind uf;
    
public:
    CycleDetector(int n) : uf(n) {}
    
    bool hasCycle(vector<pair<int, int>>& edges) {
        for (auto& edge : edges) {
            int u = edge.first, v = edge.second;
            
            ${lang === 'en' 
              ? `// If u and v are already connected, adding this edge creates a cycle
            if (uf.connected(u, v)) {
                return true;
            }
            
            // Connect u and v
            uf.unite(u, v);`
              : `// 如果u和v已经连通，添加这条边会形成环
            if (uf.connected(u, v)) {
                return true;
            }
            
            // 连接u和v
            uf.unite(u, v);`
            }
        }
        return false;
    }
};

${lang === 'en' 
  ? `// Application: Kruskal's MST Algorithm
class KruskalMST {
private:
    struct Edge {
        int u, v, weight;
        bool operator<(const Edge& other) const {
            return weight < other.weight;
        }
    };
    
    vector<Edge> edges;
    int n;
    
public:
    KruskalMST(int vertices) : n(vertices) {}
    
    void addEdge(int u, int v, int w) {
        edges.push_back({u, v, w});
    }
    
    pair<int, vector<Edge>> findMST() {
        sort(edges.begin(), edges.end());
        UnionFind uf(n);
        
        vector<Edge> mst;
        int totalWeight = 0;
        
        for (const Edge& e : edges) {
            if (!uf.connected(e.u, e.v)) {
                uf.unite(e.u, e.v);
                mst.push_back(e);
                totalWeight += e.weight;
                
                if (mst.size() == n - 1) break;
            }
        }
        
        return {totalWeight, mst};
    }
};`
  : `// 应用：Kruskal最小生成树算法
class KruskalMST {
private:
    struct Edge {
        int u, v, weight;
        bool operator<(const Edge& other) const {
            return weight < other.weight;
        }
    };
    
    vector<Edge> edges;
    int n;
    
public:
    KruskalMST(int vertices) : n(vertices) {}
    
    void addEdge(int u, int v, int w) {
        edges.push_back({u, v, w});
    }
    
    pair<int, vector<Edge>> findMST() {
        sort(edges.begin(), edges.end()); // 按权重排序
        UnionFind uf(n);
        
        vector<Edge> mst;
        int totalWeight = 0;
        
        for (const Edge& e : edges) {
            if (!uf.connected(e.u, e.v)) { // 不会形成环
                uf.unite(e.u, e.v);
                mst.push_back(e);
                totalWeight += e.weight;
                
                if (mst.size() == n - 1) break;
            }
        }
        
        return {totalWeight, mst};
    }
};`
}

int main() {
    ${lang === 'en'
      ? `// Test cycle detection
    cout << "Testing Cycle Detection:" << endl;
    
    CycleDetector detector(4);
    vector<pair<int, int>> edges = {{0, 1}, {1, 2}, {2, 3}, {3, 0}};
    
    if (detector.hasCycle(edges)) {
        cout << "Graph has a cycle!" << endl;
    } else {
        cout << "Graph is acyclic!" << endl;
    }
    
    // Test Kruskal's algorithm
    cout << "\\nTesting Kruskal's MST:" << endl;
    
    KruskalMST kruskal(4);
    kruskal.addEdge(0, 1, 10);
    kruskal.addEdge(0, 2, 6);
    kruskal.addEdge(0, 3, 5);
    kruskal.addEdge(1, 3, 15);
    kruskal.addEdge(2, 3, 4);
    
    auto [weight, mst] = kruskal.findMST();
    cout << "MST weight: " << weight << endl;`
      : `// 测试环检测
    cout << "环检测测试:" << endl;
    
    CycleDetector detector(4);
    vector<pair<int, int>> edges = {{0, 1}, {1, 2}, {2, 3}, {3, 0}};
    
    if (detector.hasCycle(edges)) {
        cout << "图有环！" << endl;
    } else {
        cout << "图无环！" << endl;
    }
    
    // 测试Kruskal算法
    cout << "\\nKruskal最小生成树测试:" << endl;
    
    KruskalMST kruskal(4);
    kruskal.addEdge(0, 1, 10);
    kruskal.addEdge(0, 2, 6);
    kruskal.addEdge(0, 3, 5);
    kruskal.addEdge(1, 3, 15);
    kruskal.addEdge(2, 3, 4);
    
    auto [weight, mst] = kruskal.findMST();
    cout << "MST权重: " << weight << endl;`
    }
    
    return 0;
}`}
    explanation={lang === 'en' 
      ? 'Union-Find is perfect for cycle detection and MST algorithms. For cycle detection, if two vertices of an edge are already connected, adding the edge creates a cycle.'
      : '并查集非常适合环检测和最小生成树算法。对于环检测，如果边的两个顶点已经连通，添加该边就会形成环。'
    }
    output={lang === 'en'
      ? `Testing Cycle Detection:
Graph has a cycle!

Testing Kruskal's MST:
MST weight: 19`
      : `环检测测试:
图有环！

Kruskal最小生成树测试:
MST权重: 19`
    }
  />

  <div class="navigation">
    <a href={`/${lang}/5-advanced/graph-algorithms`} class="nav-button prev">
      {lang === 'en' ? '← Previous: Advanced Graph Algorithms' : '← 上一节：高级图算法'}
    </a>
    <a href={`/${lang}/5-advanced`} class="nav-button next">
      {lang === 'en' ? 'Back to Advanced Algorithms →' : '返回高级算法 →'}
    </a>
  </div>
</Layout>

<style>
  .breadcrumb {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 1rem;
  }

  .breadcrumb a {
    color: #4f46e5;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
  }

  .overview {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .overview p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.7;
    color: #374151;
  }

  h2 {
    font-size: 1.8rem;
    font-weight: 600;
    margin: 3rem 0 1.5rem 0;
    color: #1e293b;
    border-bottom: 2px solid #e2e8f0;
    padding-bottom: 0.5rem;
  }

  p {
    font-size: 1rem;
    line-height: 1.7;
    color: #4b5563;
    margin-bottom: 1.5rem;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid #e2e8f0;
    gap: 1rem;
  }

  .nav-button {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(79, 70, 229, 0.3);
  }

  .nav-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);
  }

  .nav-button.prev {
    margin-right: auto;
  }

  .nav-button.next {
    margin-left: auto;
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }

    .overview {
      padding: 1.5rem;
    }

    h2 {
      font-size: 1.5rem;
    }

    .navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-button {
      width: 100%;
      justify-content: center;
    }
  }
</style> 