---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="STL模板（集合、列表、队列、映射、对、元组）">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l4-competitive">Competitive Programming</a> &gt; STL模板
  </div>

  <h1>STL模板（集合、列表、队列、映射、对、元组）</h1>
  
  <div class="overview">
    <p>
      STL（Standard Template Library）是C++竞赛编程的核心工具。熟练掌握STL容器的特性和使用技巧，能够大大提高解题效率和代码质量。
    </p>
  </div>

  <h2>set 和 multiset - 有序集合</h2>
  
  <CodeExample 
    client:load
    title="set的高级操作和应用"
    code={`#include <iostream>
#include <set>
#include <vector>
using namespace std;

int main() {
    set<int> s;
    multiset<int> ms;
    
    // 插入元素
    vector<int> nums = {3, 1, 4, 1, 5, 9, 2, 6};
    
    for (int x : nums) {
        s.insert(x);    // set自动去重
        ms.insert(x);   // multiset允许重复
    }
    
    cout << "原数组: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    cout << "set (去重排序): ";
    for (int x : s) cout << x << " ";
    cout << endl;
    
    cout << "multiset (保留重复): ";
    for (int x : ms) cout << x << " ";
    cout << endl;
    
    // 查找操作
    int target = 4;
    auto it = s.find(target);
    if (it != s.end()) {
        cout << "找到元素 " << target << endl;
        
        // 找到第一个大于等于target的元素
        auto lb = s.lower_bound(target);
        // 找到第一个大于target的元素  
        auto ub = s.upper_bound(target);
        
        cout << "lower_bound(" << target << "): " << *lb << endl;
        if (ub != s.end()) {
            cout << "upper_bound(" << target << "): " << *ub << endl;
        }
    }
    
    // 删除操作
    s.erase(1);  // 删除值为1的元素
    cout << "删除1后的set: ";
    for (int x : s) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="set基于红黑树实现，自动排序去重，支持O(log n)的插入、删除、查找。lower_bound和upper_bound是竞赛中的重要操作。"
    output={`原数组: 3 1 4 1 5 9 2 6 
set (去重排序): 1 2 3 4 5 6 9 
multiset (保留重复): 1 1 2 3 4 5 6 9 
找到元素 4
lower_bound(4): 4
upper_bound(4): 5
删除1后的set: 2 3 4 5 6 9`}
  />

  <h2>map 和 unordered_map - 映射容器</h2>
  
  <CodeExample 
    client:load
    title="map的实战应用 - 统计和查找"
    code={`#include <iostream>
#include <map>
#include <unordered_map>
#include <string>
#include <vector>
using namespace std;

int main() {
    vector<string> words = {"apple", "banana", "apple", "cherry", "banana", "apple"};
    
    // 使用map统计词频（有序）
    map<string, int> wordCount;
    for (const string& word : words) {
        wordCount[word]++;
    }
    
    cout << "词频统计 (map - 有序):" << endl;
    for (const auto& pair : wordCount) {
        cout << pair.first << ": " << pair.second << endl;
    }
    
    // 使用unordered_map（更快的查找）
    unordered_map<string, int> fastCount;
    for (const string& word : words) {
        fastCount[word]++;
    }
    
    cout << "\\n词频统计 (unordered_map):" << endl;
    for (const auto& pair : fastCount) {
        cout << pair.first << ": " << pair.second << endl;
    }
    
    // map的高级操作
    cout << "\\nmap高级操作:" << endl;
    
    // 查找操作
    string target = "banana";
    auto it = wordCount.find(target);
    if (it != wordCount.end()) {
        cout << "找到 " << target << ", 出现次数: " << it->second << endl;
    }
    
    // 范围查找
    auto lower = wordCount.lower_bound("b");
    auto upper = wordCount.upper_bound("c");
    
    cout << "以'b'或'c'开头的单词:" << endl;
    for (auto it = lower; it != upper; ++it) {
        cout << it->first << ": " << it->second << endl;
    }
    
    return 0;
}`}
    explanation="map基于红黑树，保持键有序，查找O(log n)；unordered_map基于哈希表，查找平均O(1)。竞赛中根据需求选择。"
    output={`词频统计 (map - 有序):
apple: 3
banana: 2
cherry: 1

词频统计 (unordered_map):
cherry: 1
banana: 2
apple: 3

map高级操作:
找到 banana, 出现次数: 2
以'b'或'c'开头的单词:
banana: 2
cherry: 1`}
  />

  <h2>pair 和 tuple - 复合数据类型</h2>
  
  <CodeExample 
    client:load
    title="pair和tuple在竞赛中的应用"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
using namespace std;

int main() {
    // pair的应用 - 坐标点排序
    vector<pair<int, int>> points = {{3, 2}, {1, 4}, {2, 1}, {1, 2}};
    
    cout << "原始点坐标:" << endl;
    for (const auto& p : points) {
        cout << "(" << p.first << ", " << p.second << ") ";
    }
    cout << endl;
    
    // 按x坐标排序，x相同时按y坐标排序
    sort(points.begin(), points.end());
    
    cout << "排序后的点坐标:" << endl;
    for (const auto& p : points) {
        cout << "(" << p.first << ", " << p.second << ") ";
    }
    cout << endl;
    
    // 自定义排序 - 按距离原点的距离排序
    sort(points.begin(), points.end(), [](const pair<int,int>& a, const pair<int,int>& b) {
        return a.first*a.first + a.second*a.second < b.first*b.first + b.second*b.second;
    });
    
    cout << "按距离原点排序:" << endl;
    for (const auto& p : points) {
        int dist2 = p.first*p.first + p.second*p.second;
        cout << "(" << p.first << ", " << p.second << ") 距离²=" << dist2 << "  ";
    }
    cout << endl;
    
    // tuple的应用 - 学生成绩管理
    vector<tuple<string, int, double>> students = {
        {"Alice", 20, 85.5},
        {"Bob", 19, 92.0},
        {"Charlie", 20, 78.5},
        {"David", 19, 88.0}
    };
    
    cout << "\\n学生信息 (姓名, 年龄, 成绩):" << endl;
    for (const auto& student : students) {
        cout << get<0>(student) << " " << get<1>(student) << "岁 " << get<2>(student) << "分" << endl;
    }
    
    // 按成绩降序排序
    sort(students.begin(), students.end(), [](const auto& a, const auto& b) {
        return get<2>(a) > get<2>(b);  // 按成绩降序
    });
    
    cout << "\\n按成绩排序后:" << endl;
    for (const auto& student : students) {
        auto [name, age, score] = student;  // C++17结构化绑定
        cout << name << " " << age << "岁 " << score << "分" << endl;
    }
    
    return 0;
}`}
    explanation="pair适用于两元素组合，支持比较操作；tuple可存储多个不同类型元素，使用get<>访问。C++17的结构化绑定让代码更简洁。"
    output={`原始点坐标:
(3, 2) (1, 4) (2, 1) (1, 2) 
排序后的点坐标:
(1, 2) (1, 4) (2, 1) (3, 2) 
按距离原点排序:
(1, 2) 距离²=5  (2, 1) 距离²=5  (3, 2) 距离²=13  (1, 4) 距离²=17  

学生信息 (姓名, 年龄, 成绩):
Alice 20岁 85.5分
Bob 19岁 92分
Charlie 20岁 78.5分
David 19岁 88分

按成绩排序后:
Bob 19岁 92分
David 19岁 88分
Alice 20岁 85.5分
Charlie 20岁 78.5分`}
  />

  <h2>deque - 双端队列</h2>
  
  <CodeExample 
    client:load
    title="deque的特性和应用场景"
    code={`#include <iostream>
#include <deque>
#include <algorithm>
using namespace std;

int main() {
    deque<int> dq;
    
    // 双端插入
    dq.push_back(3);
    dq.push_front(1);
    dq.push_back(4);
    dq.push_front(0);
    
    cout << "双端插入后: ";
    for (int x : dq) cout << x << " ";
    cout << endl;
    
    // 随机访问
    cout << "dq[1] = " << dq[1] << endl;
    cout << "dq.at(2) = " << dq.at(2) << endl;
    
    // 在中间插入元素
    auto it = dq.begin() + 2;
    dq.insert(it, 2);
    
    cout << "在位置2插入2后: ";
    for (int x : dq) cout << x << " ";
    cout << endl;
    
    // 双端删除
    dq.pop_front();
    dq.pop_back();
    
    cout << "双端删除后: ";
    for (int x : dq) cout << x << " ";
    cout << endl;
    
    // deque的优势：滑动窗口最大值问题
    cout << "\\n滑动窗口应用示例:" << endl;
    deque<int> window;
    vector<int> arr = {1, 3, 2, 5, 8, 7, 4, 6};
    int k = 3;  // 窗口大小
    
    cout << "数组: ";
    for (int x : arr) cout << x << " ";
    cout << "\\n窗口大小: " << k << endl;
    
    for (int i = 0; i < k; i++) {
        window.push_back(arr[i]);
    }
    sort(window.begin(), window.end());
    
    cout << "滑动窗口内容:" << endl;
    for (int i = 0; i <= arr.size() - k; i++) {
        if (i > 0) {
            // 移除窗口左端元素
            auto pos = find(window.begin(), window.end(), arr[i-1]);
            window.erase(pos);
            
            // 添加新元素并保持有序
            auto insert_pos = lower_bound(window.begin(), window.end(), arr[i+k-1]);
            window.insert(insert_pos, arr[i+k-1]);
        }
        
        cout << "窗口[" << i << "," << i+k-1 << "]: ";
        for (int x : window) cout << x << " ";
        cout << "最大值: " << window.back() << endl;
    }
    
    return 0;
}`}
    explanation="deque（双端队列）支持两端O(1)插入删除，中间O(1)随机访问。在需要频繁两端操作时比vector更高效，常用于滑动窗口问题。"
    output={`双端插入后: 0 1 3 4 
dq[1] = 1
dq.at(2) = 3
在位置2插入2后: 0 1 2 3 4 
双端删除后: 1 2 3 

滑动窗口应用示例:
数组: 1 3 2 5 8 7 4 6 
窗口大小: 3
滑动窗口内容:
窗口[0,2]: 1 2 3 最大值: 3
窗口[1,3]: 2 3 5 最大值: 5
窗口[2,4]: 2 5 8 最大值: 8
窗口[3,5]: 5 7 8 最大值: 8
窗口[4,6]: 4 7 8 最大值: 8
窗口[5,7]: 4 6 7 最大值: 7`}
  />

  <h2>STL算法和迭代器</h2>
  
  <CodeExample 
    client:load
    title="STL算法的竞赛应用"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iterator>
using namespace std;

int main() {
    vector<int> nums = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
    
    cout << "原数组: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    // 排序
    sort(nums.begin(), nums.end());
    cout << "排序后: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    // 去重
    auto last = unique(nums.begin(), nums.end());
    nums.erase(last, nums.end());
    cout << "去重后: ";
    for (int x : nums) cout << x << " ";
    cout << endl;
    
    // 二分查找
    int target = 5;
    bool found = binary_search(nums.begin(), nums.end(), target);
    cout << "是否找到" << target << ": " << (found ? "是" : "否") << endl;
    
    // 统计算法
    vector<int> data = {1, 2, 3, 4, 5};
    int sum = accumulate(data.begin(), data.end(), 0);
    int product = accumulate(data.begin(), data.end(), 1, multiplies<int>());
    
    cout << "\\n数组 [1,2,3,4,5]:" << endl;
    cout << "求和: " << sum << endl;
    cout << "求积: " << product << endl;
    
    // 生成和变换
    vector<int> squares(5);
    iota(squares.begin(), squares.end(), 1);  // 生成1,2,3,4,5
    transform(squares.begin(), squares.end(), squares.begin(), 
              [](int x) { return x * x; });
    
    cout << "平方数: ";
    for (int x : squares) cout << x << " ";
    cout << endl;
    
    // 条件操作
    vector<int> test = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // 统计偶数个数
    int evenCount = count_if(test.begin(), test.end(), [](int x) { return x % 2 == 0; });
    cout << "\\n偶数个数: " << evenCount << endl;
    
    // 查找第一个大于5的元素
    auto it = find_if(test.begin(), test.end(), [](int x) { return x > 5; });
    if (it != test.end()) {
        cout << "第一个大于5的元素: " << *it << " (位置: " << distance(test.begin(), it) << ")" << endl;
    }
    
    // 分割：将偶数放前面，奇数放后面
    auto pivot = partition(test.begin(), test.end(), [](int x) { return x % 2 == 0; });
    cout << "分割后 (偶数在前): ";
    for (int x : test) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="STL算法库提供了丰富的算法函数，包括排序、查找、统计、变换等。熟练使用这些算法能显著简化代码实现，提高开发效率。"
    output={`原数组: 3 1 4 1 5 9 2 6 5 3 
排序后: 1 1 2 3 3 4 5 5 6 9 
去重后: 1 2 3 4 5 6 9 
是否找到5: 是

数组 [1,2,3,4,5]:
求和: 15
求积: 120
平方数: 1 4 9 16 25 

偶数个数: 5
第一个大于5的元素: 6 (位置: 5)
分割后 (偶数在前): 2 4 6 8 10 1 3 5 7 9`}
  />

  <div class="navigation">
    <a href="/l4-competitive/data-structures" class="prev">← 数据结构</a>
    <a href="/l4-competitive/hash-tables" class="next">哈希表 →</a>
  </div>
</Layout>

<style>
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>