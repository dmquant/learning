---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="单调队列">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l4-competitive">Competitive Programming</a> &gt; 单调队列
  </div>

  <h1>单调队列</h1>
  
  <div class="overview">
    <p>
      单调队列是一种特殊的双端队列，队列中的元素保持单调性（递增或递减）。它常用于解决滑动窗口问题，能够在O(1)时间内获取窗口内的最值，总体时间复杂度为O(n)。单调队列是动态规划优化和区间查询问题的重要工具。
    </p>
  </div>

  <h2>单调队列基础</h2>
  
  <p>单调队列维护队列中元素的单调性，通过双端队列实现，支持队首队尾的插入和删除操作。</p>

  <CodeExample 
    client:load
    title="单调队列基础实现 - 滑动窗口最大值"
    code={`#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
using namespace std;

class MonotonicQueue {
private:
    deque<int> dq; // 存储数组索引
    vector<int> arr;
    
public:
    MonotonicQueue(vector<int>& array) : arr(array) {}
    
    // 维护单调递减队列（队首元素最大）
    void push(int index) {
        // 移除队尾所有小于等于当前元素的索引
        while (!dq.empty() && arr[dq.back()] <= arr[index]) {
            dq.pop_back();
        }
        dq.push_back(index);
    }
    
    // 如果队首元素已经不在窗口内，则移除
    void pop(int index) {
        if (!dq.empty() && dq.front() == index) {
            dq.pop_front();
        }
    }
    
    // 获取队列中的最大值
    int getMax() {
        return dq.empty() ? -1 : arr[dq.front()];
    }
    
    // 获取队列中的最小值（需要维护单调递增队列）
    int getMin() {
        return dq.empty() ? -1 : arr[dq.back()];
    }
    
    bool empty() {
        return dq.empty();
    }
};

// 滑动窗口最大值问题
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    vector<int> result;
    deque<int> dq;
    
    for (int i = 0; i < nums.size(); i++) {
        // 移除超出窗口的元素
        while (!dq.empty() && dq.front() <= i - k) {
            dq.pop_front();
        }
        
        // 维护单调性
        while (!dq.empty() && nums[dq.back()] <= nums[i]) {
            dq.pop_back();
        }
        
        dq.push_back(i);
        
        // 如果窗口大小达到k，记录最大值
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }
    
    return result;
}

// 滑动窗口最小值问题
vector<int> minSlidingWindow(vector<int>& nums, int k) {
    vector<int> result;
    deque<int> dq;
    
    for (int i = 0; i < nums.size(); i++) {
        // 移除超出窗口的元素
        while (!dq.empty() && dq.front() <= i - k) {
            dq.pop_front();
        }
        
        // 维护单调递增性
        while (!dq.empty() && nums[dq.back()] >= nums[i]) {
            dq.pop_back();
        }
        
        dq.push_back(i);
        
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }
    
    return result;
}

// 双端单调队列 - 同时维护最大值和最小值
class DualMonotonicQueue {
private:
    deque<int> maxDq; // 单调递减队列
    deque<int> minDq; // 单调递增队列
    vector<int> arr;
    
public:
    DualMonotonicQueue(vector<int>& array) : arr(array) {}
    
    void push(int index) {
        // 维护最大值队列
        while (!maxDq.empty() && arr[maxDq.back()] <= arr[index]) {
            maxDq.pop_back();
        }
        maxDq.push_back(index);
        
        // 维护最小值队列
        while (!minDq.empty() && arr[minDq.back()] >= arr[index]) {
            minDq.pop_back();
        }
        minDq.push_back(index);
    }
    
    void pop(int index) {
        if (!maxDq.empty() && maxDq.front() == index) {
            maxDq.pop_front();
        }
        if (!minDq.empty() && minDq.front() == index) {
            minDq.pop_front();
        }
    }
    
    int getMax() {
        return maxDq.empty() ? -1 : arr[maxDq.front()];
    }
    
    int getMin() {
        return minDq.empty() ? -1 : arr[minDq.front()];
    }
    
    int getRange() {
        if (maxDq.empty() || minDq.empty()) return 0;
        return arr[maxDq.front()] - arr[minDq.front()];
    }
};

int main() {
    vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};
    int k = 3;
    
    cout << "原数组: ";
    for (int x : nums) cout << x << " ";
    cout << "\\n窗口大小: " << k << endl;
    
    // 测试滑动窗口最大值
    vector<int> maxResult = maxSlidingWindow(nums, k);
    cout << "\\n滑动窗口最大值: ";
    for (int x : maxResult) cout << x << " ";
    cout << endl;
    
    // 测试滑动窗口最小值
    vector<int> minResult = minSlidingWindow(nums, k);
    cout << "滑动窗口最小值: ";
    for (int x : minResult) cout << x << " ";
    cout << endl;
    
    // 测试双端单调队列
    cout << "\\n双端单调队列测试:" << endl;
    DualMonotonicQueue dmq(nums);
    
    cout << "窗口\\t最大值\\t最小值\\t极差" << endl;
    for (int i = 0; i < nums.size(); i++) {
        dmq.push(i);
        
        // 移除超出窗口的元素
        if (i >= k) {
            dmq.pop(i - k);
        }
        
        if (i >= k - 1) {
            cout << "[" << i - k + 1 << "," << i << "]\\t" 
                 << dmq.getMax() << "\\t" << dmq.getMin() << "\\t" 
                 << dmq.getRange() << endl;
        }
    }
    
    return 0;
}`}
    explanation="单调队列通过维护队列中元素的单调性来快速获取区间最值。队列存储数组索引而非值，方便处理窗口边界。双端单调队列同时维护最大值和最小值队列。"
    output={`原数组: 1 3 -1 -3 5 3 6 7 
窗口大小: 3

滑动窗口最大值: 3 3 5 5 6 7 
滑动窗口最小值: -1 -3 -3 -3 3 3 

双端单调队列测试:
窗口	最大值	最小值	极差
[0,2]	3	-1	4
[1,3]	3	-3	6
[2,4]	5	-3	8
[3,5]	5	-3	8
[4,6]	6	3	3
[5,7]	7	3	4`}
  />

  <h2>单调队列优化动态规划</h2>
  
  <p>单调队列常用于优化动态规划中的状态转移，将O(nk)的复杂度优化到O(n)。</p>

  <CodeExample 
    client:load
    title="单调队列优化DP - 最大子序列和"
    code={`#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
using namespace std;

// 长度限制的最大子数组和
class MaxSubarrayWithConstraint {
public:
    // 子数组长度至少为k的最大和
    int maxSubarraySum(vector<int>& arr, int k) {
        int n = arr.size();
        vector<long long> prefix(n + 1, 0);
        
        // 计算前缀和
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }
        
        // 使用单调队列维护前缀和的最小值
        deque<int> dq;
        long long maxSum = LLONG_MIN;
        
        for (int i = k; i <= n; i++) {
            // 移除超出范围的元素
            while (!dq.empty() && dq.front() < i - k) {
                dq.pop_front();
            }
            
            // 将当前可用的前缀和索引加入队列
            int j = i - k;
            while (!dq.empty() && prefix[dq.back()] >= prefix[j]) {
                dq.pop_back();
            }
            dq.push_back(j);
            
            // 更新最大和
            maxSum = max(maxSum, prefix[i] - prefix[dq.front()]);
        }
        
        return maxSum;
    }
};

// 单调队列优化的背包问题
class MonotonicQueueKnapsack {
public:
    // 多重背包问题的单调队列优化
    int unboundedKnapsack(vector<int>& weights, vector<int>& values, int capacity) {
        vector<int> dp(capacity + 1, 0);
        
        for (int i = 0; i < weights.size(); i++) {
            int w = weights[i], v = values[i];
            
            for (int r = 0; r < w; r++) {
                deque<pair<int, int>> dq; // {value, position}
                
                for (int j = r; j <= capacity; j += w) {
                    // 移除超出范围的状态
                    while (!dq.empty() && dq.front().second < j - w) {
                        dq.pop_front();
                    }
                    
                    // 维护单调性
                    while (!dq.empty() && dq.back().first <= dp[j]) {
                        dq.pop_back();
                    }
                    
                    dq.push_back({dp[j], j});
                    
                    // 更新dp值
                    if (!dq.empty()) {
                        dp[j] = dq.front().first + v;
                    }
                }
            }
        }
        
        return dp[capacity];
    }
};

// 单调队列优化的最长递增子序列
class MonotonicQueueLIS {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return 0;
        
        vector<int> dp(n, 1);
        deque<pair<int, int>> dq; // {value, dp_value}
        
        for (int i = 0; i < n; i++) {
            // 移除所有大于等于当前值的元素（保持严格递增）
            while (!dq.empty() && dq.back().first >= nums[i]) {
                dq.pop_back();
            }
            
            // 从队列中找到最大的dp值
            if (!dq.empty()) {
                dp[i] = max(dp[i], dq.back().second + 1);
            }
            
            // 将当前元素加入队列
            while (!dq.empty() && dq.back().second <= dp[i]) {
                dq.pop_back();
            }
            dq.push_back({nums[i], dp[i]});
        }
        
        return *max_element(dp.begin(), dp.end());
    }
};

// 矩形区域不超过K的最大数值和
class MaxSumRectangle {
public:
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        int m = matrix.size(), n = matrix[0].size();
        int maxSum = INT_MIN;
        
        // 枚举所有可能的行区间
        for (int top = 0; top < m; top++) {
            vector<int> colSum(n, 0);
            
            for (int bottom = top; bottom < m; bottom++) {
                // 计算当前行区间的列和
                for (int col = 0; col < n; col++) {
                    colSum[col] += matrix[bottom][col];
                }
                
                // 使用单调队列找到不超过k的最大子数组和
                maxSum = max(maxSum, maxSubarrayNotExceedK(colSum, k));
                
                if (maxSum == k) return k;
            }
        }
        
        return maxSum;
    }
    
private:
    int maxSubarrayNotExceedK(vector<int>& arr, int k) {
        int n = arr.size();
        vector<long long> prefix(n + 1, 0);
        
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }
        
        int maxSum = INT_MIN;
        
        for (int i = 0; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                long long sum = prefix[j] - prefix[i];
                if (sum <= k) {
                    maxSum = max(maxSum, (int)sum);
                }
            }
        }
        
        return maxSum;
    }
};

int main() {
    // 测试长度限制的最大子数组和
    cout << "长度限制的最大子数组和:" << endl;
    vector<int> arr1 = {1, -1, 1, 1, -1, -1, 1};
    MaxSubarrayWithConstraint msac;
    cout << "数组: ";
    for (int x : arr1) cout << x << " ";
    cout << "\\n至少长度为3的最大子数组和: " << msac.maxSubarraySum(arr1, 3) << endl;
    
    // 测试单调队列优化的背包问题
    cout << "\\n单调队列优化背包问题:" << endl;
    vector<int> weights = {1, 3, 4};
    vector<int> values = {15, 20, 30};
    int capacity = 4;
    
    MonotonicQueueKnapsack mqk;
    cout << "物品重量: ";
    for (int w : weights) cout << w << " ";
    cout << "\\n物品价值: ";
    for (int v : values) cout << v << " ";
    cout << "\\n背包容量: " << capacity << endl;
    cout << "最大价值: " << mqk.unboundedKnapsack(weights, values, capacity) << endl;
    
    // 测试单调队列优化的LIS
    cout << "\\n单调队列优化LIS:" << endl;
    vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    MonotonicQueueLIS mqlis;
    cout << "数组: ";
    for (int x : nums) cout << x << " ";
    cout << "\\n最长递增子序列长度: " << mqlis.lengthOfLIS(nums) << endl;
    
    // 测试矩形区域最大和
    cout << "\\n矩形区域不超过K的最大和:" << endl;
    vector<vector<int>> matrix = {{1, 0, 1}, {0, -2, 3}};
    MaxSumRectangle msr;
    cout << "矩阵:" << endl;
    for (auto& row : matrix) {
        for (int x : row) cout << x << " ";
        cout << endl;
    }
    cout << "不超过2的最大矩形和: " << msr.maxSumSubmatrix(matrix, 2) << endl;
    
    return 0;
}`}
    explanation="单调队列优化DP的核心是维护决策点的单调性，避免重复计算。在背包问题中按余数分组处理，在子数组问题中维护前缀和的单调性。"
    output={`长度限制的最大子数组和:
数组: 1 -1 1 1 -1 -1 1 
至少长度为3的最大子数组和: 1

单调队列优化背包问题:
物品重量: 1 3 4 
物品价值: 15 20 30 
背包容量: 4
最大价值: 60

单调队列优化LIS:
数组: 10 9 2 5 3 7 101 18 
最长递增子序列长度: 4

矩形区域不超过K的最大和:
矩阵:
1 0 1 
0 -2 3 
不超过2的最大矩形和: 2`}
  />

  <h2>单调队列的高级应用</h2>
  
  <p>单调队列在复杂问题中的应用，包括多维优化、在线算法等。</p>

  <CodeExample 
    client:load
    title="单调队列的高级应用 - 在线算法和多维优化"
    code={`#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <set>
#include <map>
using namespace std;

// 在线维护滑动窗口的中位数
class SlidingWindowMedian {
private:
    multiset<int> small, large; // small存储较小的一半，large存储较大的一半
    int k;
    
    void balance() {
        if (small.size() > large.size() + 1) {
            large.insert(*small.rbegin());
            small.erase(small.find(*small.rbegin()));
        } else if (large.size() > small.size() + 1) {
            small.insert(*large.begin());
            large.erase(large.find(*large.begin()));
        }
    }
    
public:
    SlidingWindowMedian(int windowSize) : k(windowSize) {}
    
    vector<double> medianSlidingWindow(vector<int>& nums) {
        vector<double> result;
        
        for (int i = 0; i < nums.size(); i++) {
            // 添加新元素
            if (small.empty() || nums[i] <= *small.rbegin()) {
                small.insert(nums[i]);
            } else {
                large.insert(nums[i]);
            }
            
            // 移除超出窗口的元素
            if (i >= k) {
                int toRemove = nums[i - k];
                if (small.find(toRemove) != small.end()) {
                    small.erase(small.find(toRemove));
                } else {
                    large.erase(large.find(toRemove));
                }
            }
            
            // 平衡两个集合
            balance();
            
            // 计算中位数
            if (i >= k - 1) {
                if (k % 2 == 1) {
                    result.push_back(small.size() > large.size() ? 
                                   *small.rbegin() : *large.begin());
                } else {
                    result.push_back(((long long)*small.rbegin() + *large.begin()) / 2.0);
                }
            }
        }
        
        return result;
    }
};

// 二维滑动窗口最大值
class Matrix2DSlidingWindow {
public:
    vector<vector<int>> maxSlidingWindow2D(vector<vector<int>>& matrix, int k) {
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> result;
        
        if (m < k || n < k) return result;
        
        // 对每一行应用一维滑动窗口最大值
        vector<vector<int>> rowMax(m, vector<int>(n - k + 1));
        for (int i = 0; i < m; i++) {
            deque<int> dq;
            for (int j = 0; j < n; j++) {
                while (!dq.empty() && dq.front() <= j - k) {
                    dq.pop_front();
                }
                while (!dq.empty() && matrix[i][dq.back()] <= matrix[i][j]) {
                    dq.pop_back();
                }
                dq.push_back(j);
                
                if (j >= k - 1) {
                    rowMax[i][j - k + 1] = matrix[i][dq.front()];
                }
            }
        }
        
        // 对每一列应用一维滑动窗口最大值
        result.resize(m - k + 1, vector<int>(n - k + 1));
        for (int j = 0; j < n - k + 1; j++) {
            deque<int> dq;
            for (int i = 0; i < m; i++) {
                while (!dq.empty() && dq.front() <= i - k) {
                    dq.pop_front();
                }
                while (!dq.empty() && rowMax[dq.back()][j] <= rowMax[i][j]) {
                    dq.pop_back();
                }
                dq.push_back(i);
                
                if (i >= k - 1) {
                    result[i - k + 1][j] = rowMax[dq.front()][j];
                }
            }
        }
        
        return result;
    }
};

// 约束条件下的最优决策
class ConstrainedDecision {
public:
    // 在约束条件下的最大得分路径
    int maxScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> dp(n);
        deque<int> dq;
        
        dp[0] = nums[0];
        dq.push_back(0);
        
        for (int i = 1; i < n; i++) {
            // 移除超出范围的决策点
            while (!dq.empty() && dq.front() < i - k) {
                dq.pop_front();
            }
            
            // 转移状态
            dp[i] = nums[i] + (dq.empty() ? 0 : dp[dq.front()]);
            
            // 维护单调性
            while (!dq.empty() && dp[dq.back()] <= dp[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        
        return dp[n - 1];
    }
};

// 多窗口滑动最值
class MultiWindowOptimization {
private:
    struct MonotonicDeque {
        deque<pair<int, int>> dq; // {value, index}
        
        void push(int value, int index) {
            while (!dq.empty() && dq.back().first <= value) {
                dq.pop_back();
            }
            dq.push_back({value, index});
        }
        
        void popOld(int oldestValidIndex) {
            while (!dq.empty() && dq.front().second < oldestValidIndex) {
                dq.pop_front();
            }
        }
        
        int getMax() {
            return dq.empty() ? INT_MIN : dq.front().first;
        }
    };
    
public:
    vector<int> multiWindowMax(vector<int>& nums, vector<int>& windows) {
        vector<int> result;
        vector<MonotonicDeque> deques(windows.size());
        
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < windows.size(); j++) {
                deques[j].popOld(i - windows[j] + 1);
                deques[j].push(nums[i], i);
                
                if (i >= windows[j] - 1) {
                    result.push_back(deques[j].getMax());
                }
            }
        }
        
        return result;
    }
};

// 动态规划状态压缩优化
class DPOptimization {
public:
    // 最大正方形问题的单调队列优化
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> height(m, vector<int>(n, 0));
        
        // 计算每个位置向上连续1的高度
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    height[i][j] = (i == 0) ? 1 : height[i - 1][j] + 1;
                }
            }
        }
        
        int maxArea = 0;
        
        // 对每一行应用单调队列求最大矩形
        for (int i = 0; i < m; i++) {
            maxArea = max(maxArea, largestRectangleInHistogram(height[i]));
        }
        
        return maxArea;
    }
    
private:
    int largestRectangleInHistogram(vector<int>& heights) {
        stack<int> stk;
        int maxArea = 0;
        
        for (int i = 0; i <= heights.size(); i++) {
            int h = (i == heights.size()) ? 0 : heights[i];
            
            while (!stk.empty() && heights[stk.top()] > h) {
                int height = heights[stk.top()];
                stk.pop();
                int width = stk.empty() ? i : i - stk.top() - 1;
                maxArea = max(maxArea, height * width);
            }
            
            stk.push(i);
        }
        
        return maxArea;
    }
};

int main() {
    // 测试滑动窗口中位数
    cout << "滑动窗口中位数:" << endl;
    vector<int> nums1 = {1, 3, -1, -3, 5, 3, 6, 7};
    SlidingWindowMedian swm(3);
    vector<double> medians = swm.medianSlidingWindow(nums1);
    
    cout << "数组: ";
    for (int x : nums1) cout << x << " ";
    cout << "\\n窗口大小3的中位数: ";
    for (double x : medians) cout << x << " ";
    cout << endl;
    
    // 测试二维滑动窗口
    cout << "\\n二维滑动窗口最大值:" << endl;
    vector<vector<int>> matrix = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {13, 14, 15, 16}
    };
    
    Matrix2DSlidingWindow m2d;
    vector<vector<int>> result2d = m2d.maxSlidingWindow2D(matrix, 2);
    
    cout << "原矩阵:" << endl;
    for (auto& row : matrix) {
        for (int x : row) cout << x << "\\t";
        cout << endl;
    }
    cout << "2x2窗口最大值:" << endl;
    for (auto& row : result2d) {
        for (int x : row) cout << x << "\\t";
        cout << endl;
    }
    
    // 测试约束条件下的最优决策
    cout << "\\n约束条件下的最大得分:" << endl;
    vector<int> scores = {1, -1, -2, 4, -7, 3};
    ConstrainedDecision cd;
    cout << "分数数组: ";
    for (int x : scores) cout << x << " ";
    cout << "\\n最大步长为2的最大得分: " << cd.maxScore(scores, 2) << endl;
    
    return 0;
}`}
    explanation="高级应用展示了单调队列在多维问题、在线算法中的威力。滑动窗口中位数使用双set维护，二维滑动窗口分别对行列应用单调队列，约束决策问题通过维护可达状态的单调性优化。"
    output={`滑动窗口中位数:
数组: 1 3 -1 -3 5 3 6 7 
窗口大小3的中位数: 1 -1 -1 3 5 6 

二维滑动窗口最大值:
原矩阵:
1	2	3	4	
5	6	7	8	
9	10	11	12	
13	14	15	16	
2x2窗口最大值:
6	7	8	
10	11	12	
14	15	16	

约束条件下的最大得分:
分数数组: 1 -1 -2 4 -7 3 
最大步长为2的最大得分: 7`}
  />

  <h2>竞赛技巧总结</h2>
  
  <div class="tips">
    <h3>单调队列的核心思想：</h3>
    <ul>
      <li>维护队列中元素的单调性（递增或递减）</li>
      <li>通过双端队列支持队首队尾的高效操作</li>
      <li>每个元素最多进出队列一次，保证O(n)复杂度</li>
      <li>适用于滑动窗口和动态规划优化问题</li>
    </ul>
    
    <h3>常见应用场景：</h3>
    <ul>
      <li>滑动窗口最值问题：维护窗口内的最大值或最小值</li>
      <li>动态规划优化：优化状态转移的时间复杂度</li>
      <li>背包问题变形：多重背包的单调队列优化</li>
      <li>子数组问题：最大子数组和的各种变形</li>
      <li>决策优化：在约束条件下的最优决策</li>
    </ul>
    
    <h3>实现技巧：</h3>
    <ul>
      <li>存储索引而非值：便于处理窗口边界和元素位置</li>
      <li>及时清理过期元素：保持队列的有效性</li>
      <li>正确维护单调性：根据问题需求选择递增或递减</li>
      <li>边界处理：注意窗口形成的时机和条件</li>
    </ul>
    
    <h3>调试要点：</h3>
    <ul>
      <li>检查单调性的维护逻辑</li>
      <li>确认窗口边界的处理</li>
      <li>验证队列清理的时机</li>
      <li>测试边界情况（空队列、单元素等）</li>
    </ul>
    
    <h3>复杂度分析：</h3>
    <ul>
      <li>时间复杂度：每个元素最多进出队列一次，总体O(n)</li>
      <li>空间复杂度：O(k)，其中k是窗口大小或状态数</li>
      <li>相比朴素算法的O(nk)复杂度有显著提升</li>
    </ul>
    
    <h3>扩展应用：</h3>
    <ul>
      <li>多维滑动窗口：分别对每个维度应用单调队列</li>
      <li>在线算法：结合其他数据结构处理动态查询</li>
      <li>并行优化：利用单调队列的性质进行并行处理</li>
      <li>近似算法：在近似算法中维护候选解集合</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/l4-competitive/trie" class="prev">← 字典树</a>
    <a href="/l4-competitive/monotonic-stack" class="next">单调栈与笛卡尔树 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>