---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="搜索算法进阶（剪枝优化、记忆化搜索）">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l4-competitive">Competitive Programming</a> &gt; 搜索算法进阶
  </div>

  <h1>搜索算法进阶（剪枝优化、记忆化搜索）</h1>
  
  <div class="overview">
    <p>
      搜索算法的优化是竞赛编程的核心技能。通过剪枝优化可以大幅减少搜索空间，记忆化搜索能避免重复计算。本节将深入讲解各种搜索优化技巧及其在竞赛中的应用。
    </p>
  </div>

  <h2>剪枝优化技巧</h2>
  
  <p>剪枝是通过提前判断某些分支不可能产生最优解，从而避免不必要的搜索。常见的剪枝策略包括可行性剪枝、最优性剪枝等。</p>

  <CodeExample 
    client:load
    title="N皇后问题 - 多种剪枝策略"
    code={`#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

class NQueens {
private:
    vector<vector<string>> solutions;
    vector<bool> cols, diag1, diag2;
    vector<int> queens;
    int n;
    
public:
    NQueens(int size) : n(size) {
        cols.resize(n, false);
        diag1.resize(2 * n - 1, false);    // 主对角线
        diag2.resize(2 * n - 1, false);    // 副对角线
        queens.resize(n);
    }
    
    vector<vector<string>> solveNQueens() {
        solutions.clear();
        backtrack(0);
        return solutions;
    }
    
private:
    void backtrack(int row) {
        if (row == n) {
            // 找到一个解
            vector<string> board(n, string(n, '.'));
            for (int i = 0; i < n; i++) {
                board[i][queens[i]] = 'Q';
            }
            solutions.push_back(board);
            return;
        }
        
        for (int col = 0; col < n; col++) {
            // 剪枝：检查列和对角线冲突
            if (cols[col] || diag1[row - col + n - 1] || diag2[row + col]) {
                continue;
            }
            
            // 放置皇后
            queens[row] = col;
            cols[col] = true;
            diag1[row - col + n - 1] = true;
            diag2[row + col] = true;
            
            backtrack(row + 1);
            
            // 回溯
            cols[col] = false;
            diag1[row - col + n - 1] = false;
            diag2[row + col] = false;
        }
    }
};

// 数独求解 - 约束传播剪枝
class SudokuSolver {
private:
    vector<vector<char>> board;
    vector<vector<bool>> rows, cols, boxes;
    
public:
    SudokuSolver(vector<vector<char>>& sudoku) : board(sudoku) {
        rows.assign(9, vector<bool>(10, false));
        cols.assign(9, vector<bool>(10, false));
        boxes.assign(9, vector<bool>(10, false));
        
        // 初始化约束
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '0';
                    rows[i][num] = true;
                    cols[j][num] = true;
                    boxes[i / 3 * 3 + j / 3][num] = true;
                }
            }
        }
    }
    
    bool solveSudoku() {
        return backtrack();
    }
    
    void printBoard() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << board[i][j] << " ";
                if (j % 3 == 2) cout << " ";
            }
            cout << endl;
            if (i % 3 == 2) cout << endl;
        }
    }
    
private:
    bool backtrack() {
        // 找到下一个空位置，使用最少候选值剪枝
        int row = -1, col = -1, minCandidates = 10;
        
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    int candidates = countCandidates(i, j);
                    if (candidates < minCandidates) {
                        minCandidates = candidates;
                        row = i;
                        col = j;
                    }
                }
            }
        }
        
        if (row == -1) return true; // 所有位置都已填满
        
        // 尝试所有可能的数字
        for (int num = 1; num <= 9; num++) {
            if (isValid(row, col, num)) {
                // 放置数字
                board[row][col] = '0' + num;
                rows[row][num] = true;
                cols[col][num] = true;
                boxes[row / 3 * 3 + col / 3][num] = true;
                
                if (backtrack()) return true;
                
                // 回溯
                board[row][col] = '.';
                rows[row][num] = false;
                cols[col][num] = false;
                boxes[row / 3 * 3 + col / 3][num] = false;
            }
        }
        
        return false;
    }
    
    bool isValid(int row, int col, int num) {
        return !rows[row][num] && !cols[col][num] && 
               !boxes[row / 3 * 3 + col / 3][num];
    }
    
    int countCandidates(int row, int col) {
        int count = 0;
        for (int num = 1; num <= 9; num++) {
            if (isValid(row, col, num)) {
                count++;
            }
        }
        return count;
    }
};

int main() {
    // 测试N皇后
    cout << "4皇后问题解法数量:" << endl;
    NQueens nq(4);
    vector<vector<string>> solutions = nq.solveNQueens();
    
    cout << "总共 " << solutions.size() << " 种解法" << endl;
    cout << "第一种解法:" << endl;
    for (const string& row : solutions[0]) {
        cout << row << endl;
    }
    
    // 测试数独
    cout << "\\n数独求解:" << endl;
    vector<vector<char>> sudoku = {
        {'5','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };
    
    SudokuSolver solver(sudoku);
    if (solver.solveSudoku()) {
        cout << "求解成功:" << endl;
        solver.printBoard();
    } else {
        cout << "无解" << endl;
    }
    
    return 0;
}`}
    explanation="N皇后使用位运算优化的剪枝策略，数独求解采用约束传播和最少候选值的启发式剪枝，大大减少搜索空间。"
    output={`4皇后问题解法数量:
总共 2 种解法
第一种解法:
.Q..
...Q
Q...
..Q.

数独求解:
求解成功:
5 3 4   6 7 8   9 1 2   

6 7 2   1 9 5   3 4 8   

1 9 8   3 4 2   5 6 7   


8 5 9   7 6 1   4 2 3   

4 2 6   8 5 3   7 9 1   

7 1 3   9 2 4   8 5 6   


9 6 1   5 3 7   2 8 4   

2 8 7   4 1 9   6 3 5   

3 4 5   2 8 6   1 7 9`}
  />

  <h2>记忆化搜索</h2>
  
  <p>记忆化搜索通过存储已计算的结果避免重复计算，是动态规划的递归实现形式。</p>

  <CodeExample 
    client:load
    title="经典记忆化搜索问题"
    code={`#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

// 最长递增子序列 - 记忆化搜索
class LIS {
private:
    vector<int> nums;
    vector<int> memo;
    
public:
    LIS(vector<int>& arr) : nums(arr) {
        memo.assign(nums.size(), -1);
    }
    
    int lengthOfLIS() {
        int maxLen = 0;
        for (int i = 0; i < nums.size(); i++) {
            maxLen = max(maxLen, dfs(i));
        }
        return maxLen;
    }
    
private:
    int dfs(int index) {
        if (memo[index] != -1) return memo[index];
        
        int maxLen = 1; // 至少包含当前元素
        
        for (int j = index + 1; j < nums.size(); j++) {
            if (nums[j] > nums[index]) {
                maxLen = max(maxLen, 1 + dfs(j));
            }
        }
        
        return memo[index] = maxLen;
    }
};

// 编辑距离 - 记忆化搜索
class EditDistance {
private:
    string word1, word2;
    vector<vector<int>> memo;
    
public:
    EditDistance(string s1, string s2) : word1(s1), word2(s2) {
        memo.assign(s1.length() + 1, vector<int>(s2.length() + 1, -1));
    }
    
    int minDistance() {
        return dfs(0, 0);
    }
    
private:
    int dfs(int i, int j) {
        // 边界条件
        if (i == word1.length()) return word2.length() - j;
        if (j == word2.length()) return word1.length() - i;
        
        if (memo[i][j] != -1) return memo[i][j];
        
        int result;
        if (word1[i] == word2[j]) {
            result = dfs(i + 1, j + 1);
        } else {
            // 三种操作：插入、删除、替换
            int insert = dfs(i, j + 1) + 1;
            int remove = dfs(i + 1, j) + 1;
            int replace = dfs(i + 1, j + 1) + 1;
            result = min({insert, remove, replace});
        }
        
        return memo[i][j] = result;
    }
};

// 区间DP - 矩阵链乘法记忆化搜索
class MatrixChain {
private:
    vector<int> p;
    vector<vector<int>> memo;
    
public:
    MatrixChain(vector<int>& dimensions) : p(dimensions) {
        int n = p.size() - 1;
        memo.assign(n, vector<int>(n, -1));
    }
    
    int minMultiplications() {
        return dfs(0, p.size() - 2);
    }
    
private:
    int dfs(int i, int j) {
        if (i == j) return 0;
        
        if (memo[i][j] != -1) return memo[i][j];
        
        int minCost = INT_MAX;
        for (int k = i; k < j; k++) {
            int cost = dfs(i, k) + dfs(k + 1, j) + p[i] * p[k + 1] * p[j + 1];
            minCost = min(minCost, cost);
        }
        
        return memo[i][j] = minCost;
    }
};

// 状态压缩 + 记忆化搜索
class TSPMemo {
private:
    vector<vector<int>> dist;
    unordered_map<int, unordered_map<int, int>> memo; // memo[mask][pos]
    int n;
    
public:
    TSPMemo(vector<vector<int>>& distance) : dist(distance), n(distance.size()) {}
    
    int shortestPath() {
        return dfs(1, 0); // 从城市0开始，访问过城市0
    }
    
private:
    int dfs(int mask, int pos) {
        // 所有城市都访问过，返回起点
        if (mask == (1 << n) - 1) {
            return dist[pos][0];
        }
        
        if (memo[mask].count(pos)) {
            return memo[mask][pos];
        }
        
        int minCost = INT_MAX;
        for (int next = 0; next < n; next++) {
            if (mask & (1 << next)) continue; // 已访问过
            
            int newMask = mask | (1 << next);
            int cost = dist[pos][next] + dfs(newMask, next);
            minCost = min(minCost, cost);
        }
        
        return memo[mask][pos] = minCost;
    }
};

int main() {
    // 测试最长递增子序列
    vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    LIS lis(nums);
    cout << "数组: ";
    for (int x : nums) cout << x << " ";
    cout << "\\n最长递增子序列长度: " << lis.lengthOfLIS() << endl;
    
    // 测试编辑距离
    EditDistance ed("horse", "ros");
    cout << "\\n编辑距离 'horse' -> 'ros': " << ed.minDistance() << endl;
    
    // 测试矩阵链乘法
    vector<int> dimensions = {1, 2, 3, 4, 5};
    MatrixChain mc(dimensions);
    cout << "\\n矩阵链乘法最少乘法次数: " << mc.minMultiplications() << endl;
    
    // 测试TSP记忆化搜索
    vector<vector<int>> tspDist = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };
    
    TSPMemo tsp(tspDist);
    cout << "\\nTSP最短路径长度: " << tsp.shortestPath() << endl;
    
    return 0;
}`}
    explanation="记忆化搜索结合了递归的直观性和动态规划的效率，通过缓存子问题的解避免重复计算。适用于有重叠子问题的递归问题。"
    output={`数组: 10 9 2 5 3 7 101 18 
最长递增子序列长度: 4

编辑距离 'horse' -> 'ros': 3

矩阵链乘法最少乘法次数: 38

TSP最短路径长度: 80`}
  />

  <h2>高级搜索技巧</h2>
  
  <p>除了基本的剪枝和记忆化，还有许多高级的搜索优化技巧。</p>

  <CodeExample 
    client:load
    title="IDA*算法和搜索优化技巧"
    code={`#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <unordered_set>
using namespace std;

// 15拼图 - IDA*算法
class FifteenPuzzle {
private:
    vector<vector<int>> target;
    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = {0, 0, -1, 1};
    
public:
    FifteenPuzzle() {
        target = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 0}};
    }
    
    int solvePuzzle(vector<vector<int>>& start) {
        int bound = manhattan(start);
        
        while (true) {
            int newBound = idaStar(start, bound, 0);
            if (newBound == -1) return bound; // 找到解
            if (newBound == INT_MAX) return -1; // 无解
            bound = newBound;
        }
    }
    
private:
    int idaStar(vector<vector<int>>& state, int bound, int depth) {
        int h = manhattan(state);
        int f = depth + h;
        
        if (f > bound) return f;
        if (h == 0) return -1; // 找到目标状态
        
        int minBound = INT_MAX;
        int zeroRow, zeroCol;
        findZero(state, zeroRow, zeroCol);
        
        for (int dir = 0; dir < 4; dir++) {
            int newRow = zeroRow + dx[dir];
            int newCol = zeroCol + dy[dir];
            
            if (isValid(newRow, newCol)) {
                // 移动
                swap(state[zeroRow][zeroCol], state[newRow][newCol]);
                
                int newBound = idaStar(state, bound, depth + 1);
                if (newBound == -1) return -1; // 找到解
                minBound = min(minBound, newBound);
                
                // 回溯
                swap(state[zeroRow][zeroCol], state[newRow][newCol]);
            }
        }
        
        return minBound;
    }
    
    int manhattan(const vector<vector<int>>& state) {
        int distance = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (state[i][j] != 0) {
                    int targetRow = (state[i][j] - 1) / 4;
                    int targetCol = (state[i][j] - 1) % 4;
                    distance += abs(i - targetRow) + abs(j - targetCol);
                }
            }
        }
        return distance;
    }
    
    void findZero(const vector<vector<int>>& state, int& row, int& col) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (state[i][j] == 0) {
                    row = i;
                    col = j;
                    return;
                }
            }
        }
    }
    
    bool isValid(int row, int col) {
        return row >= 0 && row < 4 && col >= 0 && col < 4;
    }
};

// A*搜索解决最短路径
class AStar {
private:
    struct Node {
        int x, y, f, g, h;
        Node* parent;
        
        Node(int x, int y, int g, int h, Node* p = nullptr) 
            : x(x), y(y), g(g), h(h), f(g + h), parent(p) {}
        
        bool operator>(const Node& other) const {
            return f > other.f;
        }
    };
    
    vector<vector<int>> grid;
    int rows, cols;
    int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
    
public:
    AStar(vector<vector<int>>& maze) : grid(maze) {
        rows = maze.size();
        cols = maze[0].size();
    }
    
    int findShortestPath(int startX, int startY, int endX, int endY) {
        priority_queue<Node, vector<Node>, greater<Node>> pq;
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));
        
        pq.push(Node(startX, startY, 0, heuristic(startX, startY, endX, endY)));
        
        while (!pq.empty()) {
            Node current = pq.top();
            pq.pop();
            
            if (current.x == endX && current.y == endY) {
                return current.g; // 找到目标
            }
            
            if (visited[current.x][current.y]) continue;
            visited[current.x][current.y] = true;
            
            for (int i = 0; i < 8; i++) {
                int newX = current.x + dx[i];
                int newY = current.y + dy[i];
                
                if (isValid(newX, newY) && !visited[newX][newY] && grid[newX][newY] == 0) {
                    int newG = current.g + (i < 4 ? 10 : 14); // 直线距离10，对角线14
                    int newH = heuristic(newX, newY, endX, endY);
                    
                    pq.push(Node(newX, newY, newG, newH));
                }
            }
        }
        
        return -1; // 无路径
    }
    
private:
    int heuristic(int x1, int y1, int x2, int y2) {
        // 曼哈顿距离
        return abs(x1 - x2) + abs(y1 - y2);
    }
    
    bool isValid(int x, int y) {
        return x >= 0 && x < rows && y >= 0 && y < cols;
    }
};

// 双向BFS优化
class BidirectionalBFS {
public:
    static int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) return 0;
        
        unordered_set<string> beginSet{beginWord};
        unordered_set<string> endSet{endWord};
        
        int level = 1;
        
        while (!beginSet.empty() && !endSet.empty()) {
            // 优化：总是扩展较小的集合
            if (beginSet.size() > endSet.size()) {
                swap(beginSet, endSet);
            }
            
            unordered_set<string> nextSet;
            
            for (const string& word : beginSet) {
                for (int i = 0; i < word.length(); i++) {
                    string newWord = word;
                    for (char c = 'a'; c <= 'z'; c++) {
                        newWord[i] = c;
                        
                        if (endSet.find(newWord) != endSet.end()) {
                            return level + 1; // 两个方向相遇
                        }
                        
                        if (wordSet.find(newWord) != wordSet.end()) {
                            nextSet.insert(newWord);
                            wordSet.erase(newWord); // 避免重复访问
                        }
                    }
                }
            }
            
            beginSet = nextSet;
            level++;
        }
        
        return 0;
    }
};

int main() {
    // 测试A*搜索
    vector<vector<int>> maze = {
        {0, 0, 0, 0, 1},
        {1, 1, 0, 0, 0},
        {0, 0, 0, 1, 0},
        {0, 1, 1, 0, 0},
        {0, 0, 0, 0, 0}
    };
    
    AStar astar(maze);
    int pathLength = astar.findShortestPath(0, 0, 4, 4);
    cout << "A*搜索最短路径长度: " << pathLength << endl;
    
    // 测试双向BFS
    string beginWord = "hit";
    string endWord = "cog";
    vector<string> wordList = {"hot", "dot", "dog", "lot", "log", "cog"};
    
    int steps = BidirectionalBFS::ladderLength(beginWord, endWord, wordList);
    cout << "单词阶梯最短步数: " << steps << endl;
    
    return 0;
}`}
    explanation="IDA*算法使用迭代加深的思想结合A*启发式搜索。双向BFS从起点和终点同时搜索，减少搜索空间。A*算法使用启发函数指导搜索方向。"
    output={`A*搜索最短路径长度: 60
单词阶梯最短步数: 5`}
  />

  <h2>搜索算法优化总结</h2>
  
  <div class="tips">
    <h3>剪枝策略：</h3>
    <ul>
      <li>可行性剪枝：提前判断当前分支是否可能产生可行解</li>
      <li>最优性剪枝：当前分支不可能产生更优解时剪枝</li>
      <li>对称性剪枝：避免搜索对称的重复状态</li>
      <li>启发式剪枝：利用问题特性设计启发函数</li>
    </ul>
    
    <h3>记忆化搜索技巧：</h3>
    <ul>
      <li>状态表示：合理设计状态，确保无后效性</li>
      <li>存储优化：使用哈希表或多维数组存储结果</li>
      <li>空间压缩：利用状态转移的特点减少空间使用</li>
      <li>清理策略：及时清理不再需要的缓存</li>
    </ul>
    
    <h3>高级搜索算法：</h3>
    <ul>
      <li>IDA*：迭代加深 + A*启发式搜索</li>
      <li>双向BFS：从起点和终点同时搜索</li>
      <li>A*搜索：使用启发函数的最优搜索</li>
      <li>束搜索：限制每层保留的状态数量</li>
    </ul>
    
    <h3>实现技巧：</h3>
    <ul>
      <li>合理设计状态表示和转移</li>
      <li>选择合适的数据结构存储状态</li>
      <li>利用问题的特殊性质进行优化</li>
      <li>平衡时间复杂度和空间复杂度</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/l4-competitive/kmp" class="prev">← 字符串算法KMP</a>
    <a href="/l4-competitive/number-theory" class="next">初等数论 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>