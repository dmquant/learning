---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="数据结构（栈、队列、链表、优先队列）">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l4-competitive">Competitive Programming</a> &gt; 数据结构
  </div>

  <h1>数据结构（栈、队列、链表、优先队列）</h1>
  
  <div class="overview">
    <p>
      在竞赛编程中，掌握基础数据结构的高效实现和灵活应用是至关重要的。本节将深入讲解栈、队列、链表和优先队列在算法竞赛中的应用技巧。
    </p>
  </div>

  <h2>栈（Stack）在竞赛中的应用</h2>
  
  <p>栈是后进先出（LIFO）的数据结构，在竞赛中常用于表达式求值、括号匹配、单调栈等问题。</p>

  <CodeExample 
    client:load
    title="单调栈求解下一个更大元素"
    code={`#include <iostream>
#include <stack>
#include <vector>
using namespace std;

vector<int> nextGreaterElement(vector<int>& nums) {
    int n = nums.size();
    vector<int> result(n, -1);
    stack<int> st; // 存储索引
    
    for (int i = 0; i < n; i++) {
        // 当前元素比栈顶元素大，找到了栈顶元素的下一个更大元素
        while (!st.empty() && nums[i] > nums[st.top()]) {
            result[st.top()] = nums[i];
            st.pop();
        }
        st.push(i);
    }
    
    return result;
}

int main() {
    vector<int> nums = {2, 1, 2, 4, 3, 1};
    vector<int> result = nextGreaterElement(nums);
    
    cout << "原数组: ";
    for (int x : nums) cout << x << " ";
    cout << "\\n下一个更大元素: ";
    for (int x : result) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="单调栈是竞赛中的重要技巧，用于解决'下一个更大/更小元素'类问题。时间复杂度O(n)，每个元素最多入栈出栈一次。"
    output={`原数组: 2 1 2 4 3 1 
下一个更大元素: 4 2 4 -1 -1 -1`}
  />

  <h2>队列（Queue）和双端队列</h2>
  
  <p>队列是先进先出（FIFO）的数据结构，双端队列允许两端插入删除，在BFS和滑动窗口问题中应用广泛。</p>

  <CodeExample 
    client:load
    title="双端队列实现滑动窗口最大值"
    code={`#include <iostream>
#include <deque>
#include <vector>
using namespace std;

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq; // 存储数组索引
    vector<int> result;
    
    for (int i = 0; i < nums.size(); i++) {
        // 移除超出窗口范围的元素
        while (!dq.empty() && dq.front() <= i - k) {
            dq.pop_front();
        }
        
        // 维护单调递减队列
        while (!dq.empty() && nums[dq.back()] <= nums[i]) {
            dq.pop_back();
        }
        
        dq.push_back(i);
        
        // 窗口形成后开始记录结果
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }
    
    return result;
}

int main() {
    vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};
    int k = 3;
    vector<int> result = maxSlidingWindow(nums, k);
    
    cout << "数组: ";
    for (int x : nums) cout << x << " ";
    cout << "\\n窗口大小: " << k << endl;
    cout << "滑动窗口最大值: ";
    for (int x : result) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="使用双端队列维护滑动窗口中的单调递减序列，队首始终是当前窗口的最大值。时间复杂度O(n)。"
    output={`数组: 1 3 -1 -3 5 3 6 7 
窗口大小: 3
滑动窗口最大值: 3 3 5 5 6 7`}
  />

  <h2>优先队列（Priority Queue）</h2>
  
  <p>优先队列基于堆实现，在Dijkstra算法、贪心算法等场景中经常使用。</p>

  <CodeExample 
    client:load
    title="优先队列解决K个最小元素问题"
    code={`#include <iostream>
#include <queue>
#include <vector>
using namespace std;

// 合并K个有序链表的简化版本：找K个数组中最小的K个元素
vector<int> findKSmallest(vector<vector<int>>& arrays, int k) {
    // 最小堆，存储 {值, 数组索引, 元素索引}
    priority_queue<tuple<int, int, int>, 
                   vector<tuple<int, int, int>>, 
                   greater<tuple<int, int, int>>> pq;
    
    // 将每个数组的第一个元素加入堆
    for (int i = 0; i < arrays.size(); i++) {
        if (!arrays[i].empty()) {
            pq.push({arrays[i][0], i, 0});
        }
    }
    
    vector<int> result;
    
    while (!pq.empty() && result.size() < k) {
        auto [val, arrIdx, elemIdx] = pq.top();
        pq.pop();
        
        result.push_back(val);
        
        // 如果当前数组还有下一个元素，加入堆
        if (elemIdx + 1 < arrays[arrIdx].size()) {
            pq.push({arrays[arrIdx][elemIdx + 1], arrIdx, elemIdx + 1});
        }
    }
    
    return result;
}

int main() {
    vector<vector<int>> arrays = {
        {1, 4, 7},
        {2, 5, 8},
        {3, 6, 9}
    };
    int k = 5;
    
    vector<int> result = findKSmallest(arrays, k);
    
    cout << "输入数组:" << endl;
    for (int i = 0; i < arrays.size(); i++) {
        cout << "数组" << i + 1 << ": ";
        for (int x : arrays[i]) cout << x << " ";
        cout << endl;
    }
    
    cout << "最小的" << k << "个元素: ";
    for (int x : result) cout << x << " ";
    cout << endl;
    
    return 0;
}`}
    explanation="使用最小堆合并多个有序数组，每次取出最小元素。这是合并K个有序链表问题的变形，时间复杂度O(k log m)，其中m是数组个数。"
    output={`输入数组:
数组1: 1 4 7 
数组2: 2 5 8 
数组3: 3 6 9 
最小的5个元素: 1 2 3 4 5`}
  />

  <h2>链表的高级操作</h2>
  
  <p>在竞赛中，链表常与快慢指针、环检测等技巧结合使用。</p>

  <CodeExample 
    client:load
    title="快慢指针检测链表环"
    code={`#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    // 检测链表是否有环
    bool hasCycle(ListNode* head) {
        if (!head || !head->next) return false;
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
            
            if (slow == fast) {
                return true;
            }
        }
        
        return false;
    }
    
    // 找到环的入口节点
    ListNode* detectCycle(ListNode* head) {
        if (!head || !head->next) return nullptr;
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        // 第一步：检测是否有环
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
            
            if (slow == fast) {
                break;
            }
        }
        
        if (!fast || !fast->next) return nullptr;
        
        // 第二步：找到环的入口
        slow = head;
        while (slow != fast) {
            slow = slow->next;
            fast = fast->next;
        }
        
        return slow;
    }
};

int main() {
    // 创建测试链表: 1->2->3->4->2 (环)
    ListNode* head = new ListNode(1);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(3);
    ListNode* node4 = new ListNode(4);
    
    head->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node2; // 形成环
    
    Solution sol;
    
    cout << "链表是否有环: " << (sol.hasCycle(head) ? "是" : "否") << endl;
    
    ListNode* cycleStart = sol.detectCycle(head);
    if (cycleStart) {
        cout << "环的入口节点值: " << cycleStart->val << endl;
    }
    
    return 0;
}`}
    explanation="Floyd判圈算法（快慢指针）是检测链表环的经典方法。快指针每次走2步，慢指针每次走1步，如果有环必定相遇。找环入口需要数学证明：相遇后让一个指针回到头部，两指针同速前进直到再次相遇。"
    output={`链表是否有环: 是
环的入口节点值: 2`}
  />

  <h2>竞赛技巧总结</h2>
  
  <div class="tips">
    <h3>栈的应用场景：</h3>
    <ul>
      <li>表达式求值和括号匹配</li>
      <li>单调栈解决下一个更大/更小元素问题</li>
      <li>函数调用栈的模拟</li>
      <li>深度优先搜索的迭代实现</li>
    </ul>
    
    <h3>队列和双端队列的应用：</h3>
    <ul>
      <li>广度优先搜索</li>
      <li>滑动窗口问题</li>
      <li>单调队列优化动态规划</li>
      <li>层序遍历</li>
    </ul>
    
    <h3>优先队列的应用：</h3>
    <ul>
      <li>Dijkstra最短路径算法</li>
      <li>Huffman编码</li>
      <li>TopK问题</li>
      <li>贪心算法中的最优选择</li>
    </ul>
    
    <h3>链表的竞赛技巧：</h3>
    <ul>
      <li>快慢指针检测环和找中点</li>
      <li>反转链表的迭代和递归实现</li>
      <li>合并有序链表</li>
      <li>链表的分治算法</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/l4-competitive" class="prev">← 返回L4目录</a>
    <a href="/l4-competitive/stl-templates" class="next">STL模板 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>