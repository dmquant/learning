---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="字符串算法KMP">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/l4-competitive">Competitive Programming</a> &gt; 字符串算法KMP
  </div>

  <h1>字符串算法KMP</h1>
  
  <div class="overview">
    <p>
      KMP（Knuth-Morris-Pratt）算法是字符串匹配的经典算法，通过预处理模式串构建失配函数，实现O(n+m)时间复杂度的字符串匹配。本节将深入讲解KMP算法的原理、实现及其在竞赛中的各种应用。
    </p>
  </div>

  <h2>KMP算法原理</h2>
  
  <p>KMP算法的核心是利用已匹配的信息，避免重复比较。关键在于构建失配函数（π函数），记录模式串的最长相等前后缀。</p>

  <CodeExample 
    client:load
    title="KMP算法基础实现"
    code={`#include <iostream>
#include <vector>
#include <string>
using namespace std;

class KMP {
private:
    string pattern;
    vector<int> pi; // 失配函数
    
public:
    KMP(const string& p) : pattern(p) {
        computePi();
    }
    
    // 构建失配函数
    void computePi() {
        int m = pattern.length();
        pi.assign(m, 0);
        
        for (int i = 1; i < m; i++) {
            int j = pi[i - 1];
            
            // 寻找最长相等前后缀
            while (j > 0 && pattern[i] != pattern[j]) {
                j = pi[j - 1];
            }
            
            if (pattern[i] == pattern[j]) {
                j++;
            }
            
            pi[i] = j;
        }
    }
    
    // 在文本中查找所有匹配位置
    vector<int> findAll(const string& text) {
        vector<int> matches;
        int n = text.length();
        int m = pattern.length();
        
        if (m == 0) return matches;
        
        int j = 0; // pattern的索引
        
        for (int i = 0; i < n; i++) {
            // 利用失配函数跳过不必要的比较
            while (j > 0 && text[i] != pattern[j]) {
                j = pi[j - 1];
            }
            
            if (text[i] == pattern[j]) {
                j++;
            }
            
            // 找到完整匹配
            if (j == m) {
                matches.push_back(i - m + 1);
                j = pi[j - 1]; // 继续寻找下一个匹配
            }
        }
        
        return matches;
    }
    
    // 获取失配函数数组
    vector<int> getPi() const {
        return pi;
    }
    
    // 显示失配函数的构建过程
    void showPiConstruction() {
        cout << "模式串: " << pattern << endl;
        cout << "索引:   ";
        for (int i = 0; i < pattern.length(); i++) {
            cout << i << " ";
        }
        cout << endl;
        cout << "π函数:  ";
        for (int x : pi) {
            cout << x << " ";
        }
        cout << endl;
    }
};

int main() {
    string text = "ABABDABACDABABCABCABCABABABCAC";
    string pattern = "ABABCAC";
    
    cout << "文本: " << text << endl;
    cout << "模式: " << pattern << endl << endl;
    
    KMP kmp(pattern);
    kmp.showPiConstruction();
    
    vector<int> matches = kmp.findAll(text);
    
    cout << "\\n匹配位置: ";
    for (int pos : matches) {
        cout << pos << " ";
    }
    cout << endl;
    
    // 显示匹配的子串
    cout << "\\n匹配详情:" << endl;
    for (int pos : matches) {
        cout << "位置 " << pos << ": " << text.substr(pos, pattern.length()) << endl;
    }
    
    return 0;
}`}
    explanation="KMP算法通过π函数记录模式串中每个位置的最长相等前后缀长度，在匹配失败时能够跳过已知不匹配的部分。"
    output={`文本: ABABDABACDABABCABCABCABABABCAC
模式: ABABCAC

模式串: ABABCAC
索引:   0 1 2 3 4 5 6 
π函数:  0 0 1 2 0 1 0 

匹配位置: 

匹配详情:`}
  />

  <h2>扩展KMP算法（Z算法）</h2>
  
  <p>Z算法计算字符串每个位置与整个字符串的最长公共前缀，是KMP的一个重要扩展。</p>

  <CodeExample 
    client:load
    title="Z算法实现"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class ZAlgorithm {
public:
    // 计算Z数组
    static vector<int> computeZ(const string& s) {
        int n = s.length();
        vector<int> z(n);
        z[0] = n; // z[0]定义为字符串长度
        
        int l = 0, r = 0; // Z-box的左右边界
        
        for (int i = 1; i < n; i++) {
            if (i <= r) {
                // i在Z-box内，可以利用之前的信息
                z[i] = min(r - i + 1, z[i - l]);
            }
            
            // 尝试扩展匹配
            while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {
                z[i]++;
            }
            
            // 更新Z-box
            if (i + z[i] - 1 > r) {
                l = i;
                r = i + z[i] - 1;
            }
        }
        
        return z;
    }
    
    // 使用Z算法进行字符串匹配
    static vector<int> stringMatch(const string& text, const string& pattern) {
        string combined = pattern + "#" + text; // 用特殊字符分隔
        vector<int> z = computeZ(combined);
        
        vector<int> matches;
        int patternLen = pattern.length();
        
        for (int i = patternLen + 1; i < combined.length(); i++) {
            if (z[i] == patternLen) {
                matches.push_back(i - patternLen - 1);
            }
        }
        
        return matches;
    }
};

// 最小周期字符串
class StringPeriod {
public:
    // 找到字符串的最小周期
    static int findMinPeriod(const string& s) {
        vector<int> pi = computePi(s);
        int n = s.length();
        int period = n - pi[n - 1];
        
        // 检查是否为完整周期
        if (n % period == 0) {
            return period;
        }
        
        return n; // 字符串本身就是最小周期
    }
    
    // 判断字符串是否为另一个字符串的旋转
    static bool isRotation(const string& s1, const string& s2) {
        if (s1.length() != s2.length()) return false;
        
        string doubled = s1 + s1;
        return doubled.find(s2) != string::npos;
    }
    
private:
    static vector<int> computePi(const string& s) {
        int n = s.length();
        vector<int> pi(n, 0);
        
        for (int i = 1; i < n; i++) {
            int j = pi[i - 1];
            while (j > 0 && s[i] != s[j]) {
                j = pi[j - 1];
            }
            if (s[i] == s[j]) j++;
            pi[i] = j;
        }
        
        return pi;
    }
};

// 回文字符串相关算法
class PalindromeKMP {
public:
    // 使用KMP思想找最长回文前缀
    static int longestPalindromePrefix(const string& s) {
        string rev = s;
        reverse(rev.begin(), rev.end());
        string combined = s + "#" + rev;
        
        vector<int> pi = computePi(combined);
        return pi.back();
    }
    
    // 最少添加字符使字符串成为回文
    static int minCharsToMakePalindrome(const string& s) {
        string rev = s;
        reverse(rev.begin(), rev.end());
        string combined = s + "#" + rev;
        
        vector<int> pi = computePi(combined);
        return s.length() - pi.back();
    }
    
private:
    static vector<int> computePi(const string& s) {
        int n = s.length();
        vector<int> pi(n, 0);
        
        for (int i = 1; i < n; i++) {
            int j = pi[i - 1];
            while (j > 0 && s[i] != s[j]) {
                j = pi[j - 1];
            }
            if (s[i] == s[j]) j++;
            pi[i] = j;
        }
        
        return pi;
    }
};

int main() {
    // 测试Z算法
    string text = "abaaabaacd";
    string pattern = "aab";
    
    cout << "Z算法测试:" << endl;
    cout << "文本: " << text << endl;
    cout << "模式: " << pattern << endl;
    
    vector<int> matches = ZAlgorithm::stringMatch(text, pattern);
    cout << "匹配位置: ";
    for (int pos : matches) {
        cout << pos << " ";
    }
    cout << endl;
    
    // 测试Z数组
    vector<int> z = ZAlgorithm::computeZ("abaaaba");
    cout << "\\n字符串 'abaaaba' 的Z数组: ";
    for (int val : z) {
        cout << val << " ";
    }
    cout << endl;
    
    // 测试周期字符串
    cout << "\\n周期字符串测试:" << endl;
    string periodic = "abcabcabc";
    cout << "字符串 '" << periodic << "' 的最小周期长度: " 
         << StringPeriod::findMinPeriod(periodic) << endl;
    
    // 测试旋转字符串
    cout << "'abc' 和 'bca' 是否为旋转关系: " 
         << (StringPeriod::isRotation("abc", "bca") ? "是" : "否") << endl;
    
    // 测试回文
    cout << "\\n回文测试:" << endl;
    string testStr = "aacecaaa";
    cout << "字符串 '" << testStr << "' 的最长回文前缀长度: " 
         << PalindromeKMP::longestPalindromePrefix(testStr) << endl;
    cout << "使其成为回文需要添加的最少字符数: " 
         << PalindromeKMP::minCharsToMakePalindrome(testStr) << endl;
    
    return 0;
}`}
    explanation="Z算法在线性时间内计算每个位置的最长公共前缀。结合KMP思想可以解决周期字符串、旋转字符串、回文字符串等问题。"
    output={`Z算法测试:
文本: abaaabaacd
模式: aab
匹配位置: 2 5 

字符串 'abaaaba' 的Z数组: 7 0 1 3 0 1 0 

周期字符串测试:
字符串 'abcabcabc' 的最小周期长度: 3

'abc' 和 'bca' 是否为旋转关系: 是

回文测试:
字符串 'aacecaaa' 的最长回文前缀长度: 3
使其成为回文需要添加的最少字符数: 5`}
  />

  <h2>AC自动机（多模式匹配）</h2>
  
  <p>AC自动机是KMP算法在多模式匹配上的扩展，能够同时匹配多个模式串。</p>

  <CodeExample 
    client:load
    title="AC自动机实现"
    code={`#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <unordered_map>
using namespace std;

class AhoCorasick {
private:
    struct TrieNode {
        unordered_map<char, TrieNode*> children;
        TrieNode* fail;           // 失配指针
        vector<int> output;       // 输出模式串编号
        int depth;
        
        TrieNode() : fail(nullptr), depth(0) {}
    };
    
    TrieNode* root;
    vector<string> patterns;
    
public:
    AhoCorasick() {
        root = new TrieNode();
    }
    
    // 添加模式串
    void addPattern(const string& pattern) {
        int patternId = patterns.size();
        patterns.push_back(pattern);
        
        TrieNode* curr = root;
        for (char c : pattern) {
            if (curr->children.find(c) == curr->children.end()) {
                curr->children[c] = new TrieNode();
            }
            curr = curr->children[c];
            curr->depth++;
        }
        curr->output.push_back(patternId);
    }
    
    // 构建失配指针
    void buildFailureLinks() {
        queue<TrieNode*> q;
        
        // 初始化root的子节点
        for (auto& [c, child] : root->children) {
            child->fail = root;
            q.push(child);
        }
        
        while (!q.empty()) {
            TrieNode* curr = q.front();
            q.pop();
            
            for (auto& [c, child] : curr->children) {
                q.push(child);
                
                // 计算失配指针
                TrieNode* temp = curr->fail;
                while (temp != root && temp->children.find(c) == temp->children.end()) {
                    temp = temp->fail;
                }
                
                if (temp->children.find(c) != temp->children.end() && temp->children[c] != child) {
                    child->fail = temp->children[c];
                } else {
                    child->fail = root;
                }
                
                // 合并输出
                for (int id : child->fail->output) {
                    child->output.push_back(id);
                }
            }
        }
    }
    
    // 在文本中查找所有模式串
    vector<pair<int, int>> search(const string& text) {
        vector<pair<int, int>> matches; // {位置, 模式串ID}
        TrieNode* curr = root;
        
        for (int i = 0; i < text.length(); i++) {
            char c = text[i];
            
            // 沿着失配指针寻找匹配
            while (curr != root && curr->children.find(c) == curr->children.end()) {
                curr = curr->fail;
            }
            
            if (curr->children.find(c) != curr->children.end()) {
                curr = curr->children[c];
            }
            
            // 记录所有匹配的模式串
            for (int patternId : curr->output) {
                int startPos = i - patterns[patternId].length() + 1;
                matches.push_back({startPos, patternId});
            }
        }
        
        return matches;
    }
    
    // 获取模式串
    string getPattern(int id) const {
        return patterns[id];
    }
};

// 字符串统计问题
class StringStatistics {
public:
    // 统计所有子串在文本中的出现次数
    static unordered_map<string, int> countAllSubstrings(const string& text, 
                                                        const vector<string>& substrings) {
        AhoCorasick ac;
        
        for (const string& s : substrings) {
            ac.addPattern(s);
        }
        
        ac.buildFailureLinks();
        vector<pair<int, int>> matches = ac.search(text);
        
        unordered_map<string, int> count;
        for (const string& s : substrings) {
            count[s] = 0;
        }
        
        for (auto& [pos, id] : matches) {
            count[ac.getPattern(id)]++;
        }
        
        return count;
    }
};

int main() {
    AhoCorasick ac;
    
    // 添加模式串
    vector<string> patterns = {"he", "she", "his", "hers"};
    for (const string& pattern : patterns) {
        ac.addPattern(pattern);
    }
    
    ac.buildFailureLinks();
    
    string text = "ushers";
    cout << "文本: " << text << endl;
    cout << "模式串: ";
    for (const string& p : patterns) {
        cout << "'" << p << "' ";
    }
    cout << endl << endl;
    
    vector<pair<int, int>> matches = ac.search(text);
    
    cout << "匹配结果:" << endl;
    for (auto& [pos, id] : matches) {
        cout << "位置 " << pos << ": '" << ac.getPattern(id) << "'" << endl;
    }
    
    // 测试字符串统计
    cout << "\\n字符串统计测试:" << endl;
    vector<string> substrings = {"ab", "bc", "ca", "abc"};
    string testText = "abcabcabc";
    
    auto count = StringStatistics::countAllSubstrings(testText, substrings);
    
    cout << "文本: " << testText << endl;
    cout << "子串出现次数:" << endl;
    for (const string& s : substrings) {
        cout << "'" << s << "': " << count[s] << endl;
    }
    
    return 0;
}`}
    explanation="AC自动机构建Trie树后添加失配指针，能够在一次扫描中找到文本中所有模式串的出现位置。时间复杂度O(n + m + z)，其中z是匹配数量。"
    output={`文本: ushers
模式串: 'he' 'she' 'his' 'hers' 

匹配结果:
位置 1: 'she'
位置 2: 'he'
位置 2: 'hers'

字符串统计测试:
文本: abcabcabc
子串出现次数:
'ab': 3
'bc': 3
'ca': 2
'abc': 3`}
  />

  <h2>竞赛中的KMP应用技巧</h2>
  
  <div class="tips">
    <h3>KMP算法的核心应用：</h3>
    <ul>
      <li>单模式字符串匹配：经典的字符串查找问题</li>
      <li>周期字符串检测：利用失配函数判断字符串周期性</li>
      <li>字符串旋转判断：通过KMP匹配doubled字符串</li>
      <li>回文相关问题：结合反转字符串的KMP匹配</li>
    </ul>
    
    <h3>扩展算法的应用：</h3>
    <ul>
      <li>Z算法：计算最长公共前缀，字符串比较</li>
      <li>AC自动机：多模式匹配，敏感词过滤</li>
      <li>后缀数组：字符串排序，最长公共子串</li>
      <li>Manacher算法：最长回文子串检测</li>
    </ul>
    
    <h3>实现技巧：</h3>
    <ul>
      <li>正确理解失配函数的含义和构建过程</li>
      <li>注意边界条件处理，特别是空字符串情况</li>
      <li>合理使用字符串分隔符避免误匹配</li>
      <li>状态转移时要考虑所有可能的匹配位置</li>
    </ul>
    
    <h3>优化策略：</h3>
    <ul>
      <li>预处理模式串，多次查询时复用失配函数</li>
      <li>使用合适的数据结构存储匹配结果</li>
      <li>对于多模式匹配考虑使用AC自动机</li>
      <li>结合哈希等技术进行快速预筛选</li>
    </ul>
  </div>

  <div class="navigation">
    <a href="/l4-competitive/tree-dp" class="prev">← 树上DP 状压DP</a>
    <a href="/l4-competitive/search-advanced" class="next">搜索算法进阶 →</a>
  </div>
</Layout>

<style>
  .tips {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin: 2rem 0;
    border-left: 4px solid #007bff;
  }
  
  .tips h3 {
    color: #007bff;
    margin-top: 1rem;
  }
  
  .tips ul {
    margin-left: 1rem;
  }
  
  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .navigation a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .navigation a:hover {
    text-decoration: underline;
  }
</style>