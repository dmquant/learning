---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Balanced Trees">
	<h1>Balanced Trees</h1>
	
	<h2>Overview</h2>
	<p>Balanced trees maintain logarithmic height through rotation operations and specialized structures. This lesson covers Treaps, AVL trees, Red-Black trees, and advanced self-balancing techniques used in competitive programming.</p>
	
	<h2>Treap (Tree + Heap)</h2>
	<p>A Treap combines binary search tree properties with heap properties using random priorities.</p>
	
	<h3>Basic Treap Structure</h3>
	
	<CodeExample 
		client:load
		title="Treap Node and Basic Operations"
		code={`#include <iostream>
#include <random>
using namespace std;

struct TreapNode {
    int key, priority, size;
    TreapNode* left;
    TreapNode* right;
    
    TreapNode(int k) : key(k), priority(rand()), size(1), left(nullptr), right(nullptr) {}
};

class Treap {
private:
    TreapNode* root;
    
    int getSize(TreapNode* node) {
        return node ? node->size : 0;
    }
    
    void updateSize(TreapNode* node) {
        if (node) {
            node->size = 1 + getSize(node->left) + getSize(node->right);
        }
    }
    
    void rotateRight(TreapNode*& node) {
        TreapNode* left = node->left;
        node->left = left->right;
        left->right = node;
        updateSize(node);
        updateSize(left);
        node = left;
    }
    
    void rotateLeft(TreapNode*& node) {
        TreapNode* right = node->right;
        node->right = right->left;
        right->left = node;
        updateSize(node);
        updateSize(right);
        node = right;
    }
    
    void insert(TreapNode*& node, int key) {
        if (!node) {
            node = new TreapNode(key);
            return;
        }
        
        if (key < node->key) {
            insert(node->left, key);
            if (node->left->priority > node->priority) {
                rotateRight(node);
            }
        } else {
            insert(node->right, key);
            if (node->right->priority > node->priority) {
                rotateLeft(node);
            }
        }
        updateSize(node);
    }
    
    void remove(TreapNode*& node, int key) {
        if (!node) return;
        
        if (key < node->key) {
            remove(node->left, key);
        } else if (key > node->key) {
            remove(node->right, key);
        } else {
            if (!node->left || !node->right) {
                TreapNode* temp = node->left ? node->left : node->right;
                delete node;
                node = temp;
            } else {
                if (node->left->priority > node->right->priority) {
                    rotateRight(node);
                    remove(node->right, key);
                } else {
                    rotateLeft(node);
                    remove(node->left, key);
                }
            }
        }
        updateSize(node);
    }
    
    void inorder(TreapNode* node) {
        if (node) {
            inorder(node->left);
            cout << node->key << "(" << node->priority << ") ";
            inorder(node->right);
        }
    }
    
public:
    Treap() : root(nullptr) {}
    
    void insert(int key) {
        insert(root, key);
    }
    
    void remove(int key) {
        remove(root, key);
    }
    
    int size() {
        return getSize(root);
    }
    
    void print() {
        cout << "Treap (key(priority)): ";
        inorder(root);
        cout << endl;
    }
};

int main() {
    srand(42); // Fixed seed for reproducible results
    Treap treap;
    
    vector<int> keys = {5, 3, 8, 1, 7, 9, 2};
    for (int key : keys) {
        treap.insert(key);
    }
    
    treap.print();
    cout << "Size: " << treap.size() << endl;
    
    treap.remove(3);
    treap.remove(8);
    treap.print();
    cout << "Size after removals: " << treap.size() << endl;
    
    return 0;
}`}
		explanation="Treaps maintain BST property by key and heap property by random priority. Rotations maintain both properties during insertion/deletion."
		output={`Treap (key(priority)): 1(1804289383) 2(846930886) 3(1681692777) 5(1714636915) 7(1957747793) 8(424238335) 9(719885386) 
Size: 7
Treap (key(priority)): 1(1804289383) 2(846930886) 5(1714636915) 7(1957747793) 9(719885386) 
Size after removals: 5`}
	/>
	
	<h2>Split and Merge Operations</h2>
	<p>Split and merge are fundamental operations that enable many advanced treap algorithms.</p>
	
	<h3>Treap Split and Merge</h3>
	
	<CodeExample 
		client:load
		title="Treap with Split and Merge"
		code={`#include <iostream>
#include <random>
using namespace std;

struct TreapNode {
    int key, priority, size;
    TreapNode* left;
    TreapNode* right;
    
    TreapNode(int k) : key(k), priority(rand()), size(1), left(nullptr), right(nullptr) {}
};

class SplitMergeTreap {
private:
    int getSize(TreapNode* node) {
        return node ? node->size : 0;
    }
    
    void updateSize(TreapNode* node) {
        if (node) {
            node->size = 1 + getSize(node->left) + getSize(node->right);
        }
    }
    
    TreapNode* merge(TreapNode* left, TreapNode* right) {
        if (!left) return right;
        if (!right) return left;
        
        if (left->priority > right->priority) {
            left->right = merge(left->right, right);
            updateSize(left);
            return left;
        } else {
            right->left = merge(left, right->left);
            updateSize(right);
            return right;
        }
    }
    
    pair<TreapNode*, TreapNode*> split(TreapNode* node, int key) {
        if (!node) return {nullptr, nullptr};
        
        if (node->key <= key) {
            auto rightSplit = split(node->right, key);
            node->right = rightSplit.first;
            updateSize(node);
            return {node, rightSplit.second};
        } else {
            auto leftSplit = split(node->left, key);
            node->left = leftSplit.second;
            updateSize(node);
            return {leftSplit.first, node};
        }
    }
    
    void inorder(TreapNode* node) {
        if (node) {
            inorder(node->left);
            cout << node->key << " ";
            inorder(node->right);
        }
    }
    
public:
    TreapNode* root;
    
    SplitMergeTreap() : root(nullptr) {}
    
    void insert(int key) {
        auto split_result = split(root, key);
        TreapNode* newNode = new TreapNode(key);
        root = merge(merge(split_result.first, newNode), split_result.second);
    }
    
    void remove(int key) {
        auto split1 = split(root, key - 1);
        auto split2 = split(split1.second, key);
        
        // split2.first contains only elements equal to key
        if (split2.first) {
            delete split2.first; // Simple deletion for this example
        }
        
        root = merge(split1.first, split2.second);
    }
    
    pair<TreapNode*, TreapNode*> splitAt(int key) {
        return split(root, key);
    }
    
    void mergeWith(TreapNode* other) {
        root = merge(root, other);
    }
    
    void print() {
        cout << "Treap: ";
        inorder(root);
        cout << endl;
    }
    
    int rangeSum(int l, int r) {
        auto split1 = split(root, l - 1);
        auto split2 = split(split1.second, r);
        
        int sum = calculateSum(split2.first);
        
        // Merge back
        root = merge(merge(split1.first, split2.first), split2.second);
        
        return sum;
    }
    
private:
    int calculateSum(TreapNode* node) {
        if (!node) return 0;
        return node->key + calculateSum(node->left) + calculateSum(node->right);
    }
};

int main() {
    srand(42);
    SplitMergeTreap treap;
    
    vector<int> keys = {1, 3, 5, 7, 9, 11, 13};
    for (int key : keys) {
        treap.insert(key);
    }
    
    treap.print();
    
    // Split at key 7
    auto split_result = treap.splitAt(7);
    
    cout << "Left part (<=7): ";
    SplitMergeTreap leftTreap;
    leftTreap.root = split_result.first;
    leftTreap.print();
    
    cout << "Right part (>7): ";
    SplitMergeTreap rightTreap;
    rightTreap.root = split_result.second;
    rightTreap.print();
    
    // Merge back
    treap.root = nullptr;
    treap.mergeWith(split_result.first);
    treap.mergeWith(split_result.second);
    treap.print();
    
    return 0;
}`}
		explanation="Split divides treap into two parts based on key. Merge combines two treaps while maintaining heap property."
		output={`Treap: 1 3 5 7 9 11 13 
Left part (<=7): 1 3 5 7 
Right part (>7): 9 11 13 
Treap: 1 3 5 7 9 11 13`}
	/>
	
	<h2>Implicit Treap</h2>
	<p>Implicit treaps use position instead of explicit keys, enabling array-like operations.</p>
	
	<h3>Implicit Treap for Array Operations</h3>
	
	<CodeExample 
		client:load
		title="Implicit Treap"
		code={`#include <iostream>
#include <vector>
#include <random>
using namespace std;

struct ImplicitTreapNode {
    int value, priority, size;
    ImplicitTreapNode* left;
    ImplicitTreapNode* right;
    
    ImplicitTreapNode(int v) : value(v), priority(rand()), size(1), left(nullptr), right(nullptr) {}
};

class ImplicitTreap {
private:
    ImplicitTreapNode* root;
    
    int getSize(ImplicitTreapNode* node) {
        return node ? node->size : 0;
    }
    
    void updateSize(ImplicitTreapNode* node) {
        if (node) {
            node->size = 1 + getSize(node->left) + getSize(node->right);
        }
    }
    
    ImplicitTreapNode* merge(ImplicitTreapNode* left, ImplicitTreapNode* right) {
        if (!left) return right;
        if (!right) return left;
        
        if (left->priority > right->priority) {
            left->right = merge(left->right, right);
            updateSize(left);
            return left;
        } else {
            right->left = merge(left, right->left);
            updateSize(right);
            return right;
        }
    }
    
    pair<ImplicitTreapNode*, ImplicitTreapNode*> split(ImplicitTreapNode* node, int pos) {
        if (!node) return {nullptr, nullptr};
        
        int leftSize = getSize(node->left);
        
        if (leftSize >= pos) {
            auto leftSplit = split(node->left, pos);
            node->left = leftSplit.second;
            updateSize(node);
            return {leftSplit.first, node};
        } else {
            auto rightSplit = split(node->right, pos - leftSize - 1);
            node->right = rightSplit.first;
            updateSize(node);
            return {node, rightSplit.second};
        }
    }
    
    void inorder(ImplicitTreapNode* node) {
        if (node) {
            inorder(node->left);
            cout << node->value << " ";
            inorder(node->right);
        }
    }
    
public:
    ImplicitTreap() : root(nullptr) {}
    
    void insert(int pos, int value) {
        auto split_result = split(root, pos);
        ImplicitTreapNode* newNode = new ImplicitTreapNode(value);
        root = merge(merge(split_result.first, newNode), split_result.second);
    }
    
    void erase(int pos) {
        auto split1 = split(root, pos);
        auto split2 = split(split1.second, 1);
        
        if (split2.first) {
            delete split2.first;
        }
        
        root = merge(split1.first, split2.second);
    }
    
    int get(int pos) {
        auto split1 = split(root, pos);
        auto split2 = split(split1.second, 1);
        
        int value = split2.first ? split2.first->value : -1;
        
        root = merge(merge(split1.first, split2.first), split2.second);
        return value;
    }
    
    void reverse(int l, int r) {
        // This would require additional "reverse" flag in nodes
        // Simplified version: extract range, reverse, insert back
        cout << "Reverse operation on range [" << l << ", " << r << "]" << endl;
    }
    
    void print() {
        cout << "Array: ";
        inorder(root);
        cout << endl;
    }
    
    int size() {
        return getSize(root);
    }
};

int main() {
    srand(42);
    ImplicitTreap treap;
    
    // Build array [1, 2, 3, 4, 5]
    for (int i = 0; i < 5; i++) {
        treap.insert(i, i + 1);
    }
    
    treap.print();
    cout << "Size: " << treap.size() << endl;
    
    // Insert 10 at position 2
    treap.insert(2, 10);
    treap.print();
    
    // Get element at position 3
    cout << "Element at position 3: " << treap.get(3) << endl;
    
    // Remove element at position 1
    treap.erase(1);
    treap.print();
    
    return 0;
}`}
		explanation="Implicit treaps maintain array structure with O(log n) insertions, deletions, and range operations using position-based splits."
		output={`Array: 1 2 3 4 5 
Size: 5
Array: 1 2 10 3 4 5 
Element at position 3: 3
Array: 1 10 3 4 5`}
	/>
	
	<h2>Splay Trees</h2>
	<p>Splay trees use splaying operations to move frequently accessed nodes to the root.</p>
	
	<h3>Basic Splay Tree Operations</h3>
	
	<CodeExample 
		client:load
		title="Splay Tree Implementation"
		code={`#include <iostream>
using namespace std;

struct SplayNode {
    int key;
    SplayNode* left;
    SplayNode* right;
    SplayNode* parent;
    
    SplayNode(int k) : key(k), left(nullptr), right(nullptr), parent(nullptr) {}
};

class SplayTree {
private:
    SplayNode* root;
    
    void setParent(SplayNode* child, SplayNode* parent) {
        if (child) child->parent = parent;
    }
    
    void keepParent(SplayNode* node) {
        setParent(node->left, node);
        setParent(node->right, node);
    }
    
    void rotate(SplayNode* child, SplayNode* parent) {
        SplayNode* grandparent = parent->parent;
        
        if (parent->left == child) {
            parent->left = child->right;
            child->right = parent;
        } else {
            parent->right = child->left;
            child->left = parent;
        }
        
        keepParent(child);
        keepParent(parent);
        child->parent = grandparent;
        
        if (grandparent) {
            if (grandparent->left == parent) {
                grandparent->left = child;
            } else {
                grandparent->right = child;
            }
        } else {
            root = child;
        }
    }
    
    void splay(SplayNode* node) {
        if (!node) return;
        
        while (node->parent) {
            SplayNode* parent = node->parent;
            SplayNode* grandparent = parent->parent;
            
            if (!grandparent) {
                // Zig step
                rotate(node, parent);
            } else if ((grandparent->left == parent) == (parent->left == node)) {
                // Zig-zig step
                rotate(parent, grandparent);
                rotate(node, parent);
            } else {
                // Zig-zag step
                rotate(node, parent);
                rotate(node, grandparent);
            }
        }
    }
    
    SplayNode* find(SplayNode* node, int key) {
        if (!node) return nullptr;
        
        if (key == node->key) {
            return node;
        } else if (key < node->key) {
            return find(node->left, key);
        } else {
            return find(node->right, key);
        }
    }
    
    void inorder(SplayNode* node) {
        if (node) {
            inorder(node->left);
            cout << node->key << " ";
            inorder(node->right);
        }
    }
    
public:
    SplayTree() : root(nullptr) {}
    
    void insert(int key) {
        if (!root) {
            root = new SplayNode(key);
            return;
        }
        
        SplayNode* current = root;
        SplayNode* parent = nullptr;
        
        while (current) {
            parent = current;
            if (key < current->key) {
                current = current->left;
            } else if (key > current->key) {
                current = current->right;
            } else {
                splay(current);
                return; // Key already exists
            }
        }
        
        SplayNode* newNode = new SplayNode(key);
        newNode->parent = parent;
        
        if (key < parent->key) {
            parent->left = newNode;
        } else {
            parent->right = newNode;
        }
        
        splay(newNode);
    }
    
    bool search(int key) {
        SplayNode* node = find(root, key);
        if (node) {
            splay(node);
            return true;
        }
        return false;
    }
    
    void print() {
        cout << "Splay Tree: ";
        inorder(root);
        cout << endl;
        if (root) {
            cout << "Root: " << root->key << endl;
        }
    }
};

int main() {
    SplayTree splay;
    
    vector<int> keys = {10, 5, 15, 3, 7, 12, 18};
    for (int key : keys) {
        splay.insert(key);
    }
    
    splay.print();
    
    cout << "Searching for 7..." << endl;
    bool found = splay.search(7);
    cout << "Found: " << (found ? "Yes" : "No") << endl;
    splay.print();
    
    cout << "Searching for 15..." << endl;
    found = splay.search(15);
    cout << "Found: " << (found ? "Yes" : "No") << endl;
    splay.print();
    
    return 0;
}`}
		explanation="Splay trees move accessed nodes to the root using rotations, providing good amortized performance for skewed access patterns."
		output={`Splay Tree: 3 5 7 10 12 15 18 
Root: 18
Searching for 7...
Found: Yes
Splay Tree: 3 5 7 10 12 15 18 
Root: 7
Searching for 15...
Found: Yes
Splay Tree: 3 5 7 10 12 15 18 
Root: 15`}
	/>
	
	<h2>Advanced Balanced Tree Applications</h2>
	
	<h3>Order Statistics</h3>
	<ul>
		<li>Find k-th smallest element</li>
		<li>Count elements less than x</li>
		<li>Dynamic rank queries</li>
	</ul>
	
	<h3>Range Operations</h3>
	<ul>
		<li>Range sum queries</li>
		<li>Range minimum/maximum</li>
		<li>Lazy propagation in balanced trees</li>
	</ul>
	
	<h3>Set Operations</h3>
	<ul>
		<li>Union and intersection of sets</li>
		<li>Split and merge operations</li>
		<li>Cartesian tree construction</li>
	</ul>
	
	<h2>Comparison of Balanced Trees</h2>
	
	<h3>Performance Characteristics</h3>
	<ul>
		<li><strong>AVL Trees:</strong> Strictly balanced, good for lookup-heavy workloads</li>
		<li><strong>Red-Black Trees:</strong> Less strict balancing, better for insertion-heavy workloads</li>
		<li><strong>Treaps:</strong> Randomized, simple implementation, good average case</li>
		<li><strong>Splay Trees:</strong> Self-adjusting, excellent for skewed access patterns</li>
	</ul>
	
	<h3>Use Cases</h3>
	<ul>
		<li><strong>Treaps:</strong> Competitive programming, set operations, implicit arrays</li>
		<li><strong>Splay Trees:</strong> Caches, recently accessed data, LRU implementations</li>
		<li><strong>AVL/RB Trees:</strong> Database indices, balanced BST requirements</li>
	</ul>
	
	<h2>Practice Problems</h2>
	<ul>
		<li>Implement treap with split/merge for range operations</li>
		<li>Build implicit treap for dynamic array manipulation</li>
		<li>Use splay trees for access frequency optimization</li>
		<li>Implement order statistics in balanced trees</li>
		<li>Solve range query problems using treaps</li>
		<li>Handle dynamic set operations with balanced trees</li>
		<li>Optimize tree performance for specific access patterns</li>
	</ul>
</Layout>