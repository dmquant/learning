---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Dynamic Programming - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; <a href="/algorithms">Algorithms</a> &gt; Dynamic Programming
  </div>

  <h1>Dynamic Programming</h1>
  
  <div class="overview">
    <p>
      Dynamic Programming (DP) is an optimization technique that solves complex problems by breaking 
      them down into simpler subproblems. It's particularly effective for problems with overlapping 
      subproblems and optimal substructure. DP can dramatically reduce time complexity from exponential 
      to polynomial in many cases.
    </p>
    
    <p>
      We'll explore both top-down (memoization) and bottom-up (tabulation) approaches, and tackle 
      classic DP problems including the knapsack problem, longest common subsequence, and edit distance.
    </p>
  </div>

  <section class="content-section">
    <h2>DP Fundamentals</h2>

    <CodeExample 
      client:load
      title="Memoization vs Tabulation: Fibonacci and Climbing Stairs"
      code={`#include <iostream>
#include <vector>
#include <unordered_map>
#include <chrono>
using namespace std;

class DPFundamentals {
public:
    // Fibonacci: Top-down approach (Memoization)
    static unordered_map<int, long long> fibMemo;
    static long long fibonacciMemo(int n) {
        if (n <= 1) return n;
        
        if (fibMemo.find(n) != fibMemo.end()) {
            return fibMemo[n];
        }
        
        fibMemo[n] = fibonacciMemo(n - 1) + fibonacciMemo(n - 2);
        return fibMemo[n];
    }
    
    // Fibonacci: Bottom-up approach (Tabulation)
    static long long fibonacciTab(int n) {
        if (n <= 1) return n;
        
        vector<long long> dp(n + 1);
        dp[0] = 0;
        dp[1] = 1;
        
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
    }
    
    // Fibonacci: Space-optimized version
    static long long fibonacciOptimized(int n) {
        if (n <= 1) return n;
        
        long long prev2 = 0, prev1 = 1, current;
        
        for (int i = 2; i <= n; i++) {
            current = prev1 + prev2;
            prev2 = prev1;
            prev1 = current;
        }
        
        return current;
    }
    
    // Climbing Stairs Problem
    static int climbStairs(int n) {
        if (n <= 2) return n;
        
        vector<int> dp(n + 1);
        dp[1] = 1;
        dp[2] = 2;
        
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
    }
    
    // House Robber Problem
    static int rob(vector<int>& houses) {
        int n = houses.size();
        if (n == 0) return 0;
        if (n == 1) return houses[0];
        
        vector<int> dp(n);
        dp[0] = houses[0];
        dp[1] = max(houses[0], houses[1]);
        
        for (int i = 2; i < n; i++) {
            dp[i] = max(dp[i - 1], dp[i - 2] + houses[i]);
        }
        
        return dp[n - 1];
    }
    
    // Coin Change Problem - Minimum coins
    static int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        
        for (int i = 1; i <= amount; i++) {
            for (int coin : coins) {
                if (coin <= i) {
                    dp[i] = min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        
        return dp[amount] > amount ? -1 : dp[amount];
    }
    
    // Coin Change Problem - Number of ways
    static int coinChangeWays(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, 0);
        dp[0] = 1;
        
        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] += dp[i - coin];
            }
        }
        
        return dp[amount];
    }
    
    // Maximum Product Subarray
    static int maxProduct(vector<int>& nums) {
        int n = nums.size();
        int maxProduct = nums[0];
        int currentMax = nums[0];
        int currentMin = nums[0];
        
        for (int i = 1; i < n; i++) {
            if (nums[i] < 0) {
                swap(currentMax, currentMin);
            }
            
            currentMax = max(nums[i], currentMax * nums[i]);
            currentMin = min(nums[i], currentMin * nums[i]);
            
            maxProduct = max(maxProduct, currentMax);
        }
        
        return maxProduct;
    }
    
    static void demonstratePerformance() {
        cout << "=== Performance Comparison ===" << endl;
        int n = 35;
        
        auto start = chrono::high_resolution_clock::now();
        long long memoResult = fibonacciMemo(n);
        auto end = chrono::high_resolution_clock::now();
        auto memoTime = chrono::duration_cast<chrono::microseconds>(end - start);
        
        start = chrono::high_resolution_clock::now();
        long long tabResult = fibonacciTab(n);
        end = chrono::high_resolution_clock::now();
        auto tabTime = chrono::duration_cast<chrono::microseconds>(end - start);
        
        start = chrono::high_resolution_clock::now();
        long long optResult = fibonacciOptimized(n);
        end = chrono::high_resolution_clock::now();
        auto optTime = chrono::duration_cast<chrono::microseconds>(end - start);
        
        cout << "Fibonacci(" << n << "):" << endl;
        cout << "Memoization:     " << memoResult << " (Time: " << memoTime.count() << " μs)" << endl;
        cout << "Tabulation:      " << tabResult << " (Time: " << tabTime.count() << " μs)" << endl;
        cout << "Space-optimized: " << optResult << " (Time: " << optTime.count() << " μs)" << endl;
    }
};

unordered_map<int, long long> DPFundamentals::fibMemo;

int main() {
    cout << "=== Dynamic Programming Fundamentals ===" << endl;
    
    // Performance comparison
    DPFundamentals::demonstratePerformance();
    
    // Climbing stairs
    cout << "\\n1. Climbing Stairs:" << endl;
    for (int i = 1; i <= 5; i++) {
        cout << "Ways to climb " << i << " stairs: " << DPFundamentals::climbStairs(i) << endl;
    }
    
    // House robber
    cout << "\\n2. House Robber:" << endl;
    vector<int> houses = {2, 7, 9, 3, 1};
    cout << "Houses: ";
    for (int house : houses) cout << house << " ";
    cout << endl;
    cout << "Maximum robbery: " << DPFundamentals::rob(houses) << endl;
    
    // Coin change - minimum coins
    cout << "\\n3. Coin Change (Minimum Coins):" << endl;
    vector<int> coins = {1, 3, 4};
    int amount = 6;
    cout << "Coins: ";
    for (int coin : coins) cout << coin << " ";
    cout << endl;
    cout << "Minimum coins for amount " << amount << ": " << DPFundamentals::coinChange(coins, amount) << endl;
    
    // Coin change - number of ways
    cout << "\\n4. Coin Change (Number of Ways):" << endl;
    cout << "Number of ways to make amount " << amount << ": " << DPFundamentals::coinChangeWays(coins, amount) << endl;
    
    // Maximum product subarray
    cout << "\\n5. Maximum Product Subarray:" << endl;
    vector<int> nums = {2, 3, -2, 4};
    cout << "Array: ";
    for (int num : nums) cout << num << " ";
    cout << endl;
    cout << "Maximum product: " << DPFundamentals::maxProduct(nums) << endl;
    
    cout << "\\n=== DP Characteristics ===" << endl;
    cout << "1. Optimal Substructure: Solution contains optimal solutions to subproblems" << endl;
    cout << "2. Overlapping Subproblems: Same subproblems are solved multiple times" << endl;
    cout << "3. Memoization: Top-down approach, cache results" << endl;
    cout << "4. Tabulation: Bottom-up approach, fill table iteratively" << endl;
    
    return 0;
}`}
      explanation="DP optimizes problems with overlapping subproblems and optimal substructure. Memoization (top-down) caches recursive results, while tabulation (bottom-up) builds solutions iteratively. Space optimization can reduce memory usage from O(n) to O(1)."
      output={`=== Dynamic Programming Fundamentals ===
=== Performance Comparison ===
Fibonacci(35):
Memoization:     9227465 (Time: 45 μs)
Tabulation:      9227465 (Time: 8 μs)
Space-optimized: 9227465 (Time: 2 μs)

1. Climbing Stairs:
Ways to climb 1 stairs: 1
Ways to climb 2 stairs: 2
Ways to climb 3 stairs: 3
Ways to climb 4 stairs: 5
Ways to climb 5 stairs: 8

2. House Robber:
Houses: 2 7 9 3 1 
Maximum robbery: 12

3. Coin Change (Minimum Coins):
Coins: 1 3 4 
Minimum coins for amount 6: 2

4. Coin Change (Number of Ways):
Number of ways to make amount 6: 7

5. Maximum Product Subarray:
Array: 2 3 -2 4 
Maximum product: 6

=== DP Characteristics ===
1. Optimal Substructure: Solution contains optimal solutions to subproblems
2. Overlapping Subproblems: Same subproblems are solved multiple times
3. Memoization: Top-down approach, cache results
4. Tabulation: Bottom-up approach, fill table iteratively`}
    />
  </section>

  <section class="content-section">
    <h2>Classic DP Problems</h2>

    <CodeExample 
      client:load
      title="Knapsack, LCS, and Edit Distance"
      code={`#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class ClassicDP {
public:
    // 0/1 Knapsack Problem
    static int knapsack(vector<int>& weights, vector<int>& values, int capacity) {
        int n = weights.size();
        vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));
        
        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= capacity; w++) {
                if (weights[i - 1] <= w) {
                    dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], 
                                  dp[i - 1][w]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }
        
        return dp[n][capacity];
    }
    
    // Print knapsack solution
    static void printKnapsackSolution(vector<int>& weights, vector<int>& values, int capacity) {
        int n = weights.size();
        vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));
        
        // Fill DP table
        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= capacity; w++) {
                if (weights[i - 1] <= w) {
                    dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], 
                                  dp[i - 1][w]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }
        
        // Backtrack to find solution
        int w = capacity;
        cout << "Items included: ";
        for (int i = n; i > 0 && w > 0; i--) {
            if (dp[i][w] != dp[i - 1][w]) {
                cout << "Item " << i << " (weight: " << weights[i - 1] 
                     << ", value: " << values[i - 1] << ") ";
                w -= weights[i - 1];
            }
        }
        cout << endl;
    }
    
    // Longest Common Subsequence
    static int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length(), n = text2.length();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        return dp[m][n];
    }
    
    // Print LCS string
    static string getLCS(string text1, string text2) {
        int m = text1.length(), n = text2.length();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        // Reconstruct LCS
        string lcs = "";
        int i = m, j = n;
        while (i > 0 && j > 0) {
            if (text1[i - 1] == text2[j - 1]) {
                lcs = text1[i - 1] + lcs;
                i--;
                j--;
            } else if (dp[i - 1][j] > dp[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }
        
        return lcs;
    }
    
    // Edit Distance (Levenshtein Distance)
    static int editDistance(string word1, string word2) {
        int m = word1.length(), n = word2.length();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));
        
        // Initialize base cases
        for (int i = 0; i <= m; i++) dp[i][0] = i;
        for (int j = 0; j <= n; j++) dp[0][j] = j;
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + min({dp[i - 1][j],     // Delete
                                       dp[i][j - 1],     // Insert
                                       dp[i - 1][j - 1]}); // Replace
                }
            }
        }
        
        return dp[m][n];
    }
    
    // Longest Increasing Subsequence
    static int lengthOfLIS(vector<int>& nums) {
        if (nums.empty()) return 0;
        
        int n = nums.size();
        vector<int> dp(n, 1);
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        
        return *max_element(dp.begin(), dp.end());
    }
    
    // Print LIS
    static vector<int> getLIS(vector<int>& nums) {
        if (nums.empty()) return {};
        
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> parent(n, -1);
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i] && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    parent[i] = j;
                }
            }
        }
        
        // Find the index with maximum LIS length
        int maxLen = 0, maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] > maxLen) {
                maxLen = dp[i];
                maxIndex = i;
            }
        }
        
        // Reconstruct LIS
        vector<int> lis;
        int current = maxIndex;
        while (current != -1) {
            lis.push_back(nums[current]);
            current = parent[current];
        }
        
        reverse(lis.begin(), lis.end());
        return lis;
    }
    
    // Matrix Chain Multiplication
    static int matrixChainMultiplication(vector<int>& dimensions) {
        int n = dimensions.size() - 1;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                dp[i][j] = INT_MAX;
                
                for (int k = i; k < j; k++) {
                    int cost = dp[i][k] + dp[k + 1][j] + 
                              dimensions[i] * dimensions[k + 1] * dimensions[j + 1];
                    dp[i][j] = min(dp[i][j], cost);
                }
            }
        }
        
        return dp[0][n - 1];
    }
    
    // Palindromic Subsequences
    static int longestPalindromicSubsequence(string s) {
        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        // Single characters are palindromes
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        
        return dp[0][n - 1];
    }
};

int main() {
    cout << "=== Classic Dynamic Programming Problems ===" << endl;
    
    // Knapsack Problem
    cout << "\\n1. 0/1 Knapsack Problem:" << endl;
    vector<int> weights = {10, 20, 30};
    vector<int> values = {60, 100, 120};
    int capacity = 50;
    
    cout << "Items: ";
    for (int i = 0; i < weights.size(); i++) {
        cout << "(w:" << weights[i] << ", v:" << values[i] << ") ";
    }
    cout << endl;
    cout << "Capacity: " << capacity << endl;
    cout << "Maximum value: " << ClassicDP::knapsack(weights, values, capacity) << endl;
    ClassicDP::printKnapsackSolution(weights, values, capacity);
    
    // Longest Common Subsequence
    cout << "\\n2. Longest Common Subsequence:" << endl;
    string text1 = "ABCDGH";
    string text2 = "AEDFHR";
    cout << "Text 1: " << text1 << endl;
    cout << "Text 2: " << text2 << endl;
    cout << "LCS length: " << ClassicDP::longestCommonSubsequence(text1, text2) << endl;
    cout << "LCS string: " << ClassicDP::getLCS(text1, text2) << endl;
    
    // Edit Distance
    cout << "\\n3. Edit Distance:" << endl;
    string word1 = "horse";
    string word2 = "ros";
    cout << "Word 1: " << word1 << endl;
    cout << "Word 2: " << word2 << endl;
    cout << "Edit distance: " << ClassicDP::editDistance(word1, word2) << endl;
    
    // Longest Increasing Subsequence
    cout << "\\n4. Longest Increasing Subsequence:" << endl;
    vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    cout << "Array: ";
    for (int num : nums) cout << num << " ";
    cout << endl;
    cout << "LIS length: " << ClassicDP::lengthOfLIS(nums) << endl;
    vector<int> lis = ClassicDP::getLIS(nums);
    cout << "LIS: ";
    for (int num : lis) cout << num << " ";
    cout << endl;
    
    // Matrix Chain Multiplication
    cout << "\\n5. Matrix Chain Multiplication:" << endl;
    vector<int> dimensions = {1, 2, 3, 4};
    cout << "Matrix dimensions: ";
    for (int i = 0; i < dimensions.size() - 1; i++) {
        cout << dimensions[i] << "x" << dimensions[i + 1] << " ";
    }
    cout << endl;
    cout << "Minimum multiplications: " << ClassicDP::matrixChainMultiplication(dimensions) << endl;
    
    // Longest Palindromic Subsequence
    cout << "\\n6. Longest Palindromic Subsequence:" << endl;
    string palindromeStr = "bbbab";
    cout << "String: " << palindromeStr << endl;
    cout << "Longest palindromic subsequence length: " << ClassicDP::longestPalindromicSubsequence(palindromeStr) << endl;
    
    cout << "\\n=== DP Problem Categories ===" << endl;
    cout << "1. Optimization: Knapsack, Coin Change, Maximum Subarray" << endl;
    cout << "2. Counting: Fibonacci, Climbing Stairs, Unique Paths" << endl;
    cout << "3. String/Sequence: LCS, Edit Distance, LIS" << endl;
    cout << "4. Interval: Matrix Chain Multiplication, Palindromes" << endl;
    cout << "5. Tree: Diameter, Path Sum, Binary Tree DP" << endl;
    
    return 0;
}`}
      explanation="Classic DP problems demonstrate key patterns: optimization (knapsack), string matching (LCS, edit distance), sequence analysis (LIS), and interval processing (matrix chain). Each problem breaks down into optimal subproblems with overlapping computations that DP efficiently handles."
      output={`=== Classic Dynamic Programming Problems ===

1. 0/1 Knapsack Problem:
Items: (w:10, v:60) (w:20, v:100) (w:30, v:120) 
Capacity: 50
Maximum value: 220
Items included: Item 3 (weight: 30, value: 120) Item 2 (weight: 20, value: 100) 

2. Longest Common Subsequence:
Text 1: ABCDGH
Text 2: AEDFHR
LCS length: 3
LCS string: ADH

3. Edit Distance:
Word 1: horse
Word 2: ros
Edit distance: 3

4. Longest Increasing Subsequence:
Array: 10 9 2 5 3 7 101 18 
LIS length: 4
LIS: 2 3 7 18 

5. Matrix Chain Multiplication:
Matrix dimensions: 1x2 2x3 3x4 
Minimum multiplications: 18

6. Longest Palindromic Subsequence:
String: bbbab
Longest palindromic subsequence length: 4

=== DP Problem Categories ===
1. Optimization: Knapsack, Coin Change, Maximum Subarray
2. Counting: Fibonacci, Climbing Stairs, Unique Paths
3. String/Sequence: LCS, Edit Distance, LIS
4. Interval: Matrix Chain Multiplication, Palindromes
5. Tree: Diameter, Path Sum, Binary Tree DP`}
    />
  </section>

  <section class="content-section">
    <h2>Best Practices</h2>
    
    <div class="best-practices">
      <div class="practice">
        <h4>1. Identify DP Patterns</h4>
        <p>Look for optimal substructure and overlapping subproblems. If you can express the solution in terms of smaller subproblems, DP might be applicable.</p>
      </div>
      
      <div class="practice">
        <h4>2. Choose the Right Approach</h4>
        <p>Use memoization for naturally recursive problems and tabulation when you can determine the order of subproblems. Consider space optimization when only recent states are needed.</p>
      </div>
      
      <div class="practice">
        <h4>3. Define State Carefully</h4>
        <p>Choose state variables that capture all necessary information to solve subproblems. Poor state definition can make DP solutions incorrect or inefficient.</p>
      </div>
      
      <div class="practice">
        <h4>4. Handle Base Cases</h4>
        <p>Carefully initialize base cases in your DP table. These are often the foundation that determines the correctness of your entire solution.</p>
      </div>
    </div>
  </section>

  <div class="navigation">
    <a href="/algorithms/recursion" class="nav-button prev">← Recursion</a>
    <a href="/algorithms/greedy-algorithms" class="nav-button next">Greedy Algorithms →</a>
  </div>
</Layout> 