---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Algorithms - C++ Learning Hub">
  <div class="breadcrumb">
    <a href="/">Home</a> &gt; Algorithms
  </div>

  <h1>Algorithms</h1>
  
  <div class="overview">
    <p>
      Master essential algorithms that form the backbone of computer science and software engineering. 
      This comprehensive section covers fundamental algorithmic techniques from basic sorting and searching 
      to advanced dynamic programming and graph algorithms. Each topic includes detailed implementations, 
      complexity analysis, and real-world applications.
    </p>
    
    <p>
      These algorithms are crucial for technical interviews, competitive programming, and building 
      efficient software systems. Progress through the topics systematically to build a strong 
      algorithmic foundation.
    </p>
  </div>

  <div class="topic-grid">
    <div class="topic-card">
      <h3><a href="/algorithms/sorting">Sorting Algorithms</a></h3>
      <p>Learn fundamental sorting techniques from simple O(n¬≤) algorithms to efficient O(n log n) methods. Covers bubble sort, merge sort, quicksort, heapsort, and specialized sorting algorithms.</p>
      <div class="topics-covered">
        <span>Simple Sorts</span>
        <span>Merge Sort</span>
        <span>Quick Sort</span>
        <span>Heap Sort</span>
        <span>Counting Sort</span>
        <span>Radix Sort</span>
      </div>
    </div>

    <div class="topic-card">
      <h3><a href="/algorithms/searching">Searching Algorithms</a></h3>
      <p>Master searching techniques for finding elements efficiently. From linear search to advanced methods like interpolation and exponential search, plus comprehensive STL search functions.</p>
      <div class="topics-covered">
        <span>Linear Search</span>
        <span>Binary Search</span>
        <span>Interpolation Search</span>
        <span>Exponential Search</span>
        <span>STL Functions</span>
        <span>Jump Search</span>
      </div>
    </div>

    <div class="topic-card">
      <h3><a href="/algorithms/recursion">Recursion</a></h3>
      <p>Understand recursive problem-solving from basic concepts to advanced backtracking algorithms. Includes tree traversals, the N-Queens problem, Sudoku solver, and optimization techniques.</p>
      <div class="topics-covered">
        <span>Basic Recursion</span>
        <span>Tree Algorithms</span>
        <span>Backtracking</span>
        <span>N-Queens</span>
        <span>Sudoku Solver</span>
        <span>Memoization</span>
      </div>
    </div>

    <div class="topic-card">
      <h3><a href="/algorithms/dynamic-programming">Dynamic Programming</a></h3>
      <p>Explore optimization through dynamic programming. Master both memoization and tabulation approaches with classic problems like knapsack, LCS, edit distance, and matrix chain multiplication.</p>
      <div class="topics-covered">
        <span>Memoization</span>
        <span>Tabulation</span>
        <span>Knapsack Problem</span>
        <span>LCS</span>
        <span>Edit Distance</span>
        <span>LIS</span>
      </div>
    </div>

    <div class="topic-card">
      <h3><a href="/algorithms/greedy-algorithms">Greedy Algorithms</a></h3>
      <p>Learn locally optimal decision making with greedy algorithms. Covers activity selection, fractional knapsack, job scheduling, and understanding when greedy approaches work.</p>
      <div class="topics-covered">
        <span>Activity Selection</span>
        <span>Fractional Knapsack</span>
        <span>Job Scheduling</span>
        <span>Minimum Coins</span>
        <span>Platform Assignment</span>
        <span>Egyptian Fractions</span>
      </div>
    </div>

    <div class="topic-card">
      <h3><a href="/algorithms/graph-algorithms">Graph Algorithms</a></h3>
      <p>Master graph theory and algorithms for network problems. Includes BFS, DFS, shortest path algorithms (Dijkstra, Floyd-Warshall), and minimum spanning trees (Kruskal, Prim).</p>
      <div class="topics-covered">
        <span>BFS & DFS</span>
        <span>Dijkstra's Algorithm</span>
        <span>Floyd-Warshall</span>
        <span>Kruskal's MST</span>
        <span>Prim's MST</span>
        <span>Topological Sort</span>
      </div>
    </div>

    <div class="topic-card">
      <h3><a href="/algorithms/string-algorithms">String Algorithms</a></h3>
      <p>Dive into text processing and pattern matching algorithms. Learn KMP, Boyer-Moore, Rabin-Karp for pattern matching, plus string transformations and advanced text algorithms.</p>
      <div class="topics-covered">
        <span>Pattern Matching</span>
        <span>KMP Algorithm</span>
        <span>Boyer-Moore</span>
        <span>Rabin-Karp</span>
        <span>String Processing</span>
        <span>Text Transformations</span>
      </div>
    </div>
  </div>

  <section class="learning-path">
    <h2>Recommended Learning Path</h2>
    
    <div class="path-section">
      <h3>üî∞ Foundation (Start Here)</h3>
      <div class="path-topics">
        <div class="path-topic">
          <strong>Sorting Algorithms</strong>
          <p>Begin with simple sorting methods and progress to efficient algorithms. Essential for understanding algorithm analysis.</p>
        </div>
        <div class="path-topic">
          <strong>Searching Algorithms</strong>
          <p>Learn how to find elements efficiently. Binary search is fundamental to many other algorithms.</p>
        </div>
      </div>
    </div>

    <div class="path-section">
      <h3>üî• Intermediate (Core Techniques)</h3>
      <div class="path-topics">
        <div class="path-topic">
          <strong>Recursion</strong>
          <p>Master recursive thinking and backtracking. Essential for tree algorithms and problem decomposition.</p>
        </div>
        <div class="path-topic">
          <strong>Dynamic Programming</strong>
          <p>Learn optimization through overlapping subproblems. Crucial for interview preparation and complex problems.</p>
        </div>
        <div class="path-topic">
          <strong>Greedy Algorithms</strong>
          <p>Understand local optimization strategies and when they lead to global optima.</p>
        </div>
      </div>
    </div>

    <div class="path-section">
      <h3>üöÄ Advanced (Specialized Topics)</h3>
      <div class="path-topics">
        <div class="path-topic">
          <strong>Graph Algorithms</strong>
          <p>Essential for network problems, social media algorithms, and pathfinding applications.</p>
        </div>
        <div class="path-topic">
          <strong>String Algorithms</strong>
          <p>Specialized techniques for text processing, search engines, and bioinformatics applications.</p>
        </div>
      </div>
    </div>
  </section>

  <section class="algorithm-applications">
    <h2>Real-World Applications</h2>
    
    <div class="applications-grid">
      <div class="application">
        <h4>üîç Search Engines</h4>
        <p>String algorithms, graph algorithms for PageRank, and efficient data structures for indexing billions of web pages.</p>
      </div>
      
      <div class="application">
        <h4>üì± Social Networks</h4>
        <p>Graph algorithms for friend recommendations, shortest path for connections, and network analysis algorithms.</p>
      </div>
      
      <div class="application">
        <h4>üéÆ Game Development</h4>
        <p>Pathfinding algorithms, AI decision trees using dynamic programming, and efficient collision detection.</p>
      </div>
      
      <div class="application">
        <h4>üí∞ Finance</h4>
        <p>Dynamic programming for portfolio optimization, graph algorithms for risk analysis, and real-time sorting for trading.</p>
      </div>
      
      <div class="application">
        <h4>üß¨ Bioinformatics</h4>
        <p>String algorithms for DNA sequence analysis, dynamic programming for sequence alignment, and graph algorithms for protein folding.</p>
      </div>
      
      <div class="application">
        <h4>üöó Transportation</h4>
        <p>Shortest path algorithms for GPS navigation, graph algorithms for route optimization, and greedy algorithms for scheduling.</p>
      </div>
    </div>
  </section>

  <section class="complexity-guide">
    <h2>Time Complexity Quick Reference</h2>
    
    <div class="complexity-table">
      <div class="complexity-header">
        <div>Algorithm Type</div>
        <div>Best Case</div>
        <div>Average Case</div>
        <div>Worst Case</div>
        <div>Space</div>
      </div>
      
      <div class="complexity-row">
        <div><strong>Bubble Sort</strong></div>
        <div>O(n)</div>
        <div>O(n¬≤)</div>
        <div>O(n¬≤)</div>
        <div>O(1)</div>
      </div>
      
      <div class="complexity-row">
        <div><strong>Merge Sort</strong></div>
        <div>O(n log n)</div>
        <div>O(n log n)</div>
        <div>O(n log n)</div>
        <div>O(n)</div>
      </div>
      
      <div class="complexity-row">
        <div><strong>Quick Sort</strong></div>
        <div>O(n log n)</div>
        <div>O(n log n)</div>
        <div>O(n¬≤)</div>
        <div>O(log n)</div>
      </div>
      
      <div class="complexity-row">
        <div><strong>Binary Search</strong></div>
        <div>O(1)</div>
        <div>O(log n)</div>
        <div>O(log n)</div>
        <div>O(1)</div>
      </div>
      
      <div class="complexity-row">
        <div><strong>DFS/BFS</strong></div>
        <div>O(V + E)</div>
        <div>O(V + E)</div>
        <div>O(V + E)</div>
        <div>O(V)</div>
      </div>
      
      <div class="complexity-row">
        <div><strong>Dijkstra</strong></div>
        <div>O(E log V)</div>
        <div>O(E log V)</div>
        <div>O(E log V)</div>
        <div>O(V)</div>
      </div>
    </div>
  </section>

  <div class="getting-started">
    <h2>Getting Started</h2>
    <p>
      Begin your algorithmic journey with <a href="/algorithms/sorting">Sorting Algorithms</a> to build 
      fundamental concepts, then progress through the topics in the recommended order. Each section 
      includes complete implementations, complexity analysis, and practical applications.
    </p>
    
    <div class="start-buttons">
      <a href="/algorithms/sorting" class="start-button primary">Start with Sorting</a>
      <a href="/data-structures" class="start-button secondary">Review Data Structures</a>
    </div>
  </div>
</Layout>

<style>
  .topic-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
  }

  .topic-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
  }

  .topic-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border-color: var(--primary-color);
  }

  .topic-card h3 {
    margin: 0 0 1rem 0;
    color: var(--primary-color);
  }

  .topic-card h3 a {
    text-decoration: none;
    color: inherit;
  }

  .topic-card p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .topics-covered {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .topics-covered span {
    background: var(--code-bg);
    color: var(--text-primary);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    border: 1px solid var(--border-color);
  }

  .learning-path {
    margin: 3rem 0;
    padding: 2rem;
    background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
    border-radius: 12px;
    border: 1px solid var(--border-color);
  }

  .path-section {
    margin: 2rem 0;
  }

  .path-section h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    font-size: 1.2rem;
  }

  .path-topics {
    display: grid;
    gap: 1rem;
  }

  .path-topic {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid var(--primary-color);
  }

  .path-topic strong {
    color: var(--primary-color);
    display: block;
    margin-bottom: 0.5rem;
  }

  .path-topic p {
    margin: 0;
    color: var(--text-secondary);
    font-size: 0.9rem;
  }

  .algorithm-applications {
    margin: 3rem 0;
  }

  .applications-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
  }

  .application {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
  }

  .application h4 {
    color: var(--primary-color);
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
  }

  .application p {
    margin: 0;
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
  }

  .complexity-guide {
    margin: 3rem 0;
  }

  .complexity-table {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
    gap: 1px;
    background: var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    margin-top: 1.5rem;
  }

  .complexity-header {
    display: contents;
  }

  .complexity-header > div {
    background: var(--primary-color);
    color: white;
    padding: 0.75rem;
    font-weight: 600;
    text-align: center;
  }

  .complexity-row {
    display: contents;
  }

  .complexity-row > div {
    background: var(--card-bg);
    padding: 0.75rem;
    text-align: center;
  }

  .complexity-row > div:first-child {
    text-align: left;
    font-weight: 500;
  }

  .getting-started {
    margin: 3rem 0;
    padding: 2rem;
    background: var(--card-bg);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    text-align: center;
  }

  .start-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 1.5rem;
    flex-wrap: wrap;
  }

  .start-button {
    padding: 0.75rem 1.5rem;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .start-button.primary {
    background: var(--primary-color);
    color: white;
  }

  .start-button.primary:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
  }

  .start-button.secondary {
    background: transparent;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
  }

  .start-button.secondary:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
  }

  @media (max-width: 768px) {
    .topic-grid {
      grid-template-columns: 1fr;
    }
    
    .complexity-table {
      grid-template-columns: 2fr 1fr 1fr 1fr;
    }
    
    .complexity-header > div:nth-child(3),
    .complexity-row > div:nth-child(3) {
      display: none;
    }
    
    .applications-grid {
      grid-template-columns: 1fr;
    }
    
    .start-buttons {
      flex-direction: column;
      align-items: center;
    }
  }
</style> 