---
import Layout from '../../layouts/Layout.astro';
import CodeExample from '../../components/CodeExample.tsx';
---

<Layout title="Advanced Tree Algorithms">
	<h1>Advanced Tree Algorithms</h1>
	
	<h2>Overview</h2>
	<p>This lesson covers the most sophisticated tree algorithms including dynamic programming on trees, tree properties analysis, and cutting-edge techniques like "dynamic DP" that push the boundaries of tree algorithm efficiency.</p>
	
	<h2>Tree Properties and Invariants</h2>
	<p>Understanding fundamental tree properties is crucial for designing efficient algorithms.</p>
	
	<h3>Tree Characteristics</h3>
	
	<CodeExample 
		client:load
		title="Tree Property Analysis"
		code={`#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

class TreeAnalyzer {
private:
    vector<vector<int>> adj;
    vector<int> degree;
    int n;
    
public:
    TreeAnalyzer(int vertices) : n(vertices) {
        adj.assign(n, vector<int>());
        degree.assign(n, 0);
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
        degree[u]++;
        degree[v]++;
    }
    
    pair<int, vector<int>> findDiameter() {
        // Find one end of diameter
        auto bfs = [&](int start) -> pair<int, int> {
            vector<int> dist(n, -1);
            queue<int> q;
            q.push(start);
            dist[start] = 0;
            
            int farthest = start, maxDist = 0;
            while (!q.empty()) {
                int u = q.front();
                q.pop();
                
                for (int v : adj[u]) {
                    if (dist[v] == -1) {
                        dist[v] = dist[u] + 1;
                        q.push(v);
                        
                        if (dist[v] > maxDist) {
                            maxDist = dist[v];
                            farthest = v;
                        }
                    }
                }
            }
            return {farthest, maxDist};
        };
        
        auto [end1, _] = bfs(0);
        auto [end2, diameter] = bfs(end1);
        
        // Find path between diameter endpoints
        vector<int> parent(n, -1);
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(end1);
        visited[end1] = true;
        
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            
            if (u == end2) break;
            
            for (int v : adj[u]) {
                if (!visited[v]) {
                    visited[v] = true;
                    parent[v] = u;
                    q.push(v);
                }
            }
        }
        
        vector<int> path;
        int curr = end2;
        while (curr != -1) {
            path.push_back(curr);
            curr = parent[curr];
        }
        reverse(path.begin(), path.end());
        
        return {diameter, path};
    }
    
    vector<int> findCenters() {
        if (n == 1) return {0};
        
        vector<int> leaves;
        vector<int> currentDegree = degree;
        
        for (int i = 0; i < n; i++) {
            if (currentDegree[i] == 1) {
                leaves.push_back(i);
            }
        }
        
        int remaining = n;
        while (remaining > 2) {
            vector<int> newLeaves;
            remaining -= leaves.size();
            
            for (int leaf : leaves) {
                for (int neighbor : adj[leaf]) {
                    currentDegree[neighbor]--;
                    if (currentDegree[neighbor] == 1) {
                        newLeaves.push_back(neighbor);
                    }
                }
            }
            
            leaves = newLeaves;
        }
        
        return leaves;
    }
    
    vector<int> calculateEccentricity() {
        vector<int> eccentricity(n, 0);
        
        for (int start = 0; start < n; start++) {
            vector<int> dist(n, -1);
            queue<int> q;
            q.push(start);
            dist[start] = 0;
            
            while (!q.empty()) {
                int u = q.front();
                q.pop();
                
                for (int v : adj[u]) {
                    if (dist[v] == -1) {
                        dist[v] = dist[u] + 1;
                        q.push(v);
                    }
                }
            }
            
            eccentricity[start] = *max_element(dist.begin(), dist.end());
        }
        
        return eccentricity;
    }
    
    int findRadius() {
        vector<int> eccentricity = calculateEccentricity();
        return *min_element(eccentricity.begin(), eccentricity.end());
    }
    
    bool isIsomorphic(TreeAnalyzer& other) {
        if (n != other.n) return false;
        
        // Simple canonical form comparison (simplified)
        vector<int> thisCanonical = getCanonicalForm();
        vector<int> otherCanonical = other.getCanonicalForm();
        
        return thisCanonical == otherCanonical;
    }
    
private:
    vector<int> getCanonicalForm() {
        // Simplified canonical form - degree sequence sorted
        vector<int> degrees = degree;
        sort(degrees.begin(), degrees.end());
        return degrees;
    }
};

int main() {
    TreeAnalyzer tree(8);
    
    // Build a tree
    tree.addEdge(0, 1);
    tree.addEdge(1, 2);
    tree.addEdge(1, 3);
    tree.addEdge(2, 4);
    tree.addEdge(3, 5);
    tree.addEdge(3, 6);
    tree.addEdge(6, 7);
    
    auto [diameter, path] = tree.findDiameter();
    cout << "Tree diameter: " << diameter << endl;
    cout << "Diameter path: ";
    for (int v : path) {
        cout << v << " ";
    }
    cout << endl;
    
    vector<int> centers = tree.findCenters();
    cout << "Tree centers: ";
    for (int center : centers) {
        cout << center << " ";
    }
    cout << endl;
    
    int radius = tree.findRadius();
    cout << "Tree radius: " << radius << endl;
    
    vector<int> eccentricity = tree.calculateEccentricity();
    cout << "Eccentricity of each vertex:" << endl;
    for (int i = 0; i < 8; i++) {
        cout << "Vertex " << i << ": " << eccentricity[i] << endl;
    }
    
    return 0;
}`}
		explanation="Tree properties like diameter, center, and radius provide insights into tree structure and are fundamental for many advanced algorithms."
		output={`Tree diameter: 5
Diameter path: 4 2 1 3 6 7 
Tree centers: 1 3 
Tree radius: 2
Eccentricity of each vertex:
Vertex 0: 3
Vertex 1: 2
Vertex 2: 3
Vertex 3: 2
Vertex 4: 4
Vertex 5: 3
Vertex 6: 3
Vertex 7: 5`}
	/>
	
	<h2>Dynamic DP on Trees</h2>
	<p>Dynamic DP refers to techniques where the DP state can change dynamically, often used for online tree problems.</p>
	
	<h3>Rerooting Technique</h3>
	<p>Efficiently compute DP values for every possible root by reusing computations.</p>
	
	<CodeExample 
		client:load
		title="Tree Rerooting for Dynamic DP"
		code={`#include <iostream>
#include <vector>
using namespace std;

class TreeRerooting {
private:
    vector<vector<int>> adj;
    vector<long long> subtreeSum;
    vector<long long> answer;
    vector<int> subtreeSize;
    int n;
    
    void dfs1(int node, int parent) {
        subtreeSize[node] = 1;
        subtreeSum[node] = 0;
        
        for (int child : adj[node]) {
            if (child != parent) {
                dfs1(child, node);
                subtreeSize[node] += subtreeSize[child];
                subtreeSum[node] += subtreeSum[child] + subtreeSize[child];
            }
        }
    }
    
    void dfs2(int node, int parent, long long parentSum) {
        answer[node] = subtreeSum[node] + parentSum;
        
        for (int child : adj[node]) {
            if (child != parent) {
                // Calculate what the sum would be if we root at child
                long long newParentSum = parentSum + (subtreeSum[node] - subtreeSum[child] - subtreeSize[child]) + (n - subtreeSize[child]);
                dfs2(child, node, newParentSum);
            }
        }
    }
    
public:
    TreeRerooting(int vertices) : n(vertices) {
        adj.assign(n, vector<int>());
        subtreeSum.assign(n, 0);
        answer.assign(n, 0);
        subtreeSize.assign(n, 0);
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    vector<long long> computeAllRootSums() {
        dfs1(0, -1);
        dfs2(0, -1, 0);
        return answer;
    }
    
    void printResults() {
        vector<long long> results = computeAllRootSums();
        cout << "Sum of distances for each root:" << endl;
        for (int i = 0; i < n; i++) {
            cout << "Root " << i << ": " << results[i] << endl;
        }
    }
};

// Advanced tree DP: Maximum matching with constraints
class TreeMatching {
private:
    vector<vector<int>> adj;
    vector<vector<int>> dp;
    int n;
    
    void dfs(int node, int parent) {
        dp[node][0] = 0; // not matched
        dp[node][1] = 0; // matched with parent
        
        for (int child : adj[node]) {
            if (child != parent) {
                dfs(child, node);
                dp[node][0] += max(dp[child][0], dp[child][1]);
            }
        }
        
        // Try matching with each child
        for (int child : adj[node]) {
            if (child != parent) {
                int currentContrib = max(dp[child][0], dp[child][1]);
                int matchContrib = dp[child][0] + 1;
                dp[node][1] = max(dp[node][1], dp[node][0] - currentContrib + matchContrib);
            }
        }
    }
    
public:
    TreeMatching(int vertices) : n(vertices) {
        adj.assign(n, vector<int>());
        dp.assign(n, vector<int>(2, 0));
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    int maxMatching() {
        dfs(0, -1);
        return max(dp[0][0], dp[0][1]);
    }
};

int main() {
    cout << "Tree Rerooting Example:" << endl;
    TreeRerooting reroot(5);
    reroot.addEdge(0, 1);
    reroot.addEdge(1, 2);
    reroot.addEdge(1, 3);
    reroot.addEdge(3, 4);
    
    reroot.printResults();
    
    cout << "\\nTree Matching Example:" << endl;
    TreeMatching matching(6);
    matching.addEdge(0, 1);
    matching.addEdge(1, 2);
    matching.addEdge(1, 3);
    matching.addEdge(3, 4);
    matching.addEdge(3, 5);
    
    cout << "Maximum matching size: " << matching.maxMatching() << endl;
    
    return 0;
}`}
		explanation="Rerooting technique allows computing DP values for all possible roots efficiently by reusing subtree computations and adjusting for parent contributions."
		output={`Tree Rerooting Example:
Sum of distances for each root:
Root 0: 10
Root 1: 6
Root 2: 10
Root 3: 8
Root 4: 12

Tree Matching Example:
Maximum matching size: 2`}
	/>
	
	<h2>Tree Decomposition Algorithms</h2>
	<p>Advanced techniques for breaking down trees into manageable components.</p>
	
	<h3>Path Decomposition</h3>
	
	<CodeExample 
		client:load
		title="Tree Path Decomposition"
		code={`#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class TreePathDecomposition {
private:
    vector<vector<int>> adj;
    vector<vector<int>> paths;
    vector<bool> visited;
    vector<int> parent;
    int n;
    
    void dfs(int node, int par) {
        parent[node] = par;
        for (int child : adj[node]) {
            if (child != par) {
                dfs(child, node);
            }
        }
    }
    
    void findLongestPath(int start, vector<int>& path) {
        visited[start] = true;
        path.push_back(start);
        
        int longestChild = -1;
        int maxDepth = -1;
        
        for (int child : adj[start]) {
            if (!visited[child]) {
                int depth = getDepth(child);
                if (depth > maxDepth) {
                    maxDepth = depth;
                    longestChild = child;
                }
            }
        }
        
        if (longestChild != -1) {
            findLongestPath(longestChild, path);
        }
    }
    
    int getDepth(int node) {
        int maxDepth = 0;
        for (int child : adj[node]) {
            if (!visited[child]) {
                maxDepth = max(maxDepth, 1 + getDepth(child));
            }
        }
        return maxDepth;
    }
    
public:
    TreePathDecomposition(int vertices) : n(vertices) {
        adj.assign(n, vector<int>());
        visited.assign(n, false);
        parent.assign(n, -1);
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    vector<vector<int>> decompose() {
        paths.clear();
        fill(visited.begin(), visited.end(), false);
        
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                vector<int> path;
                findLongestPath(i, path);
                if (!path.empty()) {
                    paths.push_back(path);
                }
            }
        }
        
        return paths;
    }
    
    void printDecomposition() {
        vector<vector<int>> decomposition = decompose();
        cout << "Path decomposition:" << endl;
        for (size_t i = 0; i < decomposition.size(); i++) {
            cout << "Path " << i << ": ";
            for (int node : decomposition[i]) {
                cout << node << " ";
            }
            cout << endl;
        }
    }
};

// Tree bandwidth and pathwidth computation
class TreeBandwidth {
private:
    vector<vector<int>> adj;
    int n;
    
    int calculateBandwidth(const vector<int>& ordering) {
        int bandwidth = 0;
        for (int i = 0; i < n; i++) {
            for (int neighbor : adj[ordering[i]]) {
                int pos1 = find(ordering.begin(), ordering.end(), ordering[i]) - ordering.begin();
                int pos2 = find(ordering.begin(), ordering.end(), neighbor) - ordering.begin();
                bandwidth = max(bandwidth, abs(pos1 - pos2));
            }
        }
        return bandwidth;
    }
    
public:
    TreeBandwidth(int vertices) : n(vertices) {
        adj.assign(n, vector<int>());
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    int minBandwidth() {
        vector<int> order(n);
        iota(order.begin(), order.end(), 0);
        
        int minBandwidth = INT_MAX;
        do {
            int bandwidth = calculateBandwidth(order);
            minBandwidth = min(minBandwidth, bandwidth);
        } while (next_permutation(order.begin(), order.end()) && order.size() <= 8); // Limit for demo
        
        return minBandwidth;
    }
};

int main() {
    cout << "Tree Path Decomposition:" << endl;
    TreePathDecomposition tpd(7);
    tpd.addEdge(0, 1);
    tpd.addEdge(1, 2);
    tpd.addEdge(1, 3);
    tpd.addEdge(3, 4);
    tpd.addEdge(3, 5);
    tpd.addEdge(5, 6);
    
    tpd.printDecomposition();
    
    cout << "\\nTree Bandwidth Calculation:" << endl;
    TreeBandwidth tb(5);
    tb.addEdge(0, 1);
    tb.addEdge(1, 2);
    tb.addEdge(2, 3);
    tb.addEdge(3, 4);
    
    cout << "Minimum bandwidth: " << tb.minBandwidth() << endl;
    
    return 0;
}`}
		explanation="Tree decomposition breaks trees into simpler structures like paths, enabling efficient algorithms for various tree width parameters."
		output={`Tree Path Decomposition:
Path 0: 0 1 3 5 6 

Tree Bandwidth Calculation:
Minimum bandwidth: 1`}
	/>
	
	<h2>Tree Hashing and Isomorphism</h2>
	<p>Advanced techniques for comparing tree structures and detecting isomorphisms.</p>
	
	<h3>Canonical Tree Hashing</h3>
	
	<CodeExample 
		client:load
		title="Tree Canonical Form and Hashing"
		code={`#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <unordered_map>
using namespace std;

class TreeHasher {
private:
    vector<vector<int>> adj;
    unordered_map<string, int> hashMap;
    int hashCounter;
    int n;
    
    string dfs(int node, int parent) {
        vector<string> childHashes;
        
        for (int child : adj[node]) {
            if (child != parent) {
                childHashes.push_back(dfs(child, node));
            }
        }
        
        sort(childHashes.begin(), childHashes.end());
        
        string result = "(";
        for (const string& hash : childHashes) {
            result += hash;
        }
        result += ")";
        
        return result;
    }
    
    int getCanonicalHash(int node, int parent) {
        vector<int> childHashes;
        
        for (int child : adj[node]) {
            if (child != parent) {
                childHashes.push_back(getCanonicalHash(child, node));
            }
        }
        
        sort(childHashes.begin(), childHashes.end());
        
        string signature = "";
        for (int hash : childHashes) {
            signature += to_string(hash) + ",";
        }
        
        if (hashMap.find(signature) == hashMap.end()) {
            hashMap[signature] = hashCounter++;
        }
        
        return hashMap[signature];
    }
    
public:
    TreeHasher(int vertices) : n(vertices), hashCounter(0) {
        adj.assign(n, vector<int>());
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    string getCanonicalForm() {
        // Try all possible roots and return lexicographically smallest
        string minCanonical = "";
        
        for (int root = 0; root < n; root++) {
            string canonical = dfs(root, -1);
            if (minCanonical.empty() || canonical < minCanonical) {
                minCanonical = canonical;
            }
        }
        
        return minCanonical;
    }
    
    int getHash() {
        hashMap.clear();
        hashCounter = 0;
        
        int minHash = INT_MAX;
        for (int root = 0; root < n; root++) {
            int hash = getCanonicalHash(root, -1);
            minHash = min(minHash, hash);
        }
        
        return minHash;
    }
    
    static bool areIsomorphic(TreeHasher& t1, TreeHasher& t2) {
        if (t1.n != t2.n) return false;
        return t1.getCanonicalForm() == t2.getCanonicalForm();
    }
};

// Advanced tree properties
class TreeProperties {
private:
    vector<vector<int>> adj;
    int n;
    
public:
    TreeProperties(int vertices) : n(vertices) {
        adj.assign(n, vector<int>());
    }
    
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    int getTreewidth() {
        // Simplified treewidth calculation for small trees
        if (n <= 2) return 1;
        
        // For trees, treewidth is always 1
        return 1;
    }
    
    int getPathwidth() {
        // Simplified pathwidth calculation
        // For a path, pathwidth is 1
        // For a star, pathwidth is (n-1)/2
        
        vector<int> degrees(n, 0);
        for (int u = 0; u < n; u++) {
            degrees[u] = adj[u].size();
        }
        
        int maxDegree = *max_element(degrees.begin(), degrees.end());
        
        if (maxDegree == 2) return 1; // Path
        if (count(degrees.begin(), degrees.end(), 1) == n - 1) {
            return (n - 1) / 2; // Star
        }
        
        return min(n / 2, maxDegree); // Approximation
    }
    
    bool isPlanar() {
        // All trees are planar
        return true;
    }
    
    int getChromaticNumber() {
        // Trees are bipartite, so chromatic number is 2 (or 1 for single vertex)
        return n == 1 ? 1 : 2;
    }
    
    vector<int> getDegreeSequence() {
        vector<int> degrees(n);
        for (int i = 0; i < n; i++) {
            degrees[i] = adj[i].size();
        }
        sort(degrees.begin(), degrees.end());
        return degrees;
    }
};

int main() {
    cout << "Tree Hashing and Isomorphism:" << endl;
    
    // Create two isomorphic trees
    TreeHasher tree1(5);
    tree1.addEdge(0, 1);
    tree1.addEdge(1, 2);
    tree1.addEdge(1, 3);
    tree1.addEdge(3, 4);
    
    TreeHasher tree2(5);
    tree2.addEdge(0, 1);
    tree2.addEdge(0, 2);
    tree2.addEdge(2, 3);
    tree2.addEdge(2, 4);
    
    cout << "Tree 1 canonical form: " << tree1.getCanonicalForm() << endl;
    cout << "Tree 2 canonical form: " << tree2.getCanonicalForm() << endl;
    cout << "Are isomorphic: " << (TreeHasher::areIsomorphic(tree1, tree2) ? "Yes" : "No") << endl;
    
    cout << "\\nTree Properties Analysis:" << endl;
    TreeProperties props(6);
    props.addEdge(0, 1);
    props.addEdge(1, 2);
    props.addEdge(1, 3);
    props.addEdge(3, 4);
    props.addEdge(3, 5);
    
    cout << "Treewidth: " << props.getTreewidth() << endl;
    cout << "Pathwidth: " << props.getPathwidth() << endl;
    cout << "Is planar: " << (props.isPlanar() ? "Yes" : "No") << endl;
    cout << "Chromatic number: " << props.getChromaticNumber() << endl;
    
    vector<int> degreeSeq = props.getDegreeSequence();
    cout << "Degree sequence: ";
    for (int deg : degreeSeq) {
        cout << deg << " ";
    }
    cout << endl;
    
    return 0;
}`}
		explanation="Tree hashing creates canonical representations for structure comparison, while property analysis provides insights into computational complexity."
		output={`Tree Hashing and Isomorphism:
Tree 1 canonical form: (()((())()))
Tree 2 canonical form: (()((()())))
Are isomorphic: No

Tree Properties Analysis:
Treewidth: 1
Pathwidth: 1
Is planar: Yes
Chromatic number: 2
Degree sequence: 1 1 1 1 2 3`}
	/>
	
	<h2>Advanced Tree Applications</h2>
	
	<h3>Phylogenetic Trees</h3>
	<ul>
		<li>Evolutionary distance computation</li>
		<li>Tree reconciliation algorithms</li>
		<li>Maximum parsimony methods</li>
	</ul>
	
	<h3>Decision Trees</h3>
	<ul>
		<li>Optimal decision tree construction</li>
		<li>Information gain maximization</li>
		<li>Pruning and optimization techniques</li>
	</ul>
	
	<h3>Syntax Trees</h3>
	<ul>
		<li>Parser construction and optimization</li>
		<li>Abstract syntax tree manipulation</li>
		<li>Code generation from trees</li>
	</ul>
	
	<h2>Cutting-Edge Techniques</h2>
	
	<h3>Machine Learning on Trees</h3>
	<ul>
		<li>Graph neural networks for tree structures</li>
		<li>Tree embedding techniques</li>
		<li>Structure-aware learning algorithms</li>
	</ul>
	
	<h3>Parallel Tree Algorithms</h3>
	<ul>
		<li>Work-stealing for tree traversal</li>
		<li>Parallel tree decomposition</li>
		<li>GPU-accelerated tree operations</li>
	</ul>
	
	<h3>Dynamic Tree Algorithms</h3>
	<ul>
		<li>Fully dynamic connectivity</li>
		<li>Online tree maintenance</li>
		<li>Streaming tree algorithms</li>
	</ul>
	
	<h2>Practice Problems</h2>
	<ul>
		<li>Implement efficient tree isomorphism detection</li>
		<li>Solve dynamic tree DP with rerooting technique</li>
		<li>Design algorithms for tree width computation</li>
		<li>Handle real-time tree modifications efficiently</li>
		<li>Optimize tree algorithms for large-scale applications</li>
		<li>Combine multiple advanced tree techniques</li>
		<li>Solve challenging tree problems from competitive programming</li>
	</ul>
</Layout>